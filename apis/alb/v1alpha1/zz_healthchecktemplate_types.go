/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HealthCheckTemplateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HealthCheckTemplateParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckCodes []*string `json:"healthCheckCodes,omitempty" tf:"health_check_codes,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckConnectPort *float64 `json:"healthCheckConnectPort,omitempty" tf:"health_check_connect_port,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckHost *string `json:"healthCheckHost,omitempty" tf:"health_check_host,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty" tf:"health_check_protocol,omitempty"`

	// +kubebuilder:validation:Required
	HealthCheckTemplateName *string `json:"healthCheckTemplateName" tf:"health_check_template_name,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

// HealthCheckTemplateSpec defines the desired state of HealthCheckTemplate
type HealthCheckTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HealthCheckTemplateParameters `json:"forProvider"`
}

// HealthCheckTemplateStatus defines the observed state of HealthCheckTemplate.
type HealthCheckTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HealthCheckTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HealthCheckTemplate is the Schema for the HealthCheckTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type HealthCheckTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HealthCheckTemplateSpec   `json:"spec"`
	Status            HealthCheckTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthCheckTemplateList contains a list of HealthCheckTemplates
type HealthCheckTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HealthCheckTemplate `json:"items"`
}

// Repository type metadata.
var (
	HealthCheckTemplate_Kind             = "HealthCheckTemplate"
	HealthCheckTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HealthCheckTemplate_Kind}.String()
	HealthCheckTemplate_KindAPIVersion   = HealthCheckTemplate_Kind + "." + CRDGroupVersion.String()
	HealthCheckTemplate_GroupVersionKind = CRDGroupVersion.WithKind(HealthCheckTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&HealthCheckTemplate{}, &HealthCheckTemplateList{})
}
