/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActiontrailObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ActiontrailParameters struct {

	// +kubebuilder:validation:Optional
	EventRw *string `json:"eventRw,omitempty" tf:"event_rw,omitempty"`

	// +kubebuilder:validation:Optional
	IsOrganizationTrail *bool `json:"isOrganizationTrail,omitempty" tf:"is_organization_trail,omitempty"`

	// +kubebuilder:validation:Optional
	MnsTopicArn *string `json:"mnsTopicArn,omitempty" tf:"mns_topic_arn,omitempty"`

	// +kubebuilder:validation:Optional
	OssBucketName *string `json:"ossBucketName,omitempty" tf:"oss_bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	OssKeyPrefix *string `json:"ossKeyPrefix,omitempty" tf:"oss_key_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	OssWriteRoleArn *string `json:"ossWriteRoleArn,omitempty" tf:"oss_write_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// +kubebuilder:validation:Optional
	SlsProjectArn *string `json:"slsProjectArn,omitempty" tf:"sls_project_arn,omitempty"`

	// +kubebuilder:validation:Optional
	SlsWriteRoleArn *string `json:"slsWriteRoleArn,omitempty" tf:"sls_write_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TrailName *string `json:"trailName,omitempty" tf:"trail_name,omitempty"`

	// +kubebuilder:validation:Optional
	TrailRegion *string `json:"trailRegion,omitempty" tf:"trail_region,omitempty"`
}

// ActiontrailSpec defines the desired state of Actiontrail
type ActiontrailSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActiontrailParameters `json:"forProvider"`
}

// ActiontrailStatus defines the observed state of Actiontrail.
type ActiontrailStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActiontrailObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Actiontrail is the Schema for the Actiontrails API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Actiontrail struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActiontrailSpec   `json:"spec"`
	Status            ActiontrailStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActiontrailList contains a list of Actiontrails
type ActiontrailList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Actiontrail `json:"items"`
}

// Repository type metadata.
var (
	Actiontrail_Kind             = "Actiontrail"
	Actiontrail_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Actiontrail_Kind}.String()
	Actiontrail_KindAPIVersion   = Actiontrail_Kind + "." + CRDGroupVersion.String()
	Actiontrail_GroupVersionKind = CRDGroupVersion.WithKind(Actiontrail_Kind)
)

func init() {
	SchemeBuilder.Register(&Actiontrail{}, &ActiontrailList{})
}
