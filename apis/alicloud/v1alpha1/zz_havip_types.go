/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HavipObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type HavipParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	HavipName *string `json:"havipName,omitempty" tf:"havip_name,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`
}

// HavipSpec defines the desired state of Havip
type HavipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HavipParameters `json:"forProvider"`
}

// HavipStatus defines the observed state of Havip.
type HavipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HavipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Havip is the Schema for the Havips API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Havip struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HavipSpec   `json:"spec"`
	Status            HavipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HavipList contains a list of Havips
type HavipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Havip `json:"items"`
}

// Repository type metadata.
var (
	Havip_Kind             = "Havip"
	Havip_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Havip_Kind}.String()
	Havip_KindAPIVersion   = Havip_Kind + "." + CRDGroupVersion.String()
	Havip_GroupVersionKind = CRDGroupVersion.WithKind(Havip_Kind)
)

func init() {
	SchemeBuilder.Register(&Havip{}, &HavipList{})
}
