/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VswitchObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VswitchParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchName *string `json:"vswitchName,omitempty" tf:"vswitch_name,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// VswitchSpec defines the desired state of Vswitch
type VswitchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VswitchParameters `json:"forProvider"`
}

// VswitchStatus defines the observed state of Vswitch.
type VswitchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VswitchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vswitch is the Schema for the Vswitchs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Vswitch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VswitchSpec   `json:"spec"`
	Status            VswitchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VswitchList contains a list of Vswitchs
type VswitchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vswitch `json:"items"`
}

// Repository type metadata.
var (
	Vswitch_Kind             = "Vswitch"
	Vswitch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vswitch_Kind}.String()
	Vswitch_KindAPIVersion   = Vswitch_Kind + "." + CRDGroupVersion.String()
	Vswitch_GroupVersionKind = CRDGroupVersion.WithKind(Vswitch_Kind)
)

func init() {
	SchemeBuilder.Register(&Vswitch{}, &VswitchList{})
}
