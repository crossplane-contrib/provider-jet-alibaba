/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessStrategyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessStrategyParameters struct {

	// +kubebuilder:validation:Optional
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode,omitempty"`

	// +kubebuilder:validation:Required
	DefaultAddrPoolType *string `json:"defaultAddrPoolType" tf:"default_addr_pool_type,omitempty"`

	// +kubebuilder:validation:Required
	DefaultAddrPools []DefaultAddrPoolsParameters `json:"defaultAddrPools" tf:"default_addr_pools,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultLatencyOptimization *string `json:"defaultLatencyOptimization,omitempty" tf:"default_latency_optimization,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultLbaStrategy *string `json:"defaultLbaStrategy,omitempty" tf:"default_lba_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultMaxReturnAddrNum *float64 `json:"defaultMaxReturnAddrNum,omitempty" tf:"default_max_return_addr_num,omitempty"`

	// +kubebuilder:validation:Required
	DefaultMinAvailableAddrNum *float64 `json:"defaultMinAvailableAddrNum" tf:"default_min_available_addr_num,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverAddrPoolType *string `json:"failoverAddrPoolType,omitempty" tf:"failover_addr_pool_type,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverAddrPools []FailoverAddrPoolsParameters `json:"failoverAddrPools,omitempty" tf:"failover_addr_pools,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverLatencyOptimization *string `json:"failoverLatencyOptimization,omitempty" tf:"failover_latency_optimization,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverLbaStrategy *string `json:"failoverLbaStrategy,omitempty" tf:"failover_lba_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverMaxReturnAddrNum *float64 `json:"failoverMaxReturnAddrNum,omitempty" tf:"failover_max_return_addr_num,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverMinAvailableAddrNum *float64 `json:"failoverMinAvailableAddrNum,omitempty" tf:"failover_min_available_addr_num,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// +kubebuilder:validation:Optional
	Lines []LinesParameters `json:"lines,omitempty" tf:"lines,omitempty"`

	// +kubebuilder:validation:Required
	StrategyMode *string `json:"strategyMode" tf:"strategy_mode,omitempty"`

	// +kubebuilder:validation:Required
	StrategyName *string `json:"strategyName" tf:"strategy_name,omitempty"`
}

type DefaultAddrPoolsObservation struct {
}

type DefaultAddrPoolsParameters struct {

	// +kubebuilder:validation:Required
	AddrPoolID *string `json:"addrPoolId" tf:"addr_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	LbaWeight *float64 `json:"lbaWeight,omitempty" tf:"lba_weight,omitempty"`
}

type FailoverAddrPoolsObservation struct {
}

type FailoverAddrPoolsParameters struct {

	// +kubebuilder:validation:Optional
	AddrPoolID *string `json:"addrPoolId,omitempty" tf:"addr_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	LbaWeight *float64 `json:"lbaWeight,omitempty" tf:"lba_weight,omitempty"`
}

type LinesObservation struct {
}

type LinesParameters struct {

	// +kubebuilder:validation:Optional
	LineCode *string `json:"lineCode,omitempty" tf:"line_code,omitempty"`
}

// AccessStrategySpec defines the desired state of AccessStrategy
type AccessStrategySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessStrategyParameters `json:"forProvider"`
}

// AccessStrategyStatus defines the observed state of AccessStrategy.
type AccessStrategyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessStrategyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessStrategy is the Schema for the AccessStrategys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AccessStrategy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessStrategySpec   `json:"spec"`
	Status            AccessStrategyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessStrategyList contains a list of AccessStrategys
type AccessStrategyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessStrategy `json:"items"`
}

// Repository type metadata.
var (
	AccessStrategy_Kind             = "AccessStrategy"
	AccessStrategy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessStrategy_Kind}.String()
	AccessStrategy_KindAPIVersion   = AccessStrategy_Kind + "." + CRDGroupVersion.String()
	AccessStrategy_GroupVersionKind = CRDGroupVersion.WithKind(AccessStrategy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessStrategy{}, &AccessStrategyList{})
}
