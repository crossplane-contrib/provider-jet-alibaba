/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddressObservation struct {
}

type AddressParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Required
	AttributeInfo *string `json:"attributeInfo" tf:"attribute_info,omitempty"`

	// +kubebuilder:validation:Optional
	LbaWeight *float64 `json:"lbaWeight,omitempty" tf:"lba_weight,omitempty"`

	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`
}

type AddressPoolObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AddressPoolParameters struct {

	// +kubebuilder:validation:Required
	Address []AddressParameters `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Required
	AddressPoolName *string `json:"addressPoolName" tf:"address_pool_name,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	LbaStrategy *string `json:"lbaStrategy" tf:"lba_strategy,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// AddressPoolSpec defines the desired state of AddressPool
type AddressPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AddressPoolParameters `json:"forProvider"`
}

// AddressPoolStatus defines the observed state of AddressPool.
type AddressPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AddressPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AddressPool is the Schema for the AddressPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AddressPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AddressPoolSpec   `json:"spec"`
	Status            AddressPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AddressPoolList contains a list of AddressPools
type AddressPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AddressPool `json:"items"`
}

// Repository type metadata.
var (
	AddressPool_Kind             = "AddressPool"
	AddressPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AddressPool_Kind}.String()
	AddressPool_KindAPIVersion   = AddressPool_Kind + "." + CRDGroupVersion.String()
	AddressPool_GroupVersionKind = CRDGroupVersion.WithKind(AddressPool_Kind)
)

func init() {
	SchemeBuilder.Register(&AddressPool{}, &AddressPoolList{})
}
