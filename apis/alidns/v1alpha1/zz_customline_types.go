/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomLineObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CustomLineParameters struct {

	// +kubebuilder:validation:Required
	CustomLineName *string `json:"customLineName" tf:"custom_line_name,omitempty"`

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Required
	IPSegmentList []IPSegmentListParameters `json:"ipSegmentList" tf:"ip_segment_list,omitempty"`

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`
}

type IPSegmentListObservation struct {
}

type IPSegmentListParameters struct {

	// +kubebuilder:validation:Required
	EndIP *string `json:"endIp" tf:"end_ip,omitempty"`

	// +kubebuilder:validation:Required
	StartIP *string `json:"startIp" tf:"start_ip,omitempty"`
}

// CustomLineSpec defines the desired state of CustomLine
type CustomLineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomLineParameters `json:"forProvider"`
}

// CustomLineStatus defines the observed state of CustomLine.
type CustomLineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomLineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomLine is the Schema for the CustomLines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type CustomLine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomLineSpec   `json:"spec"`
	Status            CustomLineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomLineList contains a list of CustomLines
type CustomLineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomLine `json:"items"`
}

// Repository type metadata.
var (
	CustomLine_Kind             = "CustomLine"
	CustomLine_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomLine_Kind}.String()
	CustomLine_KindAPIVersion   = CustomLine_Kind + "." + CRDGroupVersion.String()
	CustomLine_GroupVersionKind = CRDGroupVersion.WithKind(CustomLine_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomLine{}, &CustomLineList{})
}
