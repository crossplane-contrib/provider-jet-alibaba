/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertConfigObservation struct {
}

type AlertConfigParameters struct {

	// +kubebuilder:validation:Optional
	DingtalkNotice *bool `json:"dingtalkNotice,omitempty" tf:"dingtalk_notice,omitempty"`

	// +kubebuilder:validation:Optional
	EmailNotice *bool `json:"emailNotice,omitempty" tf:"email_notice,omitempty"`

	// +kubebuilder:validation:Optional
	NoticeType *string `json:"noticeType,omitempty" tf:"notice_type,omitempty"`

	// +kubebuilder:validation:Optional
	SMSNotice *bool `json:"smsNotice,omitempty" tf:"sms_notice,omitempty"`
}

type GtmInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GtmInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AlertConfig []AlertConfigParameters `json:"alertConfig,omitempty" tf:"alert_config,omitempty"`

	// +kubebuilder:validation:Optional
	AlertGroup []*string `json:"alertGroup,omitempty" tf:"alert_group,omitempty"`

	// +kubebuilder:validation:Optional
	CnameType *string `json:"cnameType,omitempty" tf:"cname_type,omitempty"`

	// +kubebuilder:validation:Optional
	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	// +kubebuilder:validation:Required
	HealthCheckTaskCount *float64 `json:"healthCheckTaskCount" tf:"health_check_task_count,omitempty"`

	// +kubebuilder:validation:Required
	InstanceName *string `json:"instanceName" tf:"instance_name,omitempty"`

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// +kubebuilder:validation:Required
	PackageEdition *string `json:"packageEdition" tf:"package_edition,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Required
	Period *float64 `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	PublicCnameMode *string `json:"publicCnameMode,omitempty" tf:"public_cname_mode,omitempty"`

	// +kubebuilder:validation:Optional
	PublicRr *string `json:"publicRr,omitempty" tf:"public_rr,omitempty"`

	// +kubebuilder:validation:Optional
	PublicUserDomainName *string `json:"publicUserDomainName,omitempty" tf:"public_user_domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	PublicZoneName *string `json:"publicZoneName,omitempty" tf:"public_zone_name,omitempty"`

	// +kubebuilder:validation:Optional
	RenewPeriod *float64 `json:"renewPeriod,omitempty" tf:"renew_period,omitempty"`

	// +kubebuilder:validation:Optional
	RenewalStatus *string `json:"renewalStatus,omitempty" tf:"renewal_status,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SMSNotificationCount *float64 `json:"smsNotificationCount" tf:"sms_notification_count,omitempty"`

	// +kubebuilder:validation:Optional
	StrategyMode *string `json:"strategyMode,omitempty" tf:"strategy_mode,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

// GtmInstanceSpec defines the desired state of GtmInstance
type GtmInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GtmInstanceParameters `json:"forProvider"`
}

// GtmInstanceStatus defines the observed state of GtmInstance.
type GtmInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GtmInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GtmInstance is the Schema for the GtmInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type GtmInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GtmInstanceSpec   `json:"spec"`
	Status            GtmInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GtmInstanceList contains a list of GtmInstances
type GtmInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GtmInstance `json:"items"`
}

// Repository type metadata.
var (
	GtmInstance_Kind             = "GtmInstance"
	GtmInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GtmInstance_Kind}.String()
	GtmInstance_KindAPIVersion   = GtmInstance_Kind + "." + CRDGroupVersion.String()
	GtmInstance_GroupVersionKind = CRDGroupVersion.WithKind(GtmInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&GtmInstance{}, &GtmInstanceList{})
}
