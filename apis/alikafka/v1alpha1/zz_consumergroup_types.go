/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConsumerGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConsumerGroupParameters struct {

	// +kubebuilder:validation:Required
	ConsumerID *string `json:"consumerId" tf:"consumer_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ConsumerGroupSpec defines the desired state of ConsumerGroup
type ConsumerGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConsumerGroupParameters `json:"forProvider"`
}

// ConsumerGroupStatus defines the observed state of ConsumerGroup.
type ConsumerGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConsumerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumerGroup is the Schema for the ConsumerGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ConsumerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConsumerGroupSpec   `json:"spec"`
	Status            ConsumerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumerGroupList contains a list of ConsumerGroups
type ConsumerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConsumerGroup `json:"items"`
}

// Repository type metadata.
var (
	ConsumerGroup_Kind             = "ConsumerGroup"
	ConsumerGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConsumerGroup_Kind}.String()
	ConsumerGroup_KindAPIVersion   = ConsumerGroup_Kind + "." + CRDGroupVersion.String()
	ConsumerGroup_GroupVersionKind = CRDGroupVersion.WithKind(ConsumerGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ConsumerGroup{}, &ConsumerGroupList{})
}
