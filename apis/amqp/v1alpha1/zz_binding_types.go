/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BindingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BindingParameters struct {

	// +kubebuilder:validation:Optional
	Argument *string `json:"argument,omitempty" tf:"argument,omitempty"`

	// +kubebuilder:validation:Required
	BindingKey *string `json:"bindingKey" tf:"binding_key,omitempty"`

	// +kubebuilder:validation:Required
	BindingType *string `json:"bindingType" tf:"binding_type,omitempty"`

	// +kubebuilder:validation:Required
	DestinationName *string `json:"destinationName" tf:"destination_name,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	SourceExchange *string `json:"sourceExchange" tf:"source_exchange,omitempty"`

	// +kubebuilder:validation:Required
	VirtualHostName *string `json:"virtualHostName" tf:"virtual_host_name,omitempty"`
}

// BindingSpec defines the desired state of Binding
type BindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BindingParameters `json:"forProvider"`
}

// BindingStatus defines the observed state of Binding.
type BindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Binding is the Schema for the Bindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Binding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BindingSpec   `json:"spec"`
	Status            BindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BindingList contains a list of Bindings
type BindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Binding `json:"items"`
}

// Repository type metadata.
var (
	Binding_Kind             = "Binding"
	Binding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Binding_Kind}.String()
	Binding_KindAPIVersion   = Binding_Kind + "." + CRDGroupVersion.String()
	Binding_GroupVersionKind = CRDGroupVersion.WithKind(Binding_Kind)
)

func init() {
	SchemeBuilder.Register(&Binding{}, &BindingList{})
}
