/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueueObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QueueParameters struct {

	// +kubebuilder:validation:Optional
	AutoDeleteState *bool `json:"autoDeleteState,omitempty" tf:"auto_delete_state,omitempty"`

	// +kubebuilder:validation:Optional
	AutoExpireState *string `json:"autoExpireState,omitempty" tf:"auto_expire_state,omitempty"`

	// +kubebuilder:validation:Optional
	DeadLetterExchange *string `json:"deadLetterExchange,omitempty" tf:"dead_letter_exchange,omitempty"`

	// +kubebuilder:validation:Optional
	DeadLetterRoutingKey *string `json:"deadLetterRoutingKey,omitempty" tf:"dead_letter_routing_key,omitempty"`

	// +kubebuilder:validation:Optional
	ExclusiveState *bool `json:"exclusiveState,omitempty" tf:"exclusive_state,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	MaxLength *string `json:"maxLength,omitempty" tf:"max_length,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumPriority *float64 `json:"maximumPriority,omitempty" tf:"maximum_priority,omitempty"`

	// +kubebuilder:validation:Optional
	MessageTTL *string `json:"messageTtl,omitempty" tf:"message_ttl,omitempty"`

	// +kubebuilder:validation:Required
	QueueName *string `json:"queueName" tf:"queue_name,omitempty"`

	// +kubebuilder:validation:Required
	VirtualHostName *string `json:"virtualHostName" tf:"virtual_host_name,omitempty"`
}

// QueueSpec defines the desired state of Queue
type QueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueParameters `json:"forProvider"`
}

// QueueStatus defines the observed state of Queue.
type QueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Queue is the Schema for the Queues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Queue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueueSpec   `json:"spec"`
	Status            QueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueList contains a list of Queues
type QueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Queue `json:"items"`
}

// Repository type metadata.
var (
	Queue_Kind             = "Queue"
	Queue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Queue_Kind}.String()
	Queue_KindAPIVersion   = Queue_Kind + "." + CRDGroupVersion.String()
	Queue_GroupVersionKind = CRDGroupVersion.WithKind(Queue_Kind)
)

func init() {
	SchemeBuilder.Register(&Queue{}, &QueueList{})
}
