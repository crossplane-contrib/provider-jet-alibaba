/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualHostObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VirtualHostParameters struct {

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	VirtualHostName *string `json:"virtualHostName" tf:"virtual_host_name,omitempty"`
}

// VirtualHostSpec defines the desired state of VirtualHost
type VirtualHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualHostParameters `json:"forProvider"`
}

// VirtualHostStatus defines the observed state of VirtualHost.
type VirtualHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualHost is the Schema for the VirtualHosts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type VirtualHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualHostSpec   `json:"spec"`
	Status            VirtualHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualHostList contains a list of VirtualHosts
type VirtualHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualHost `json:"items"`
}

// Repository type metadata.
var (
	VirtualHost_Kind             = "VirtualHost"
	VirtualHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualHost_Kind}.String()
	VirtualHost_KindAPIVersion   = VirtualHost_Kind + "." + CRDGroupVersion.String()
	VirtualHost_GroupVersionKind = CRDGroupVersion.WithKind(VirtualHost_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualHost{}, &VirtualHostList{})
}
