/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayAppAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayAppAttachmentParameters struct {

	// +kubebuilder:validation:Required
	APIID *string `json:"apiId" tf:"api_id,omitempty"`

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	StageName *string `json:"stageName" tf:"stage_name,omitempty"`
}

// GatewayAppAttachmentSpec defines the desired state of GatewayAppAttachment
type GatewayAppAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayAppAttachmentParameters `json:"forProvider"`
}

// GatewayAppAttachmentStatus defines the observed state of GatewayAppAttachment.
type GatewayAppAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayAppAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAppAttachment is the Schema for the GatewayAppAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type GatewayAppAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayAppAttachmentSpec   `json:"spec"`
	Status            GatewayAppAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAppAttachmentList contains a list of GatewayAppAttachments
type GatewayAppAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayAppAttachment `json:"items"`
}

// Repository type metadata.
var (
	GatewayAppAttachment_Kind             = "GatewayAppAttachment"
	GatewayAppAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayAppAttachment_Kind}.String()
	GatewayAppAttachment_KindAPIVersion   = GatewayAppAttachment_Kind + "." + CRDGroupVersion.String()
	GatewayAppAttachment_GroupVersionKind = CRDGroupVersion.WithKind(GatewayAppAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayAppAttachment{}, &GatewayAppAttachmentList{})
}
