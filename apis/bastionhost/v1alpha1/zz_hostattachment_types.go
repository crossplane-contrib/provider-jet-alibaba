/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HostAttachmentParameters struct {

	// +kubebuilder:validation:Required
	HostGroupID *string `json:"hostGroupId" tf:"host_group_id,omitempty"`

	// +kubebuilder:validation:Required
	HostID *string `json:"hostId" tf:"host_id,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`
}

// HostAttachmentSpec defines the desired state of HostAttachment
type HostAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostAttachmentParameters `json:"forProvider"`
}

// HostAttachmentStatus defines the observed state of HostAttachment.
type HostAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HostAttachment is the Schema for the HostAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type HostAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HostAttachmentSpec   `json:"spec"`
	Status            HostAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostAttachmentList contains a list of HostAttachments
type HostAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostAttachment `json:"items"`
}

// Repository type metadata.
var (
	HostAttachment_Kind             = "HostAttachment"
	HostAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostAttachment_Kind}.String()
	HostAttachment_KindAPIVersion   = HostAttachment_Kind + "." + CRDGroupVersion.String()
	HostAttachment_GroupVersionKind = CRDGroupVersion.WithKind(HostAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&HostAttachment{}, &HostAttachmentList{})
}
