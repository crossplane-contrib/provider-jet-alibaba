/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostGroupObservation struct {
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HostGroupParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Required
	HostGroupName *string `json:"hostGroupName" tf:"host_group_name,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`
}

// HostGroupSpec defines the desired state of HostGroup
type HostGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostGroupParameters `json:"forProvider"`
}

// HostGroupStatus defines the observed state of HostGroup.
type HostGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HostGroup is the Schema for the HostGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type HostGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HostGroupSpec   `json:"spec"`
	Status            HostGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostGroupList contains a list of HostGroups
type HostGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostGroup `json:"items"`
}

// Repository type metadata.
var (
	HostGroup_Kind             = "HostGroup"
	HostGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostGroup_Kind}.String()
	HostGroup_KindAPIVersion   = HostGroup_Kind + "." + CRDGroupVersion.String()
	HostGroup_GroupVersionKind = CRDGroupVersion.WithKind(HostGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&HostGroup{}, &HostGroupList{})
}
