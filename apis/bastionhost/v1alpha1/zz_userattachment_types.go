/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserAttachmentParameters struct {

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	UserGroupID *string `json:"userGroupId" tf:"user_group_id,omitempty"`

	// +kubebuilder:validation:Required
	UserID *string `json:"userId" tf:"user_id,omitempty"`
}

// UserAttachmentSpec defines the desired state of UserAttachment
type UserAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserAttachmentParameters `json:"forProvider"`
}

// UserAttachmentStatus defines the observed state of UserAttachment.
type UserAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserAttachment is the Schema for the UserAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type UserAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserAttachmentSpec   `json:"spec"`
	Status            UserAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserAttachmentList contains a list of UserAttachments
type UserAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserAttachment `json:"items"`
}

// Repository type metadata.
var (
	UserAttachment_Kind             = "UserAttachment"
	UserAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserAttachment_Kind}.String()
	UserAttachment_KindAPIVersion   = UserAttachment_Kind + "." + CRDGroupVersion.String()
	UserAttachment_GroupVersionKind = CRDGroupVersion.WithKind(UserAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&UserAttachment{}, &UserAttachmentList{})
}
