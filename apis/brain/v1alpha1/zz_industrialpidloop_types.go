/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndustrialPidLoopObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type IndustrialPidLoopParameters struct {

	// +kubebuilder:validation:Required
	PidLoopConfiguration *string `json:"pidLoopConfiguration" tf:"pid_loop_configuration,omitempty"`

	// +kubebuilder:validation:Required
	PidLoopDcsType *string `json:"pidLoopDcsType" tf:"pid_loop_dcs_type,omitempty"`

	// +kubebuilder:validation:Optional
	PidLoopDesc *string `json:"pidLoopDesc,omitempty" tf:"pid_loop_desc,omitempty"`

	// +kubebuilder:validation:Required
	PidLoopIsCrucial *bool `json:"pidLoopIsCrucial" tf:"pid_loop_is_crucial,omitempty"`

	// +kubebuilder:validation:Required
	PidLoopName *string `json:"pidLoopName" tf:"pid_loop_name,omitempty"`

	// +kubebuilder:validation:Required
	PidLoopType *string `json:"pidLoopType" tf:"pid_loop_type,omitempty"`

	// +kubebuilder:validation:Required
	PidProjectID *string `json:"pidProjectId" tf:"pid_project_id,omitempty"`
}

// IndustrialPidLoopSpec defines the desired state of IndustrialPidLoop
type IndustrialPidLoopSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndustrialPidLoopParameters `json:"forProvider"`
}

// IndustrialPidLoopStatus defines the observed state of IndustrialPidLoop.
type IndustrialPidLoopStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndustrialPidLoopObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndustrialPidLoop is the Schema for the IndustrialPidLoops API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type IndustrialPidLoop struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndustrialPidLoopSpec   `json:"spec"`
	Status            IndustrialPidLoopStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndustrialPidLoopList contains a list of IndustrialPidLoops
type IndustrialPidLoopList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndustrialPidLoop `json:"items"`
}

// Repository type metadata.
var (
	IndustrialPidLoop_Kind             = "IndustrialPidLoop"
	IndustrialPidLoop_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndustrialPidLoop_Kind}.String()
	IndustrialPidLoop_KindAPIVersion   = IndustrialPidLoop_Kind + "." + CRDGroupVersion.String()
	IndustrialPidLoop_GroupVersionKind = CRDGroupVersion.WithKind(IndustrialPidLoop_Kind)
)

func init() {
	SchemeBuilder.Register(&IndustrialPidLoop{}, &IndustrialPidLoopList{})
}
