/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndustrialPidOrganizationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IndustrialPidOrganizationParameters struct {

	// +kubebuilder:validation:Optional
	ParentPidOrganizationID *string `json:"parentPidOrganizationId,omitempty" tf:"parent_pid_organization_id,omitempty"`

	// +kubebuilder:validation:Required
	PidOrganizationName *string `json:"pidOrganizationName" tf:"pid_organization_name,omitempty"`
}

// IndustrialPidOrganizationSpec defines the desired state of IndustrialPidOrganization
type IndustrialPidOrganizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndustrialPidOrganizationParameters `json:"forProvider"`
}

// IndustrialPidOrganizationStatus defines the observed state of IndustrialPidOrganization.
type IndustrialPidOrganizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndustrialPidOrganizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndustrialPidOrganization is the Schema for the IndustrialPidOrganizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type IndustrialPidOrganization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndustrialPidOrganizationSpec   `json:"spec"`
	Status            IndustrialPidOrganizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndustrialPidOrganizationList contains a list of IndustrialPidOrganizations
type IndustrialPidOrganizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndustrialPidOrganization `json:"items"`
}

// Repository type metadata.
var (
	IndustrialPidOrganization_Kind             = "IndustrialPidOrganization"
	IndustrialPidOrganization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndustrialPidOrganization_Kind}.String()
	IndustrialPidOrganization_KindAPIVersion   = IndustrialPidOrganization_Kind + "." + CRDGroupVersion.String()
	IndustrialPidOrganization_GroupVersionKind = CRDGroupVersion.WithKind(IndustrialPidOrganization_Kind)
)

func init() {
	SchemeBuilder.Register(&IndustrialPidOrganization{}, &IndustrialPidOrganizationList{})
}
