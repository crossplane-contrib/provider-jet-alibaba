/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndustrialPidProjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IndustrialPidProjectParameters struct {

	// +kubebuilder:validation:Required
	PidOrganizationID *string `json:"pidOrganizationId" tf:"pid_organization_id,omitempty"`

	// +kubebuilder:validation:Optional
	PidProjectDesc *string `json:"pidProjectDesc,omitempty" tf:"pid_project_desc,omitempty"`

	// +kubebuilder:validation:Required
	PidProjectName *string `json:"pidProjectName" tf:"pid_project_name,omitempty"`
}

// IndustrialPidProjectSpec defines the desired state of IndustrialPidProject
type IndustrialPidProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndustrialPidProjectParameters `json:"forProvider"`
}

// IndustrialPidProjectStatus defines the observed state of IndustrialPidProject.
type IndustrialPidProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndustrialPidProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndustrialPidProject is the Schema for the IndustrialPidProjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type IndustrialPidProject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndustrialPidProjectSpec   `json:"spec"`
	Status            IndustrialPidProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndustrialPidProjectList contains a list of IndustrialPidProjects
type IndustrialPidProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndustrialPidProject `json:"items"`
}

// Repository type metadata.
var (
	IndustrialPidProject_Kind             = "IndustrialPidProject"
	IndustrialPidProject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndustrialPidProject_Kind}.String()
	IndustrialPidProject_KindAPIVersion   = IndustrialPidProject_Kind + "." + CRDGroupVersion.String()
	IndustrialPidProject_GroupVersionKind = CRDGroupVersion.WithKind(IndustrialPidProject_Kind)
)

func init() {
	SchemeBuilder.Register(&IndustrialPidProject{}, &IndustrialPidProjectList{})
}
