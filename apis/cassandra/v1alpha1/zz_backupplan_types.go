/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupPlanParameters struct {

	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// +kubebuilder:validation:Optional
	BackupPeriod *string `json:"backupPeriod,omitempty" tf:"backup_period,omitempty"`

	// +kubebuilder:validation:Required
	BackupTime *string `json:"backupTime" tf:"backup_time,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	DataCenterID *string `json:"dataCenterId" tf:"data_center_id,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionPeriod *float64 `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`
}

// BackupPlanSpec defines the desired state of BackupPlan
type BackupPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPlanParameters `json:"forProvider"`
}

// BackupPlanStatus defines the observed state of BackupPlan.
type BackupPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPlan is the Schema for the BackupPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BackupPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPlanSpec   `json:"spec"`
	Status            BackupPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPlanList contains a list of BackupPlans
type BackupPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPlan `json:"items"`
}

// Repository type metadata.
var (
	BackupPlan_Kind             = "BackupPlan"
	BackupPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPlan_Kind}.String()
	BackupPlan_KindAPIVersion   = BackupPlan_Kind + "." + CRDGroupVersion.String()
	BackupPlan_GroupVersionKind = CRDGroupVersion.WithKind(BackupPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPlan{}, &BackupPlanList{})
}
