/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataCenterObservation struct {
	DataCenterID *string `json:"dataCenterId,omitempty" tf:"data_center_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PublicPoints []*string `json:"publicPoints,omitempty" tf:"public_points,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DataCenterParameters struct {

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenewPeriod *float64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	DataCenterName *string `json:"dataCenterName,omitempty" tf:"data_center_name,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePublic *bool `json:"enablePublic,omitempty" tf:"enable_public,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Required
	NodeCount *float64 `json:"nodeCount" tf:"node_count,omitempty"`

	// +kubebuilder:validation:Required
	PayType *string `json:"payType" tf:"pay_type,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// DataCenterSpec defines the desired state of DataCenter
type DataCenterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataCenterParameters `json:"forProvider"`
}

// DataCenterStatus defines the observed state of DataCenter.
type DataCenterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataCenterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataCenter is the Schema for the DataCenters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DataCenter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataCenterSpec   `json:"spec"`
	Status            DataCenterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataCenterList contains a list of DataCenters
type DataCenterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataCenter `json:"items"`
}

// Repository type metadata.
var (
	DataCenter_Kind             = "DataCenter"
	DataCenter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataCenter_Kind}.String()
	DataCenter_KindAPIVersion   = DataCenter_Kind + "." + CRDGroupVersion.String()
	DataCenter_GroupVersionKind = CRDGroupVersion.WithKind(DataCenter_Kind)
)

func init() {
	SchemeBuilder.Register(&DataCenter{}, &DataCenterList{})
}
