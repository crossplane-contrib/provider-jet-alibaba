/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedHostAccountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DedicatedHostAccountParameters struct {

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Required
	AccountPasswordSecretRef v1.SecretKeySelector `json:"accountPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	AccountType *string `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// +kubebuilder:validation:Required
	DedicatedHostID *string `json:"dedicatedHostId" tf:"dedicated_host_id,omitempty"`
}

// DedicatedHostAccountSpec defines the desired state of DedicatedHostAccount
type DedicatedHostAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedHostAccountParameters `json:"forProvider"`
}

// DedicatedHostAccountStatus defines the observed state of DedicatedHostAccount.
type DedicatedHostAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedHostAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostAccount is the Schema for the DedicatedHostAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DedicatedHostAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedHostAccountSpec   `json:"spec"`
	Status            DedicatedHostAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostAccountList contains a list of DedicatedHostAccounts
type DedicatedHostAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedHostAccount `json:"items"`
}

// Repository type metadata.
var (
	DedicatedHostAccount_Kind             = "DedicatedHostAccount"
	DedicatedHostAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedHostAccount_Kind}.String()
	DedicatedHostAccount_KindAPIVersion   = DedicatedHostAccount_Kind + "." + CRDGroupVersion.String()
	DedicatedHostAccount_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedHostAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedHostAccount{}, &DedicatedHostAccountList{})
}
