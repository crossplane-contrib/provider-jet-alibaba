/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedHostGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DedicatedHostGroupParameters struct {

	// +kubebuilder:validation:Optional
	AllocationPolicy *string `json:"allocationPolicy,omitempty" tf:"allocation_policy,omitempty"`

	// +kubebuilder:validation:Optional
	CPUAllocationRatio *float64 `json:"cpuAllocationRatio,omitempty" tf:"cpu_allocation_ratio,omitempty"`

	// +kubebuilder:validation:Optional
	DedicatedHostGroupDesc *string `json:"dedicatedHostGroupDesc,omitempty" tf:"dedicated_host_group_desc,omitempty"`

	// +kubebuilder:validation:Optional
	DiskAllocationRatio *float64 `json:"diskAllocationRatio,omitempty" tf:"disk_allocation_ratio,omitempty"`

	// +kubebuilder:validation:Required
	Engine *string `json:"engine" tf:"engine,omitempty"`

	// +kubebuilder:validation:Optional
	HostReplacePolicy *string `json:"hostReplacePolicy,omitempty" tf:"host_replace_policy,omitempty"`

	// +kubebuilder:validation:Optional
	MemAllocationRatio *float64 `json:"memAllocationRatio,omitempty" tf:"mem_allocation_ratio,omitempty"`

	// +kubebuilder:validation:Optional
	OpenPermission *bool `json:"openPermission,omitempty" tf:"open_permission,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// DedicatedHostGroupSpec defines the desired state of DedicatedHostGroup
type DedicatedHostGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedHostGroupParameters `json:"forProvider"`
}

// DedicatedHostGroupStatus defines the observed state of DedicatedHostGroup.
type DedicatedHostGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedHostGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostGroup is the Schema for the DedicatedHostGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DedicatedHostGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedHostGroupSpec   `json:"spec"`
	Status            DedicatedHostGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostGroupList contains a list of DedicatedHostGroups
type DedicatedHostGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedHostGroup `json:"items"`
}

// Repository type metadata.
var (
	DedicatedHostGroup_Kind             = "DedicatedHostGroup"
	DedicatedHostGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedHostGroup_Kind}.String()
	DedicatedHostGroup_KindAPIVersion   = DedicatedHostGroup_Kind + "." + CRDGroupVersion.String()
	DedicatedHostGroup_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedHostGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedHostGroup{}, &DedicatedHostGroupList{})
}
