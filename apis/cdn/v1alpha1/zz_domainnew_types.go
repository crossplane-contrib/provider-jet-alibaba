/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainNewCertificateConfigObservation struct {
}

type DomainNewCertificateConfigParameters struct {

	// +kubebuilder:validation:Optional
	CertName *string `json:"certName,omitempty" tf:"cert_name,omitempty"`

	// +kubebuilder:validation:Optional
	CertType *string `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// +kubebuilder:validation:Optional
	ForceSet *string `json:"forceSet,omitempty" tf:"force_set,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServerCertificateSecretRef *v1.SecretKeySelector `json:"serverCertificateSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServerCertificateStatus *string `json:"serverCertificateStatus,omitempty" tf:"server_certificate_status,omitempty"`
}

type DomainNewObservation struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DomainNewParameters struct {

	// +kubebuilder:validation:Required
	CdnType *string `json:"cdnType" tf:"cdn_type,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateConfig []DomainNewCertificateConfigParameters `json:"certificateConfig,omitempty" tf:"certificate_config,omitempty"`

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Required
	Sources []SourcesParameters `json:"sources" tf:"sources,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SourcesObservation struct {
}

type SourcesParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// DomainNewSpec defines the desired state of DomainNew
type DomainNewSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainNewParameters `json:"forProvider"`
}

// DomainNewStatus defines the observed state of DomainNew.
type DomainNewStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainNewObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainNew is the Schema for the DomainNews API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DomainNew struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainNewSpec   `json:"spec"`
	Status            DomainNewStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainNewList contains a list of DomainNews
type DomainNewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainNew `json:"items"`
}

// Repository type metadata.
var (
	DomainNew_Kind             = "DomainNew"
	DomainNew_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainNew_Kind}.String()
	DomainNew_KindAPIVersion   = DomainNew_Kind + "." + CRDGroupVersion.String()
	DomainNew_GroupVersionKind = CRDGroupVersion.WithKind(DomainNew_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainNew{}, &DomainNewList{})
}
