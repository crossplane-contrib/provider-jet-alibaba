/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RealTimeLogDeliveryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type RealTimeLogDeliveryParameters struct {

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Required
	Logstore *string `json:"logstore" tf:"logstore,omitempty"`

	// +kubebuilder:validation:Required
	Project *string `json:"project" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	SlsRegion *string `json:"slsRegion" tf:"sls_region,omitempty"`
}

// RealTimeLogDeliverySpec defines the desired state of RealTimeLogDelivery
type RealTimeLogDeliverySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RealTimeLogDeliveryParameters `json:"forProvider"`
}

// RealTimeLogDeliveryStatus defines the observed state of RealTimeLogDelivery.
type RealTimeLogDeliveryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RealTimeLogDeliveryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RealTimeLogDelivery is the Schema for the RealTimeLogDeliverys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type RealTimeLogDelivery struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RealTimeLogDeliverySpec   `json:"spec"`
	Status            RealTimeLogDeliveryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RealTimeLogDeliveryList contains a list of RealTimeLogDeliverys
type RealTimeLogDeliveryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RealTimeLogDelivery `json:"items"`
}

// Repository type metadata.
var (
	RealTimeLogDelivery_Kind             = "RealTimeLogDelivery"
	RealTimeLogDelivery_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RealTimeLogDelivery_Kind}.String()
	RealTimeLogDelivery_KindAPIVersion   = RealTimeLogDelivery_Kind + "." + CRDGroupVersion.String()
	RealTimeLogDelivery_GroupVersionKind = CRDGroupVersion.WithKind(RealTimeLogDelivery_Kind)
)

func init() {
	SchemeBuilder.Register(&RealTimeLogDelivery{}, &RealTimeLogDeliveryList{})
}
