/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthLimitObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BandwidthLimitParameters struct {

	// +kubebuilder:validation:Required
	BandwidthLimit *float64 `json:"bandwidthLimit" tf:"bandwidth_limit,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	RegionIds []*string `json:"regionIds" tf:"region_ids,omitempty"`
}

// BandwidthLimitSpec defines the desired state of BandwidthLimit
type BandwidthLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthLimitParameters `json:"forProvider"`
}

// BandwidthLimitStatus defines the observed state of BandwidthLimit.
type BandwidthLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthLimit is the Schema for the BandwidthLimits API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BandwidthLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BandwidthLimitSpec   `json:"spec"`
	Status            BandwidthLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthLimitList contains a list of BandwidthLimits
type BandwidthLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthLimit `json:"items"`
}

// Repository type metadata.
var (
	BandwidthLimit_Kind             = "BandwidthLimit"
	BandwidthLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthLimit_Kind}.String()
	BandwidthLimit_KindAPIVersion   = BandwidthLimit_Kind + "." + CRDGroupVersion.String()
	BandwidthLimit_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthLimit{}, &BandwidthLimitList{})
}
