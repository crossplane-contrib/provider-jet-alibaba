/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivateZoneObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PrivateZoneParameters struct {

	// +kubebuilder:validation:Required
	AccessRegionID *string `json:"accessRegionId" tf:"access_region_id,omitempty"`

	// +kubebuilder:validation:Required
	CenID *string `json:"cenId" tf:"cen_id,omitempty"`

	// +kubebuilder:validation:Required
	HostRegionID *string `json:"hostRegionId" tf:"host_region_id,omitempty"`

	// +kubebuilder:validation:Required
	HostVPCID *string `json:"hostVpcId" tf:"host_vpc_id,omitempty"`
}

// PrivateZoneSpec defines the desired state of PrivateZone
type PrivateZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateZoneParameters `json:"forProvider"`
}

// PrivateZoneStatus defines the observed state of PrivateZone.
type PrivateZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateZone is the Schema for the PrivateZones API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type PrivateZone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateZoneSpec   `json:"spec"`
	Status            PrivateZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateZoneList contains a list of PrivateZones
type PrivateZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateZone `json:"items"`
}

// Repository type metadata.
var (
	PrivateZone_Kind             = "PrivateZone"
	PrivateZone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateZone_Kind}.String()
	PrivateZone_KindAPIVersion   = PrivateZone_Kind + "." + CRDGroupVersion.String()
	PrivateZone_GroupVersionKind = CRDGroupVersion.WithKind(PrivateZone_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateZone{}, &PrivateZoneList{})
}
