/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteMapObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RouteMapID *string `json:"routeMapId,omitempty" tf:"route_map_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type RouteMapParameters struct {

	// +kubebuilder:validation:Optional
	AsPathMatchMode *string `json:"asPathMatchMode,omitempty" tf:"as_path_match_mode,omitempty"`

	// +kubebuilder:validation:Required
	CenID *string `json:"cenId" tf:"cen_id,omitempty"`

	// +kubebuilder:validation:Required
	CenRegionID *string `json:"cenRegionId" tf:"cen_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	CidrMatchMode *string `json:"cidrMatchMode,omitempty" tf:"cidr_match_mode,omitempty"`

	// +kubebuilder:validation:Optional
	CommunityMatchMode *string `json:"communityMatchMode,omitempty" tf:"community_match_mode,omitempty"`

	// +kubebuilder:validation:Optional
	CommunityOperateMode *string `json:"communityOperateMode,omitempty" tf:"community_operate_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationChildInstanceTypes []*string `json:"destinationChildInstanceTypes,omitempty" tf:"destination_child_instance_types,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationCidrBlocks []*string `json:"destinationCidrBlocks,omitempty" tf:"destination_cidr_blocks,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationInstanceIds []*string `json:"destinationInstanceIds,omitempty" tf:"destination_instance_ids,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationInstanceIdsReverseMatch *bool `json:"destinationInstanceIdsReverseMatch,omitempty" tf:"destination_instance_ids_reverse_match,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationRouteTableIds []*string `json:"destinationRouteTableIds,omitempty" tf:"destination_route_table_ids,omitempty"`

	// +kubebuilder:validation:Required
	MapResult *string `json:"mapResult" tf:"map_result,omitempty"`

	// +kubebuilder:validation:Optional
	MatchAsns []*string `json:"matchAsns,omitempty" tf:"match_asns,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCommunitySet []*string `json:"matchCommunitySet,omitempty" tf:"match_community_set,omitempty"`

	// +kubebuilder:validation:Optional
	NextPriority *float64 `json:"nextPriority,omitempty" tf:"next_priority,omitempty"`

	// +kubebuilder:validation:Optional
	OperateCommunitySet []*string `json:"operateCommunitySet,omitempty" tf:"operate_community_set,omitempty"`

	// +kubebuilder:validation:Optional
	Preference *float64 `json:"preference,omitempty" tf:"preference,omitempty"`

	// +kubebuilder:validation:Optional
	PrependAsPath []*string `json:"prependAsPath,omitempty" tf:"prepend_as_path,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTypes []*string `json:"routeTypes,omitempty" tf:"route_types,omitempty"`

	// +kubebuilder:validation:Optional
	SourceChildInstanceTypes []*string `json:"sourceChildInstanceTypes,omitempty" tf:"source_child_instance_types,omitempty"`

	// +kubebuilder:validation:Optional
	SourceInstanceIds []*string `json:"sourceInstanceIds,omitempty" tf:"source_instance_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SourceInstanceIdsReverseMatch *bool `json:"sourceInstanceIdsReverseMatch,omitempty" tf:"source_instance_ids_reverse_match,omitempty"`

	// +kubebuilder:validation:Optional
	SourceRegionIds []*string `json:"sourceRegionIds,omitempty" tf:"source_region_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SourceRouteTableIds []*string `json:"sourceRouteTableIds,omitempty" tf:"source_route_table_ids,omitempty"`

	// +kubebuilder:validation:Required
	TransmitDirection *string `json:"transmitDirection" tf:"transmit_direction,omitempty"`
}

// RouteMapSpec defines the desired state of RouteMap
type RouteMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteMapParameters `json:"forProvider"`
}

// RouteMapStatus defines the observed state of RouteMap.
type RouteMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteMap is the Schema for the RouteMaps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type RouteMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteMapSpec   `json:"spec"`
	Status            RouteMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteMapList contains a list of RouteMaps
type RouteMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteMap `json:"items"`
}

// Repository type metadata.
var (
	RouteMap_Kind             = "RouteMap"
	RouteMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteMap_Kind}.String()
	RouteMap_KindAPIVersion   = RouteMap_Kind + "." + CRDGroupVersion.String()
	RouteMap_GroupVersionKind = CRDGroupVersion.WithKind(RouteMap_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteMap{}, &RouteMapList{})
}
