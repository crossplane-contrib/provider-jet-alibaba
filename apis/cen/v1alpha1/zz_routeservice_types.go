/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteServiceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type RouteServiceParameters struct {

	// +kubebuilder:validation:Required
	AccessRegionID *string `json:"accessRegionId" tf:"access_region_id,omitempty"`

	// +kubebuilder:validation:Required
	CenID *string `json:"cenId" tf:"cen_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Required
	HostRegionID *string `json:"hostRegionId" tf:"host_region_id,omitempty"`

	// +kubebuilder:validation:Required
	HostVPCID *string `json:"hostVpcId" tf:"host_vpc_id,omitempty"`
}

// RouteServiceSpec defines the desired state of RouteService
type RouteServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteServiceParameters `json:"forProvider"`
}

// RouteServiceStatus defines the observed state of RouteService.
type RouteServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteService is the Schema for the RouteServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type RouteService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteServiceSpec   `json:"spec"`
	Status            RouteServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteServiceList contains a list of RouteServices
type RouteServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteService `json:"items"`
}

// Repository type metadata.
var (
	RouteService_Kind             = "RouteService"
	RouteService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteService_Kind}.String()
	RouteService_KindAPIVersion   = RouteService_Kind + "." + CRDGroupVersion.String()
	RouteService_GroupVersionKind = CRDGroupVersion.WithKind(RouteService_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteService{}, &RouteServiceList{})
}
