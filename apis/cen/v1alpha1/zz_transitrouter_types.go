/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransitRouterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TransitRouterID *string `json:"transitRouterId,omitempty" tf:"transit_router_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TransitRouterParameters struct {

	// +kubebuilder:validation:Required
	CenID *string `json:"cenId" tf:"cen_id,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterDescription *string `json:"transitRouterDescription,omitempty" tf:"transit_router_description,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterName *string `json:"transitRouterName,omitempty" tf:"transit_router_name,omitempty"`
}

// TransitRouterSpec defines the desired state of TransitRouter
type TransitRouterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitRouterParameters `json:"forProvider"`
}

// TransitRouterStatus defines the observed state of TransitRouter.
type TransitRouterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitRouterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransitRouter is the Schema for the TransitRouters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TransitRouter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitRouterSpec   `json:"spec"`
	Status            TransitRouterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitRouterList contains a list of TransitRouters
type TransitRouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitRouter `json:"items"`
}

// Repository type metadata.
var (
	TransitRouter_Kind             = "TransitRouter"
	TransitRouter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitRouter_Kind}.String()
	TransitRouter_KindAPIVersion   = TransitRouter_Kind + "." + CRDGroupVersion.String()
	TransitRouter_GroupVersionKind = CRDGroupVersion.WithKind(TransitRouter_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitRouter{}, &TransitRouterList{})
}
