/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransitRouterRouteEntryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TransitRouterRouteEntryID *string `json:"transitRouterRouteEntryId,omitempty" tf:"transit_router_route_entry_id,omitempty"`
}

type TransitRouterRouteEntryParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterRouteEntryDescription *string `json:"transitRouterRouteEntryDescription,omitempty" tf:"transit_router_route_entry_description,omitempty"`

	// +kubebuilder:validation:Required
	TransitRouterRouteEntryDestinationCidrBlock *string `json:"transitRouterRouteEntryDestinationCidrBlock" tf:"transit_router_route_entry_destination_cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterRouteEntryName *string `json:"transitRouterRouteEntryName,omitempty" tf:"transit_router_route_entry_name,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterRouteEntryNextHopID *string `json:"transitRouterRouteEntryNextHopId,omitempty" tf:"transit_router_route_entry_next_hop_id,omitempty"`

	// +kubebuilder:validation:Required
	TransitRouterRouteEntryNextHopType *string `json:"transitRouterRouteEntryNextHopType" tf:"transit_router_route_entry_next_hop_type,omitempty"`

	// +kubebuilder:validation:Required
	TransitRouterRouteTableID *string `json:"transitRouterRouteTableId" tf:"transit_router_route_table_id,omitempty"`
}

// TransitRouterRouteEntrySpec defines the desired state of TransitRouterRouteEntry
type TransitRouterRouteEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitRouterRouteEntryParameters `json:"forProvider"`
}

// TransitRouterRouteEntryStatus defines the observed state of TransitRouterRouteEntry.
type TransitRouterRouteEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitRouterRouteEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransitRouterRouteEntry is the Schema for the TransitRouterRouteEntrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TransitRouterRouteEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitRouterRouteEntrySpec   `json:"spec"`
	Status            TransitRouterRouteEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitRouterRouteEntryList contains a list of TransitRouterRouteEntrys
type TransitRouterRouteEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitRouterRouteEntry `json:"items"`
}

// Repository type metadata.
var (
	TransitRouterRouteEntry_Kind             = "TransitRouterRouteEntry"
	TransitRouterRouteEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitRouterRouteEntry_Kind}.String()
	TransitRouterRouteEntry_KindAPIVersion   = TransitRouterRouteEntry_Kind + "." + CRDGroupVersion.String()
	TransitRouterRouteEntry_GroupVersionKind = CRDGroupVersion.WithKind(TransitRouterRouteEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitRouterRouteEntry{}, &TransitRouterRouteEntryList{})
}
