/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransitRouterRouteTableObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TransitRouterRouteTableID *string `json:"transitRouterRouteTableId,omitempty" tf:"transit_router_route_table_id,omitempty"`

	TransitRouterRouteTableType *string `json:"transitRouterRouteTableType,omitempty" tf:"transit_router_route_table_type,omitempty"`
}

type TransitRouterRouteTableParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	TransitRouterID *string `json:"transitRouterId" tf:"transit_router_id,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterRouteTableDescription *string `json:"transitRouterRouteTableDescription,omitempty" tf:"transit_router_route_table_description,omitempty"`

	// +kubebuilder:validation:Optional
	TransitRouterRouteTableName *string `json:"transitRouterRouteTableName,omitempty" tf:"transit_router_route_table_name,omitempty"`
}

// TransitRouterRouteTableSpec defines the desired state of TransitRouterRouteTable
type TransitRouterRouteTableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitRouterRouteTableParameters `json:"forProvider"`
}

// TransitRouterRouteTableStatus defines the observed state of TransitRouterRouteTable.
type TransitRouterRouteTableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitRouterRouteTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransitRouterRouteTable is the Schema for the TransitRouterRouteTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TransitRouterRouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitRouterRouteTableSpec   `json:"spec"`
	Status            TransitRouterRouteTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitRouterRouteTableList contains a list of TransitRouterRouteTables
type TransitRouterRouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitRouterRouteTable `json:"items"`
}

// Repository type metadata.
var (
	TransitRouterRouteTable_Kind             = "TransitRouterRouteTable"
	TransitRouterRouteTable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitRouterRouteTable_Kind}.String()
	TransitRouterRouteTable_KindAPIVersion   = TransitRouterRouteTable_Kind + "." + CRDGroupVersion.String()
	TransitRouterRouteTable_GroupVersionKind = CRDGroupVersion.WithKind(TransitRouterRouteTable_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitRouterRouteTable{}, &TransitRouterRouteTableList{})
}
