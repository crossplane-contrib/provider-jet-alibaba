/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VbrHealthCheckObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VbrHealthCheckParameters struct {

	// +kubebuilder:validation:Required
	CenID *string `json:"cenId" tf:"cen_id,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckSourceIP *string `json:"healthCheckSourceIp,omitempty" tf:"health_check_source_ip,omitempty"`

	// +kubebuilder:validation:Required
	HealthCheckTargetIP *string `json:"healthCheckTargetIp" tf:"health_check_target_ip,omitempty"`

	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// +kubebuilder:validation:Required
	VbrInstanceID *string `json:"vbrInstanceId" tf:"vbr_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	VbrInstanceOwnerID *float64 `json:"vbrInstanceOwnerId,omitempty" tf:"vbr_instance_owner_id,omitempty"`

	// +kubebuilder:validation:Required
	VbrInstanceRegionID *string `json:"vbrInstanceRegionId" tf:"vbr_instance_region_id,omitempty"`
}

// VbrHealthCheckSpec defines the desired state of VbrHealthCheck
type VbrHealthCheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VbrHealthCheckParameters `json:"forProvider"`
}

// VbrHealthCheckStatus defines the observed state of VbrHealthCheck.
type VbrHealthCheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VbrHealthCheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VbrHealthCheck is the Schema for the VbrHealthChecks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type VbrHealthCheck struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VbrHealthCheckSpec   `json:"spec"`
	Status            VbrHealthCheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VbrHealthCheckList contains a list of VbrHealthChecks
type VbrHealthCheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VbrHealthCheck `json:"items"`
}

// Repository type metadata.
var (
	VbrHealthCheck_Kind             = "VbrHealthCheck"
	VbrHealthCheck_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VbrHealthCheck_Kind}.String()
	VbrHealthCheck_KindAPIVersion   = VbrHealthCheck_Kind + "." + CRDGroupVersion.String()
	VbrHealthCheck_GroupVersionKind = CRDGroupVersion.WithKind(VbrHealthCheck_Kind)
)

func init() {
	SchemeBuilder.Register(&VbrHealthCheck{}, &VbrHealthCheckList{})
}
