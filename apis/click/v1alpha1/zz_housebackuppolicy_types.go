/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HouseBackupPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type HouseBackupPolicyParameters struct {

	// +kubebuilder:validation:Optional
	BackupRetentionPeriod *float64 `json:"backupRetentionPeriod,omitempty" tf:"backup_retention_period,omitempty"`

	// +kubebuilder:validation:Required
	DBClusterID *string `json:"dbClusterId" tf:"db_cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	PreferredBackupPeriod []*string `json:"preferredBackupPeriod" tf:"preferred_backup_period,omitempty"`

	// +kubebuilder:validation:Required
	PreferredBackupTime *string `json:"preferredBackupTime" tf:"preferred_backup_time,omitempty"`
}

// HouseBackupPolicySpec defines the desired state of HouseBackupPolicy
type HouseBackupPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HouseBackupPolicyParameters `json:"forProvider"`
}

// HouseBackupPolicyStatus defines the observed state of HouseBackupPolicy.
type HouseBackupPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HouseBackupPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HouseBackupPolicy is the Schema for the HouseBackupPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type HouseBackupPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HouseBackupPolicySpec   `json:"spec"`
	Status            HouseBackupPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HouseBackupPolicyList contains a list of HouseBackupPolicys
type HouseBackupPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HouseBackupPolicy `json:"items"`
}

// Repository type metadata.
var (
	HouseBackupPolicy_Kind             = "HouseBackupPolicy"
	HouseBackupPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HouseBackupPolicy_Kind}.String()
	HouseBackupPolicy_KindAPIVersion   = HouseBackupPolicy_Kind + "." + CRDGroupVersion.String()
	HouseBackupPolicy_GroupVersionKind = CRDGroupVersion.WithKind(HouseBackupPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&HouseBackupPolicy{}, &HouseBackupPolicyList{})
}
