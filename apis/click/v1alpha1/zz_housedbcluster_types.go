/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DBClusterAccessWhiteListObservation struct {
}

type DBClusterAccessWhiteListParameters struct {

	// +kubebuilder:validation:Optional
	DBClusterIPArrayAttribute *string `json:"dbClusterIpArrayAttribute,omitempty" tf:"db_cluster_ip_array_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	DBClusterIPArrayName *string `json:"dbClusterIpArrayName,omitempty" tf:"db_cluster_ip_array_name,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPList *string `json:"securityIpList,omitempty" tf:"security_ip_list,omitempty"`
}

type HouseDBClusterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HouseDBClusterParameters struct {

	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	DBClusterAccessWhiteList []DBClusterAccessWhiteListParameters `json:"dbClusterAccessWhiteList,omitempty" tf:"db_cluster_access_white_list,omitempty"`

	// +kubebuilder:validation:Required
	DBClusterClass *string `json:"dbClusterClass" tf:"db_cluster_class,omitempty"`

	// +kubebuilder:validation:Optional
	DBClusterDescription *string `json:"dbClusterDescription,omitempty" tf:"db_cluster_description,omitempty"`

	// +kubebuilder:validation:Required
	DBClusterNetworkType *string `json:"dbClusterNetworkType" tf:"db_cluster_network_type,omitempty"`

	// +kubebuilder:validation:Required
	DBClusterVersion *string `json:"dbClusterVersion" tf:"db_cluster_version,omitempty"`

	// +kubebuilder:validation:Required
	DBNodeGroupCount *float64 `json:"dbNodeGroupCount" tf:"db_node_group_count,omitempty"`

	// +kubebuilder:validation:Required
	DBNodeStorage *string `json:"dbNodeStorage" tf:"db_node_storage,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainTime *string `json:"maintainTime,omitempty" tf:"maintain_time,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	StorageType *string `json:"storageType" tf:"storage_type,omitempty"`

	// +kubebuilder:validation:Optional
	UsedTime *string `json:"usedTime,omitempty" tf:"used_time,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`
}

// HouseDBClusterSpec defines the desired state of HouseDBCluster
type HouseDBClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HouseDBClusterParameters `json:"forProvider"`
}

// HouseDBClusterStatus defines the observed state of HouseDBCluster.
type HouseDBClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HouseDBClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HouseDBCluster is the Schema for the HouseDBClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type HouseDBCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HouseDBClusterSpec   `json:"spec"`
	Status            HouseDBClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HouseDBClusterList contains a list of HouseDBClusters
type HouseDBClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HouseDBCluster `json:"items"`
}

// Repository type metadata.
var (
	HouseDBCluster_Kind             = "HouseDBCluster"
	HouseDBCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HouseDBCluster_Kind}.String()
	HouseDBCluster_KindAPIVersion   = HouseDBCluster_Kind + "." + CRDGroupVersion.String()
	HouseDBCluster_GroupVersionKind = CRDGroupVersion.WithKind(HouseDBCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&HouseDBCluster{}, &HouseDBClusterList{})
}
