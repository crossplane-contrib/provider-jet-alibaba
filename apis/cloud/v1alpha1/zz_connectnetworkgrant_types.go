/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectNetworkGrantObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConnectNetworkGrantParameters struct {

	// +kubebuilder:validation:Required
	CcnID *string `json:"ccnId" tf:"ccn_id,omitempty"`

	// +kubebuilder:validation:Required
	CenID *string `json:"cenId" tf:"cen_id,omitempty"`

	// +kubebuilder:validation:Required
	CenUID *string `json:"cenUid" tf:"cen_uid,omitempty"`
}

// ConnectNetworkGrantSpec defines the desired state of ConnectNetworkGrant
type ConnectNetworkGrantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectNetworkGrantParameters `json:"forProvider"`
}

// ConnectNetworkGrantStatus defines the observed state of ConnectNetworkGrant.
type ConnectNetworkGrantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectNetworkGrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectNetworkGrant is the Schema for the ConnectNetworkGrants API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ConnectNetworkGrant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectNetworkGrantSpec   `json:"spec"`
	Status            ConnectNetworkGrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectNetworkGrantList contains a list of ConnectNetworkGrants
type ConnectNetworkGrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectNetworkGrant `json:"items"`
}

// Repository type metadata.
var (
	ConnectNetworkGrant_Kind             = "ConnectNetworkGrant"
	ConnectNetworkGrant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectNetworkGrant_Kind}.String()
	ConnectNetworkGrant_KindAPIVersion   = ConnectNetworkGrant_Kind + "." + CRDGroupVersion.String()
	ConnectNetworkGrant_GroupVersionKind = CRDGroupVersion.WithKind(ConnectNetworkGrant_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectNetworkGrant{}, &ConnectNetworkGrantList{})
}
