/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallInstanceObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ReleaseTime *string `json:"releaseTime,omitempty" tf:"release_time,omitempty"`

	RenewalDurationUnit *string `json:"renewalDurationUnit,omitempty" tf:"renewal_duration_unit,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type FirewallInstanceParameters struct {

	// +kubebuilder:validation:Required
	BandWidth *float64 `json:"bandWidth" tf:"band_width,omitempty"`

	// +kubebuilder:validation:Required
	CfwLog *bool `json:"cfwLog" tf:"cfw_log,omitempty"`

	// +kubebuilder:validation:Required
	CfwLogStorage *float64 `json:"cfwLogStorage" tf:"cfw_log_storage,omitempty"`

	// +kubebuilder:validation:Required
	CfwService *bool `json:"cfwService" tf:"cfw_service,omitempty"`

	// +kubebuilder:validation:Optional
	FwVPCNumber *float64 `json:"fwVpcNumber,omitempty" tf:"fw_vpc_number,omitempty"`

	// +kubebuilder:validation:Required
	IPNumber *float64 `json:"ipNumber" tf:"ip_number,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// +kubebuilder:validation:Optional
	Logistics *string `json:"logistics,omitempty" tf:"logistics,omitempty"`

	// +kubebuilder:validation:Optional
	ModifyType *string `json:"modifyType,omitempty" tf:"modify_type,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Required
	Period *float64 `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	RenewPeriod *float64 `json:"renewPeriod,omitempty" tf:"renew_period,omitempty"`

	// +kubebuilder:validation:Optional
	RenewalStatus *string `json:"renewalStatus,omitempty" tf:"renewal_status,omitempty"`

	// +kubebuilder:validation:Required
	Spec *string `json:"spec" tf:"spec,omitempty"`
}

// FirewallInstanceSpec defines the desired state of FirewallInstance
type FirewallInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallInstanceParameters `json:"forProvider"`
}

// FirewallInstanceStatus defines the observed state of FirewallInstance.
type FirewallInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallInstance is the Schema for the FirewallInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type FirewallInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallInstanceSpec   `json:"spec"`
	Status            FirewallInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallInstanceList contains a list of FirewallInstances
type FirewallInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallInstance `json:"items"`
}

// Repository type metadata.
var (
	FirewallInstance_Kind             = "FirewallInstance"
	FirewallInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallInstance_Kind}.String()
	FirewallInstance_KindAPIVersion   = FirewallInstance_Kind + "." + CRDGroupVersion.String()
	FirewallInstance_GroupVersionKind = CRDGroupVersion.WithKind(FirewallInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallInstance{}, &FirewallInstanceList{})
}
