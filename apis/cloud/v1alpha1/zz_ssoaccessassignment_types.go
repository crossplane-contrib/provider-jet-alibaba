/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SsoAccessAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SsoAccessAssignmentParameters struct {

	// +kubebuilder:validation:Required
	AccessConfigurationID *string `json:"accessConfigurationId" tf:"access_configuration_id,omitempty"`

	// +kubebuilder:validation:Optional
	DeprovisionStrategy *string `json:"deprovisionStrategy,omitempty" tf:"deprovision_strategy,omitempty"`

	// +kubebuilder:validation:Required
	DirectoryID *string `json:"directoryId" tf:"directory_id,omitempty"`

	// +kubebuilder:validation:Required
	PrincipalID *string `json:"principalId" tf:"principal_id,omitempty"`

	// +kubebuilder:validation:Required
	PrincipalType *string `json:"principalType" tf:"principal_type,omitempty"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

// SsoAccessAssignmentSpec defines the desired state of SsoAccessAssignment
type SsoAccessAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoAccessAssignmentParameters `json:"forProvider"`
}

// SsoAccessAssignmentStatus defines the observed state of SsoAccessAssignment.
type SsoAccessAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoAccessAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsoAccessAssignment is the Schema for the SsoAccessAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SsoAccessAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsoAccessAssignmentSpec   `json:"spec"`
	Status            SsoAccessAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoAccessAssignmentList contains a list of SsoAccessAssignments
type SsoAccessAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsoAccessAssignment `json:"items"`
}

// Repository type metadata.
var (
	SsoAccessAssignment_Kind             = "SsoAccessAssignment"
	SsoAccessAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SsoAccessAssignment_Kind}.String()
	SsoAccessAssignment_KindAPIVersion   = SsoAccessAssignment_Kind + "." + CRDGroupVersion.String()
	SsoAccessAssignment_GroupVersionKind = CRDGroupVersion.WithKind(SsoAccessAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&SsoAccessAssignment{}, &SsoAccessAssignmentList{})
}
