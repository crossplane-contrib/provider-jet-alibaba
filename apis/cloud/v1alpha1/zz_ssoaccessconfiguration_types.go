/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionPoliciesObservation struct {
}

type PermissionPoliciesParameters struct {

	// +kubebuilder:validation:Optional
	PermissionPolicyDocumentSecretRef *v1.SecretKeySelector `json:"permissionPolicyDocumentSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	PermissionPolicyName *string `json:"permissionPolicyName" tf:"permission_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	PermissionPolicyType *string `json:"permissionPolicyType" tf:"permission_policy_type,omitempty"`
}

type SsoAccessConfigurationObservation struct {
	AccessConfigurationID *string `json:"accessConfigurationId,omitempty" tf:"access_configuration_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SsoAccessConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AccessConfigurationName *string `json:"accessConfigurationName" tf:"access_configuration_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DirectoryID *string `json:"directoryId" tf:"directory_id,omitempty"`

	// +kubebuilder:validation:Optional
	ForceRemovePermissionPolicies *bool `json:"forceRemovePermissionPolicies,omitempty" tf:"force_remove_permission_policies,omitempty"`

	// +kubebuilder:validation:Optional
	PermissionPolicies []PermissionPoliciesParameters `json:"permissionPolicies,omitempty" tf:"permission_policies,omitempty"`

	// +kubebuilder:validation:Optional
	RelayState *string `json:"relayState,omitempty" tf:"relay_state,omitempty"`

	// +kubebuilder:validation:Optional
	SessionDuration *float64 `json:"sessionDuration,omitempty" tf:"session_duration,omitempty"`
}

// SsoAccessConfigurationSpec defines the desired state of SsoAccessConfiguration
type SsoAccessConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoAccessConfigurationParameters `json:"forProvider"`
}

// SsoAccessConfigurationStatus defines the observed state of SsoAccessConfiguration.
type SsoAccessConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoAccessConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsoAccessConfiguration is the Schema for the SsoAccessConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SsoAccessConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsoAccessConfigurationSpec   `json:"spec"`
	Status            SsoAccessConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoAccessConfigurationList contains a list of SsoAccessConfigurations
type SsoAccessConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsoAccessConfiguration `json:"items"`
}

// Repository type metadata.
var (
	SsoAccessConfiguration_Kind             = "SsoAccessConfiguration"
	SsoAccessConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SsoAccessConfiguration_Kind}.String()
	SsoAccessConfiguration_KindAPIVersion   = SsoAccessConfiguration_Kind + "." + CRDGroupVersion.String()
	SsoAccessConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(SsoAccessConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&SsoAccessConfiguration{}, &SsoAccessConfigurationList{})
}
