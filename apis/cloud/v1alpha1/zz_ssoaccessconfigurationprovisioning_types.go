/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SsoAccessConfigurationProvisioningObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SsoAccessConfigurationProvisioningParameters struct {

	// +kubebuilder:validation:Required
	AccessConfigurationID *string `json:"accessConfigurationId" tf:"access_configuration_id,omitempty"`

	// +kubebuilder:validation:Required
	DirectoryID *string `json:"directoryId" tf:"directory_id,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

// SsoAccessConfigurationProvisioningSpec defines the desired state of SsoAccessConfigurationProvisioning
type SsoAccessConfigurationProvisioningSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoAccessConfigurationProvisioningParameters `json:"forProvider"`
}

// SsoAccessConfigurationProvisioningStatus defines the observed state of SsoAccessConfigurationProvisioning.
type SsoAccessConfigurationProvisioningStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoAccessConfigurationProvisioningObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsoAccessConfigurationProvisioning is the Schema for the SsoAccessConfigurationProvisionings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SsoAccessConfigurationProvisioning struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsoAccessConfigurationProvisioningSpec   `json:"spec"`
	Status            SsoAccessConfigurationProvisioningStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoAccessConfigurationProvisioningList contains a list of SsoAccessConfigurationProvisionings
type SsoAccessConfigurationProvisioningList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsoAccessConfigurationProvisioning `json:"items"`
}

// Repository type metadata.
var (
	SsoAccessConfigurationProvisioning_Kind             = "SsoAccessConfigurationProvisioning"
	SsoAccessConfigurationProvisioning_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SsoAccessConfigurationProvisioning_Kind}.String()
	SsoAccessConfigurationProvisioning_KindAPIVersion   = SsoAccessConfigurationProvisioning_Kind + "." + CRDGroupVersion.String()
	SsoAccessConfigurationProvisioning_GroupVersionKind = CRDGroupVersion.WithKind(SsoAccessConfigurationProvisioning_Kind)
)

func init() {
	SchemeBuilder.Register(&SsoAccessConfigurationProvisioning{}, &SsoAccessConfigurationProvisioningList{})
}
