/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SsoUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type SsoUserParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DirectoryID *string `json:"directoryId" tf:"directory_id,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	UserName *string `json:"userName" tf:"user_name,omitempty"`
}

// SsoUserSpec defines the desired state of SsoUser
type SsoUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SsoUserParameters `json:"forProvider"`
}

// SsoUserStatus defines the observed state of SsoUser.
type SsoUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SsoUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsoUser is the Schema for the SsoUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SsoUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsoUserSpec   `json:"spec"`
	Status            SsoUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsoUserList contains a list of SsoUsers
type SsoUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsoUser `json:"items"`
}

// Repository type metadata.
var (
	SsoUser_Kind             = "SsoUser"
	SsoUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SsoUser_Kind}.String()
	SsoUser_KindAPIVersion   = SsoUser_Kind + "." + CRDGroupVersion.String()
	SsoUser_GroupVersionKind = CRDGroupVersion.WithKind(SsoUser_Kind)
)

func init() {
	SchemeBuilder.Register(&SsoUser{}, &SsoUserList{})
}
