/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageGatewayGatewayBlockVolumeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IndexID *string `json:"indexId,omitempty" tf:"index_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StorageGatewayGatewayBlockVolumeParameters struct {

	// +kubebuilder:validation:Optional
	CacheMode *string `json:"cacheMode,omitempty" tf:"cache_mode,omitempty"`

	// +kubebuilder:validation:Optional
	ChapEnabled *bool `json:"chapEnabled,omitempty" tf:"chap_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ChapInPassword *string `json:"chapInPassword,omitempty" tf:"chap_in_password,omitempty"`

	// +kubebuilder:validation:Optional
	ChapInUser *string `json:"chapInUser,omitempty" tf:"chap_in_user,omitempty"`

	// +kubebuilder:validation:Optional
	ChunkSize *float64 `json:"chunkSize,omitempty" tf:"chunk_size,omitempty"`

	// +kubebuilder:validation:Required
	GatewayBlockVolumeName *string `json:"gatewayBlockVolumeName" tf:"gateway_block_volume_name,omitempty"`

	// +kubebuilder:validation:Required
	GatewayID *string `json:"gatewayId" tf:"gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	IsSourceDeletion *bool `json:"isSourceDeletion,omitempty" tf:"is_source_deletion,omitempty"`

	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// +kubebuilder:validation:Required
	OssBucketName *string `json:"ossBucketName" tf:"oss_bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	OssBucketSSL *bool `json:"ossBucketSsl,omitempty" tf:"oss_bucket_ssl,omitempty"`

	// +kubebuilder:validation:Required
	OssEndpoint *string `json:"ossEndpoint" tf:"oss_endpoint,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Recovery *bool `json:"recovery,omitempty" tf:"recovery,omitempty"`

	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

// StorageGatewayGatewayBlockVolumeSpec defines the desired state of StorageGatewayGatewayBlockVolume
type StorageGatewayGatewayBlockVolumeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageGatewayGatewayBlockVolumeParameters `json:"forProvider"`
}

// StorageGatewayGatewayBlockVolumeStatus defines the observed state of StorageGatewayGatewayBlockVolume.
type StorageGatewayGatewayBlockVolumeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageGatewayGatewayBlockVolumeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayGatewayBlockVolume is the Schema for the StorageGatewayGatewayBlockVolumes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StorageGatewayGatewayBlockVolume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageGatewayGatewayBlockVolumeSpec   `json:"spec"`
	Status            StorageGatewayGatewayBlockVolumeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayGatewayBlockVolumeList contains a list of StorageGatewayGatewayBlockVolumes
type StorageGatewayGatewayBlockVolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageGatewayGatewayBlockVolume `json:"items"`
}

// Repository type metadata.
var (
	StorageGatewayGatewayBlockVolume_Kind             = "StorageGatewayGatewayBlockVolume"
	StorageGatewayGatewayBlockVolume_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageGatewayGatewayBlockVolume_Kind}.String()
	StorageGatewayGatewayBlockVolume_KindAPIVersion   = StorageGatewayGatewayBlockVolume_Kind + "." + CRDGroupVersion.String()
	StorageGatewayGatewayBlockVolume_GroupVersionKind = CRDGroupVersion.WithKind(StorageGatewayGatewayBlockVolume_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageGatewayGatewayBlockVolume{}, &StorageGatewayGatewayBlockVolumeList{})
}
