/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageGatewayGatewayCacheDiskObservation struct {
	CacheID *string `json:"cacheId,omitempty" tf:"cache_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LocalFilePath *string `json:"localFilePath,omitempty" tf:"local_file_path,omitempty"`

	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type StorageGatewayGatewayCacheDiskParameters struct {

	// +kubebuilder:validation:Optional
	CacheDiskCategory *string `json:"cacheDiskCategory,omitempty" tf:"cache_disk_category,omitempty"`

	// +kubebuilder:validation:Required
	CacheDiskSizeInGb *float64 `json:"cacheDiskSizeInGb" tf:"cache_disk_size_in_gb,omitempty"`

	// +kubebuilder:validation:Required
	GatewayID *string `json:"gatewayId" tf:"gateway_id,omitempty"`
}

// StorageGatewayGatewayCacheDiskSpec defines the desired state of StorageGatewayGatewayCacheDisk
type StorageGatewayGatewayCacheDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageGatewayGatewayCacheDiskParameters `json:"forProvider"`
}

// StorageGatewayGatewayCacheDiskStatus defines the observed state of StorageGatewayGatewayCacheDisk.
type StorageGatewayGatewayCacheDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageGatewayGatewayCacheDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayGatewayCacheDisk is the Schema for the StorageGatewayGatewayCacheDisks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StorageGatewayGatewayCacheDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageGatewayGatewayCacheDiskSpec   `json:"spec"`
	Status            StorageGatewayGatewayCacheDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayGatewayCacheDiskList contains a list of StorageGatewayGatewayCacheDisks
type StorageGatewayGatewayCacheDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageGatewayGatewayCacheDisk `json:"items"`
}

// Repository type metadata.
var (
	StorageGatewayGatewayCacheDisk_Kind             = "StorageGatewayGatewayCacheDisk"
	StorageGatewayGatewayCacheDisk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageGatewayGatewayCacheDisk_Kind}.String()
	StorageGatewayGatewayCacheDisk_KindAPIVersion   = StorageGatewayGatewayCacheDisk_Kind + "." + CRDGroupVersion.String()
	StorageGatewayGatewayCacheDisk_GroupVersionKind = CRDGroupVersion.WithKind(StorageGatewayGatewayCacheDisk_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageGatewayGatewayCacheDisk{}, &StorageGatewayGatewayCacheDiskList{})
}
