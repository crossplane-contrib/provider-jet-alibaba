/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageGatewayGatewayLoggingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StorageGatewayGatewayLoggingParameters struct {

	// +kubebuilder:validation:Required
	GatewayID *string `json:"gatewayId" tf:"gateway_id,omitempty"`

	// +kubebuilder:validation:Required
	SlsLogstore *string `json:"slsLogstore" tf:"sls_logstore,omitempty"`

	// +kubebuilder:validation:Required
	SlsProject *string `json:"slsProject" tf:"sls_project,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// StorageGatewayGatewayLoggingSpec defines the desired state of StorageGatewayGatewayLogging
type StorageGatewayGatewayLoggingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageGatewayGatewayLoggingParameters `json:"forProvider"`
}

// StorageGatewayGatewayLoggingStatus defines the observed state of StorageGatewayGatewayLogging.
type StorageGatewayGatewayLoggingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageGatewayGatewayLoggingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayGatewayLogging is the Schema for the StorageGatewayGatewayLoggings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StorageGatewayGatewayLogging struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageGatewayGatewayLoggingSpec   `json:"spec"`
	Status            StorageGatewayGatewayLoggingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayGatewayLoggingList contains a list of StorageGatewayGatewayLoggings
type StorageGatewayGatewayLoggingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageGatewayGatewayLogging `json:"items"`
}

// Repository type metadata.
var (
	StorageGatewayGatewayLogging_Kind             = "StorageGatewayGatewayLogging"
	StorageGatewayGatewayLogging_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageGatewayGatewayLogging_Kind}.String()
	StorageGatewayGatewayLogging_KindAPIVersion   = StorageGatewayGatewayLogging_Kind + "." + CRDGroupVersion.String()
	StorageGatewayGatewayLogging_GroupVersionKind = CRDGroupVersion.WithKind(StorageGatewayGatewayLogging_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageGatewayGatewayLogging{}, &StorageGatewayGatewayLoggingList{})
}
