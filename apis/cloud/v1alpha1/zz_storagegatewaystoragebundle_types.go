/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageGatewayStorageBundleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StorageGatewayStorageBundleParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	StorageBundleName *string `json:"storageBundleName" tf:"storage_bundle_name,omitempty"`
}

// StorageGatewayStorageBundleSpec defines the desired state of StorageGatewayStorageBundle
type StorageGatewayStorageBundleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageGatewayStorageBundleParameters `json:"forProvider"`
}

// StorageGatewayStorageBundleStatus defines the observed state of StorageGatewayStorageBundle.
type StorageGatewayStorageBundleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageGatewayStorageBundleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayStorageBundle is the Schema for the StorageGatewayStorageBundles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StorageGatewayStorageBundle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageGatewayStorageBundleSpec   `json:"spec"`
	Status            StorageGatewayStorageBundleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageGatewayStorageBundleList contains a list of StorageGatewayStorageBundles
type StorageGatewayStorageBundleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageGatewayStorageBundle `json:"items"`
}

// Repository type metadata.
var (
	StorageGatewayStorageBundle_Kind             = "StorageGatewayStorageBundle"
	StorageGatewayStorageBundle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageGatewayStorageBundle_Kind}.String()
	StorageGatewayStorageBundle_KindAPIVersion   = StorageGatewayStorageBundle_Kind + "." + CRDGroupVersion.String()
	StorageGatewayStorageBundle_GroupVersionKind = CRDGroupVersion.WithKind(StorageGatewayStorageBundle_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageGatewayStorageBundle{}, &StorageGatewayStorageBundleList{})
}
