/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FaceConfigObservation struct {
	GmtModified *string `json:"gmtModified,omitempty" tf:"gmt_modified,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FaceConfigParameters struct {

	// +kubebuilder:validation:Required
	BizName *string `json:"bizName" tf:"biz_name,omitempty"`

	// +kubebuilder:validation:Required
	BizType *string `json:"bizType" tf:"biz_type,omitempty"`
}

// FaceConfigSpec defines the desired state of FaceConfig
type FaceConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FaceConfigParameters `json:"forProvider"`
}

// FaceConfigStatus defines the observed state of FaceConfig.
type FaceConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FaceConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FaceConfig is the Schema for the FaceConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type FaceConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FaceConfigSpec   `json:"spec"`
	Status            FaceConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FaceConfigList contains a list of FaceConfigs
type FaceConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FaceConfig `json:"items"`
}

// Repository type metadata.
var (
	FaceConfig_Kind             = "FaceConfig"
	FaceConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FaceConfig_Kind}.String()
	FaceConfig_KindAPIVersion   = FaceConfig_Kind + "." + CRDGroupVersion.String()
	FaceConfig_GroupVersionKind = CRDGroupVersion.WithKind(FaceConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&FaceConfig{}, &FaceConfigList{})
}
