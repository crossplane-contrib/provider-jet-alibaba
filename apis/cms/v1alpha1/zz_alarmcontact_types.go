/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmContactObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AlarmContactParameters struct {

	// +kubebuilder:validation:Required
	AlarmContactName *string `json:"alarmContactName" tf:"alarm_contact_name,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelsAliim *string `json:"channelsAliim,omitempty" tf:"channels_aliim,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelsDingWebHook *string `json:"channelsDingWebHook,omitempty" tf:"channels_ding_web_hook,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelsMail *string `json:"channelsMail,omitempty" tf:"channels_mail,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelsSMS *string `json:"channelsSms,omitempty" tf:"channels_sms,omitempty"`

	// +kubebuilder:validation:Required
	Describe *string `json:"describe" tf:"describe,omitempty"`

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`
}

// AlarmContactSpec defines the desired state of AlarmContact
type AlarmContactSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmContactParameters `json:"forProvider"`
}

// AlarmContactStatus defines the observed state of AlarmContact.
type AlarmContactStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmContactObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmContact is the Schema for the AlarmContacts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AlarmContact struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmContactSpec   `json:"spec"`
	Status            AlarmContactStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmContactList contains a list of AlarmContacts
type AlarmContactList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlarmContact `json:"items"`
}

// Repository type metadata.
var (
	AlarmContact_Kind             = "AlarmContact"
	AlarmContact_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlarmContact_Kind}.String()
	AlarmContact_KindAPIVersion   = AlarmContact_Kind + "." + CRDGroupVersion.String()
	AlarmContact_GroupVersionKind = CRDGroupVersion.WithKind(AlarmContact_Kind)
)

func init() {
	SchemeBuilder.Register(&AlarmContact{}, &AlarmContactList{})
}
