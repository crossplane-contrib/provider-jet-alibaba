/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CriticalObservation struct {
}

type CriticalParameters struct {

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Times *float64 `json:"times,omitempty" tf:"times,omitempty"`
}

type EscalationsObservation struct {
}

type EscalationsParameters struct {

	// +kubebuilder:validation:Optional
	Critical []CriticalParameters `json:"critical,omitempty" tf:"critical,omitempty"`

	// +kubebuilder:validation:Optional
	Info []InfoParameters `json:"info,omitempty" tf:"info,omitempty"`

	// +kubebuilder:validation:Optional
	Warn []WarnParameters `json:"warn,omitempty" tf:"warn,omitempty"`
}

type GroupMetricRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type GroupMetricRuleParameters struct {

	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	ContactGroups *string `json:"contactGroups,omitempty" tf:"contact_groups,omitempty"`

	// +kubebuilder:validation:Optional
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveInterval *string `json:"effectiveInterval,omitempty" tf:"effective_interval,omitempty"`

	// +kubebuilder:validation:Optional
	EmailSubject *string `json:"emailSubject,omitempty" tf:"email_subject,omitempty"`

	// +kubebuilder:validation:Required
	Escalations []EscalationsParameters `json:"escalations" tf:"escalations,omitempty"`

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	GroupMetricRuleName *string `json:"groupMetricRuleName" tf:"group_metric_rule_name,omitempty"`

	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	NoEffectiveInterval *string `json:"noEffectiveInterval,omitempty" tf:"no_effective_interval,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	RuleID *string `json:"ruleId" tf:"rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	SilenceTime *float64 `json:"silenceTime,omitempty" tf:"silence_time,omitempty"`

	// +kubebuilder:validation:Optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook,omitempty"`
}

type InfoObservation struct {
}

type InfoParameters struct {

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Times *float64 `json:"times,omitempty" tf:"times,omitempty"`
}

type WarnObservation struct {
}

type WarnParameters struct {

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Times *float64 `json:"times,omitempty" tf:"times,omitempty"`
}

// GroupMetricRuleSpec defines the desired state of GroupMetricRule
type GroupMetricRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMetricRuleParameters `json:"forProvider"`
}

// GroupMetricRuleStatus defines the observed state of GroupMetricRule.
type GroupMetricRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMetricRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMetricRule is the Schema for the GroupMetricRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type GroupMetricRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupMetricRuleSpec   `json:"spec"`
	Status            GroupMetricRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMetricRuleList contains a list of GroupMetricRules
type GroupMetricRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMetricRule `json:"items"`
}

// Repository type metadata.
var (
	GroupMetricRule_Kind             = "GroupMetricRule"
	GroupMetricRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMetricRule_Kind}.String()
	GroupMetricRule_KindAPIVersion   = GroupMetricRule_Kind + "." + CRDGroupVersion.String()
	GroupMetricRule_GroupVersionKind = CRDGroupVersion.WithKind(GroupMetricRule_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMetricRule{}, &GroupMetricRuleList{})
}
