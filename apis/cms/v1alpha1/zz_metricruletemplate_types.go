/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertTemplatesEscalationsCriticalObservation struct {
}

type AlertTemplatesEscalationsCriticalParameters struct {

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Times *string `json:"times,omitempty" tf:"times,omitempty"`
}

type AlertTemplatesEscalationsInfoObservation struct {
}

type AlertTemplatesEscalationsInfoParameters struct {

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Times *string `json:"times,omitempty" tf:"times,omitempty"`
}

type AlertTemplatesEscalationsObservation struct {
}

type AlertTemplatesEscalationsParameters struct {

	// +kubebuilder:validation:Optional
	Critical []AlertTemplatesEscalationsCriticalParameters `json:"critical,omitempty" tf:"critical,omitempty"`

	// +kubebuilder:validation:Optional
	Info []AlertTemplatesEscalationsInfoParameters `json:"info,omitempty" tf:"info,omitempty"`

	// +kubebuilder:validation:Optional
	Warn []AlertTemplatesEscalationsWarnParameters `json:"warn,omitempty" tf:"warn,omitempty"`
}

type AlertTemplatesEscalationsWarnObservation struct {
}

type AlertTemplatesEscalationsWarnParameters struct {

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	Times *string `json:"times,omitempty" tf:"times,omitempty"`
}

type AlertTemplatesObservation struct {
}

type AlertTemplatesParameters struct {

	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	Escalations []AlertTemplatesEscalationsParameters `json:"escalations,omitempty" tf:"escalations,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Required
	RuleName *string `json:"ruleName" tf:"rule_name,omitempty"`

	// +kubebuilder:validation:Optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook,omitempty"`
}

type MetricRuleTemplateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RestVersion *string `json:"restVersion,omitempty" tf:"rest_version,omitempty"`
}

type MetricRuleTemplateParameters struct {

	// +kubebuilder:validation:Optional
	AlertTemplates []AlertTemplatesParameters `json:"alertTemplates,omitempty" tf:"alert_templates,omitempty"`

	// +kubebuilder:validation:Optional
	ApplyMode *string `json:"applyMode,omitempty" tf:"apply_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnableEndTime *string `json:"enableEndTime,omitempty" tf:"enable_end_time,omitempty"`

	// +kubebuilder:validation:Optional
	EnableStartTime *string `json:"enableStartTime,omitempty" tf:"enable_start_time,omitempty"`

	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	MetricRuleTemplateName *string `json:"metricRuleTemplateName" tf:"metric_rule_template_name,omitempty"`

	// +kubebuilder:validation:Optional
	NotifyLevel *string `json:"notifyLevel,omitempty" tf:"notify_level,omitempty"`

	// +kubebuilder:validation:Optional
	SilenceTime *float64 `json:"silenceTime,omitempty" tf:"silence_time,omitempty"`

	// +kubebuilder:validation:Optional
	Webhook *string `json:"webhook,omitempty" tf:"webhook,omitempty"`
}

// MetricRuleTemplateSpec defines the desired state of MetricRuleTemplate
type MetricRuleTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetricRuleTemplateParameters `json:"forProvider"`
}

// MetricRuleTemplateStatus defines the observed state of MetricRuleTemplate.
type MetricRuleTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetricRuleTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MetricRuleTemplate is the Schema for the MetricRuleTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MetricRuleTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetricRuleTemplateSpec   `json:"spec"`
	Status            MetricRuleTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetricRuleTemplateList contains a list of MetricRuleTemplates
type MetricRuleTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetricRuleTemplate `json:"items"`
}

// Repository type metadata.
var (
	MetricRuleTemplate_Kind             = "MetricRuleTemplate"
	MetricRuleTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MetricRuleTemplate_Kind}.String()
	MetricRuleTemplate_KindAPIVersion   = MetricRuleTemplate_Kind + "." + CRDGroupVersion.String()
	MetricRuleTemplate_GroupVersionKind = CRDGroupVersion.WithKind(MetricRuleTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&MetricRuleTemplate{}, &MetricRuleTemplateList{})
}
