/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstancesObservation struct {
}

type InstancesParameters struct {

	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	InstanceName *string `json:"instanceName" tf:"instance_name,omitempty"`

	// +kubebuilder:validation:Required
	RegionID *string `json:"regionId" tf:"region_id,omitempty"`
}

type MonitorGroupInstancesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MonitorGroupInstancesParameters struct {

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	Instances []InstancesParameters `json:"instances" tf:"instances,omitempty"`
}

// MonitorGroupInstancesSpec defines the desired state of MonitorGroupInstances
type MonitorGroupInstancesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorGroupInstancesParameters `json:"forProvider"`
}

// MonitorGroupInstancesStatus defines the observed state of MonitorGroupInstances.
type MonitorGroupInstancesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorGroupInstancesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorGroupInstances is the Schema for the MonitorGroupInstancess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MonitorGroupInstances struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorGroupInstancesSpec   `json:"spec"`
	Status            MonitorGroupInstancesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorGroupInstancesList contains a list of MonitorGroupInstancess
type MonitorGroupInstancesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorGroupInstances `json:"items"`
}

// Repository type metadata.
var (
	MonitorGroupInstances_Kind             = "MonitorGroupInstances"
	MonitorGroupInstances_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorGroupInstances_Kind}.String()
	MonitorGroupInstances_KindAPIVersion   = MonitorGroupInstances_Kind + "." + CRDGroupVersion.String()
	MonitorGroupInstances_GroupVersionKind = CRDGroupVersion.WithKind(MonitorGroupInstances_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorGroupInstances{}, &MonitorGroupInstancesList{})
}
