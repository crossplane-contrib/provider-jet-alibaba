/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IspCitiesObservation struct {
}

type IspCitiesParameters struct {

	// +kubebuilder:validation:Required
	City *string `json:"city" tf:"city,omitempty"`

	// +kubebuilder:validation:Required
	Isp *string `json:"isp" tf:"isp,omitempty"`
}

type SiteMonitorObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TaskState *string `json:"taskState,omitempty" tf:"task_state,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type SiteMonitorParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Optional
	AlertIds []*string `json:"alertIds,omitempty" tf:"alert_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Optional
	IspCities []IspCitiesParameters `json:"ispCities,omitempty" tf:"isp_cities,omitempty"`

	// +kubebuilder:validation:Optional
	OptionsJSON *string `json:"optionsJson,omitempty" tf:"options_json,omitempty"`

	// +kubebuilder:validation:Required
	TaskName *string `json:"taskName" tf:"task_name,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`
}

// SiteMonitorSpec defines the desired state of SiteMonitor
type SiteMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SiteMonitorParameters `json:"forProvider"`
}

// SiteMonitorStatus defines the observed state of SiteMonitor.
type SiteMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SiteMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SiteMonitor is the Schema for the SiteMonitors API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SiteMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SiteMonitorSpec   `json:"spec"`
	Status            SiteMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SiteMonitorList contains a list of SiteMonitors
type SiteMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SiteMonitor `json:"items"`
}

// Repository type metadata.
var (
	SiteMonitor_Kind             = "SiteMonitor"
	SiteMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SiteMonitor_Kind}.String()
	SiteMonitor_KindAPIVersion   = SiteMonitor_Kind + "." + CRDGroupVersion.String()
	SiteMonitor_GroupVersionKind = CRDGroupVersion.WithKind(SiteMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&SiteMonitor{}, &SiteMonitorList{})
}
