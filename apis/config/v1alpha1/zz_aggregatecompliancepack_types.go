/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregateCompliancePackObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AggregateCompliancePackParameters struct {

	// +kubebuilder:validation:Required
	AggregateCompliancePackName *string `json:"aggregateCompliancePackName" tf:"aggregate_compliance_pack_name,omitempty"`

	// +kubebuilder:validation:Required
	AggregatorID *string `json:"aggregatorId" tf:"aggregator_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompliancePackTemplateID *string `json:"compliancePackTemplateId,omitempty" tf:"compliance_pack_template_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigRuleIds []ConfigRuleIdsParameters `json:"configRuleIds,omitempty" tf:"config_rule_ids,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigRules []ConfigRulesParameters `json:"configRules,omitempty" tf:"config_rules,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	RiskLevel *float64 `json:"riskLevel" tf:"risk_level,omitempty"`
}

type ConfigRuleIdsObservation struct {
}

type ConfigRuleIdsParameters struct {

	// +kubebuilder:validation:Optional
	ConfigRuleID *string `json:"configRuleId,omitempty" tf:"config_rule_id,omitempty"`
}

type ConfigRuleParametersObservation struct {
}

type ConfigRuleParametersParameters struct {

	// +kubebuilder:validation:Optional
	ParameterName *string `json:"parameterName,omitempty" tf:"parameter_name,omitempty"`

	// +kubebuilder:validation:Optional
	ParameterValue *string `json:"parameterValue,omitempty" tf:"parameter_value,omitempty"`
}

type ConfigRulesObservation struct {
}

type ConfigRulesParameters struct {

	// +kubebuilder:validation:Optional
	ConfigRuleParameters []ConfigRuleParametersParameters `json:"configRuleParameters,omitempty" tf:"config_rule_parameters,omitempty"`

	// +kubebuilder:validation:Required
	ManagedRuleIdentifier *string `json:"managedRuleIdentifier" tf:"managed_rule_identifier,omitempty"`
}

// AggregateCompliancePackSpec defines the desired state of AggregateCompliancePack
type AggregateCompliancePackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AggregateCompliancePackParameters `json:"forProvider"`
}

// AggregateCompliancePackStatus defines the observed state of AggregateCompliancePack.
type AggregateCompliancePackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AggregateCompliancePackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AggregateCompliancePack is the Schema for the AggregateCompliancePacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AggregateCompliancePack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AggregateCompliancePackSpec   `json:"spec"`
	Status            AggregateCompliancePackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AggregateCompliancePackList contains a list of AggregateCompliancePacks
type AggregateCompliancePackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AggregateCompliancePack `json:"items"`
}

// Repository type metadata.
var (
	AggregateCompliancePack_Kind             = "AggregateCompliancePack"
	AggregateCompliancePack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AggregateCompliancePack_Kind}.String()
	AggregateCompliancePack_KindAPIVersion   = AggregateCompliancePack_Kind + "." + CRDGroupVersion.String()
	AggregateCompliancePack_GroupVersionKind = CRDGroupVersion.WithKind(AggregateCompliancePack_Kind)
)

func init() {
	SchemeBuilder.Register(&AggregateCompliancePack{}, &AggregateCompliancePackList{})
}
