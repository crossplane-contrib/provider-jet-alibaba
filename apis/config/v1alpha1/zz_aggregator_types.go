/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregatorAccountsObservation struct {
}

type AggregatorAccountsParameters struct {

	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Required
	AccountType *string `json:"accountType" tf:"account_type,omitempty"`
}

type AggregatorObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AggregatorParameters struct {

	// +kubebuilder:validation:Optional
	AggregatorAccounts []AggregatorAccountsParameters `json:"aggregatorAccounts,omitempty" tf:"aggregator_accounts,omitempty"`

	// +kubebuilder:validation:Required
	AggregatorName *string `json:"aggregatorName" tf:"aggregator_name,omitempty"`

	// +kubebuilder:validation:Optional
	AggregatorType *string `json:"aggregatorType,omitempty" tf:"aggregator_type,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`
}

// AggregatorSpec defines the desired state of Aggregator
type AggregatorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AggregatorParameters `json:"forProvider"`
}

// AggregatorStatus defines the observed state of Aggregator.
type AggregatorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AggregatorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Aggregator is the Schema for the Aggregators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Aggregator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AggregatorSpec   `json:"spec"`
	Status            AggregatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AggregatorList contains a list of Aggregators
type AggregatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Aggregator `json:"items"`
}

// Repository type metadata.
var (
	Aggregator_Kind             = "Aggregator"
	Aggregator_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Aggregator_Kind}.String()
	Aggregator_KindAPIVersion   = Aggregator_Kind + "." + CRDGroupVersion.String()
	Aggregator_GroupVersionKind = CRDGroupVersion.WithKind(Aggregator_Kind)
)

func init() {
	SchemeBuilder.Register(&Aggregator{}, &AggregatorList{})
}
