/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CompliancePackConfigRuleIdsObservation struct {
}

type CompliancePackConfigRuleIdsParameters struct {

	// +kubebuilder:validation:Optional
	ConfigRuleID *string `json:"configRuleId,omitempty" tf:"config_rule_id,omitempty"`
}

type CompliancePackConfigRulesObservation struct {
}

type CompliancePackConfigRulesParameters struct {

	// +kubebuilder:validation:Optional
	ConfigRuleParameters []ConfigRulesConfigRuleParametersParameters `json:"configRuleParameters,omitempty" tf:"config_rule_parameters,omitempty"`

	// +kubebuilder:validation:Required
	ManagedRuleIdentifier *string `json:"managedRuleIdentifier" tf:"managed_rule_identifier,omitempty"`
}

type CompliancePackObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CompliancePackParameters struct {

	// +kubebuilder:validation:Required
	CompliancePackName *string `json:"compliancePackName" tf:"compliance_pack_name,omitempty"`

	// +kubebuilder:validation:Optional
	CompliancePackTemplateID *string `json:"compliancePackTemplateId,omitempty" tf:"compliance_pack_template_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigRuleIds []CompliancePackConfigRuleIdsParameters `json:"configRuleIds,omitempty" tf:"config_rule_ids,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigRules []CompliancePackConfigRulesParameters `json:"configRules,omitempty" tf:"config_rules,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	RiskLevel *float64 `json:"riskLevel" tf:"risk_level,omitempty"`
}

type ConfigRulesConfigRuleParametersObservation struct {
}

type ConfigRulesConfigRuleParametersParameters struct {

	// +kubebuilder:validation:Optional
	ParameterName *string `json:"parameterName,omitempty" tf:"parameter_name,omitempty"`

	// +kubebuilder:validation:Optional
	ParameterValue *string `json:"parameterValue,omitempty" tf:"parameter_value,omitempty"`
}

// CompliancePackSpec defines the desired state of CompliancePack
type CompliancePackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CompliancePackParameters `json:"forProvider"`
}

// CompliancePackStatus defines the observed state of CompliancePack.
type CompliancePackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CompliancePackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CompliancePack is the Schema for the CompliancePacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type CompliancePack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CompliancePackSpec   `json:"spec"`
	Status            CompliancePackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CompliancePackList contains a list of CompliancePacks
type CompliancePackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CompliancePack `json:"items"`
}

// Repository type metadata.
var (
	CompliancePack_Kind             = "CompliancePack"
	CompliancePack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CompliancePack_Kind}.String()
	CompliancePack_KindAPIVersion   = CompliancePack_Kind + "." + CRDGroupVersion.String()
	CompliancePack_GroupVersionKind = CRDGroupVersion.WithKind(CompliancePack_Kind)
)

func init() {
	SchemeBuilder.Register(&CompliancePack{}, &CompliancePackList{})
}
