/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationRecorderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrganizationEnableStatus *string `json:"organizationEnableStatus,omitempty" tf:"organization_enable_status,omitempty"`

	OrganizationMasterID *float64 `json:"organizationMasterId,omitempty" tf:"organization_master_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ConfigurationRecorderParameters struct {

	// +kubebuilder:validation:Optional
	EnterpriseEdition *bool `json:"enterpriseEdition,omitempty" tf:"enterprise_edition,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceTypes []*string `json:"resourceTypes,omitempty" tf:"resource_types,omitempty"`
}

// ConfigurationRecorderSpec defines the desired state of ConfigurationRecorder
type ConfigurationRecorderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationRecorderParameters `json:"forProvider"`
}

// ConfigurationRecorderStatus defines the observed state of ConfigurationRecorder.
type ConfigurationRecorderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationRecorderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationRecorder is the Schema for the ConfigurationRecorders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ConfigurationRecorder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationRecorderSpec   `json:"spec"`
	Status            ConfigurationRecorderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationRecorderList contains a list of ConfigurationRecorders
type ConfigurationRecorderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationRecorder `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationRecorder_Kind             = "ConfigurationRecorder"
	ConfigurationRecorder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationRecorder_Kind}.String()
	ConfigurationRecorder_KindAPIVersion   = ConfigurationRecorder_Kind + "." + CRDGroupVersion.String()
	ConfigurationRecorder_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationRecorder_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationRecorder{}, &ConfigurationRecorderList{})
}
