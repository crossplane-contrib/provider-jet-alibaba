/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeliveryChannelObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DeliveryChannelParameters struct {

	// +kubebuilder:validation:Required
	DeliveryChannelAssumeRoleArn *string `json:"deliveryChannelAssumeRoleArn" tf:"delivery_channel_assume_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryChannelCondition *string `json:"deliveryChannelCondition,omitempty" tf:"delivery_channel_condition,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryChannelName *string `json:"deliveryChannelName,omitempty" tf:"delivery_channel_name,omitempty"`

	// +kubebuilder:validation:Required
	DeliveryChannelTargetArn *string `json:"deliveryChannelTargetArn" tf:"delivery_channel_target_arn,omitempty"`

	// +kubebuilder:validation:Required
	DeliveryChannelType *string `json:"deliveryChannelType" tf:"delivery_channel_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

// DeliveryChannelSpec defines the desired state of DeliveryChannel
type DeliveryChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeliveryChannelParameters `json:"forProvider"`
}

// DeliveryChannelStatus defines the observed state of DeliveryChannel.
type DeliveryChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeliveryChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeliveryChannel is the Schema for the DeliveryChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DeliveryChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeliveryChannelSpec   `json:"spec"`
	Status            DeliveryChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeliveryChannelList contains a list of DeliveryChannels
type DeliveryChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeliveryChannel `json:"items"`
}

// Repository type metadata.
var (
	DeliveryChannel_Kind             = "DeliveryChannel"
	DeliveryChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeliveryChannel_Kind}.String()
	DeliveryChannel_KindAPIVersion   = DeliveryChannel_Kind + "." + CRDGroupVersion.String()
	DeliveryChannel_GroupVersionKind = CRDGroupVersion.WithKind(DeliveryChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&DeliveryChannel{}, &DeliveryChannelList{})
}
