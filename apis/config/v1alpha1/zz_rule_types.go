/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleParameters struct {

	// +kubebuilder:validation:Optional
	ConfigRuleTriggerTypes *string `json:"configRuleTriggerTypes,omitempty" tf:"config_rule_trigger_types,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExcludeResourceIdsScope *string `json:"excludeResourceIdsScope,omitempty" tf:"exclude_resource_ids_scope,omitempty"`

	// +kubebuilder:validation:Optional
	InputParameters map[string]*string `json:"inputParameters,omitempty" tf:"input_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency,omitempty"`

	// +kubebuilder:validation:Optional
	MemberID *float64 `json:"memberId,omitempty" tf:"member_id,omitempty"`

	// +kubebuilder:validation:Optional
	MultiAccount *bool `json:"multiAccount,omitempty" tf:"multi_account,omitempty"`

	// +kubebuilder:validation:Optional
	RegionIdsScope *string `json:"regionIdsScope,omitempty" tf:"region_ids_scope,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupIdsScope *string `json:"resourceGroupIdsScope,omitempty" tf:"resource_group_ids_scope,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceTypesScope []*string `json:"resourceTypesScope,omitempty" tf:"resource_types_scope,omitempty"`

	// +kubebuilder:validation:Required
	RiskLevel *float64 `json:"riskLevel" tf:"risk_level,omitempty"`

	// +kubebuilder:validation:Required
	RuleName *string `json:"ruleName" tf:"rule_name,omitempty"`

	// +kubebuilder:validation:Optional
	ScopeComplianceResourceID *string `json:"scopeComplianceResourceId,omitempty" tf:"scope_compliance_resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	ScopeComplianceResourceTypes []*string `json:"scopeComplianceResourceTypes,omitempty" tf:"scope_compliance_resource_types,omitempty"`

	// +kubebuilder:validation:Optional
	SourceDetailMessageType *string `json:"sourceDetailMessageType,omitempty" tf:"source_detail_message_type,omitempty"`

	// +kubebuilder:validation:Required
	SourceIdentifier *string `json:"sourceIdentifier" tf:"source_identifier,omitempty"`

	// +kubebuilder:validation:Optional
	SourceMaximumExecutionFrequency *string `json:"sourceMaximumExecutionFrequency,omitempty" tf:"source_maximum_execution_frequency,omitempty"`

	// +kubebuilder:validation:Required
	SourceOwner *string `json:"sourceOwner" tf:"source_owner,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TagKeyScope *string `json:"tagKeyScope,omitempty" tf:"tag_key_scope,omitempty"`

	// +kubebuilder:validation:Optional
	TagValueScope *string `json:"tagValueScope,omitempty" tf:"tag_value_scope,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters `json:"forProvider"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rule is the Schema for the Rules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec"`
	Status            RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
