/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChartNamespaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChartNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	AutoCreateRepo *bool `json:"autoCreateRepo,omitempty" tf:"auto_create_repo,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultRepoType *string `json:"defaultRepoType,omitempty" tf:"default_repo_type,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceName *string `json:"namespaceName" tf:"namespace_name,omitempty"`
}

// ChartNamespaceSpec defines the desired state of ChartNamespace
type ChartNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChartNamespaceParameters `json:"forProvider"`
}

// ChartNamespaceStatus defines the observed state of ChartNamespace.
type ChartNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChartNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChartNamespace is the Schema for the ChartNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ChartNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChartNamespaceSpec   `json:"spec"`
	Status            ChartNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChartNamespaceList contains a list of ChartNamespaces
type ChartNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChartNamespace `json:"items"`
}

// Repository type metadata.
var (
	ChartNamespace_Kind             = "ChartNamespace"
	ChartNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChartNamespace_Kind}.String()
	ChartNamespace_KindAPIVersion   = ChartNamespace_Kind + "." + CRDGroupVersion.String()
	ChartNamespace_GroupVersionKind = CRDGroupVersion.WithKind(ChartNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&ChartNamespace{}, &ChartNamespaceList{})
}
