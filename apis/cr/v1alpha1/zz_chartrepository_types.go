/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChartRepositoryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChartRepositoryParameters struct {

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	RepoName *string `json:"repoName" tf:"repo_name,omitempty"`

	// +kubebuilder:validation:Required
	RepoNamespaceName *string `json:"repoNamespaceName" tf:"repo_namespace_name,omitempty"`

	// +kubebuilder:validation:Optional
	RepoType *string `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// +kubebuilder:validation:Optional
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

// ChartRepositorySpec defines the desired state of ChartRepository
type ChartRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChartRepositoryParameters `json:"forProvider"`
}

// ChartRepositoryStatus defines the observed state of ChartRepository.
type ChartRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChartRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChartRepository is the Schema for the ChartRepositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ChartRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChartRepositorySpec   `json:"spec"`
	Status            ChartRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChartRepositoryList contains a list of ChartRepositorys
type ChartRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChartRepository `json:"items"`
}

// Repository type metadata.
var (
	ChartRepository_Kind             = "ChartRepository"
	ChartRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChartRepository_Kind}.String()
	ChartRepository_KindAPIVersion   = ChartRepository_Kind + "." + CRDGroupVersion.String()
	ChartRepository_GroupVersionKind = CRDGroupVersion.WithKind(ChartRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&ChartRepository{}, &ChartRepositoryList{})
}
