/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EeNamespaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EeNamespaceParameters struct {

	// +kubebuilder:validation:Required
	AutoCreate *bool `json:"autoCreate" tf:"auto_create,omitempty"`

	// +kubebuilder:validation:Required
	DefaultVisibility *string `json:"defaultVisibility" tf:"default_visibility,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`
}

// EeNamespaceSpec defines the desired state of EeNamespace
type EeNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EeNamespaceParameters `json:"forProvider"`
}

// EeNamespaceStatus defines the observed state of EeNamespace.
type EeNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EeNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EeNamespace is the Schema for the EeNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EeNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EeNamespaceSpec   `json:"spec"`
	Status            EeNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EeNamespaceList contains a list of EeNamespaces
type EeNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EeNamespace `json:"items"`
}

// Repository type metadata.
var (
	EeNamespace_Kind             = "EeNamespace"
	EeNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EeNamespace_Kind}.String()
	EeNamespace_KindAPIVersion   = EeNamespace_Kind + "." + CRDGroupVersion.String()
	EeNamespace_GroupVersionKind = CRDGroupVersion.WithKind(EeNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&EeNamespace{}, &EeNamespaceList{})
}
