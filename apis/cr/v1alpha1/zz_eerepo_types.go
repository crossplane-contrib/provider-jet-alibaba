/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EeRepoObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RepoID *string `json:"repoId,omitempty" tf:"repo_id,omitempty"`
}

type EeRepoParameters struct {

	// +kubebuilder:validation:Optional
	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Required
	RepoType *string `json:"repoType" tf:"repo_type,omitempty"`

	// +kubebuilder:validation:Required
	Summary *string `json:"summary" tf:"summary,omitempty"`
}

// EeRepoSpec defines the desired state of EeRepo
type EeRepoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EeRepoParameters `json:"forProvider"`
}

// EeRepoStatus defines the observed state of EeRepo.
type EeRepoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EeRepoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EeRepo is the Schema for the EeRepos API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EeRepo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EeRepoSpec   `json:"spec"`
	Status            EeRepoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EeRepoList contains a list of EeRepos
type EeRepoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EeRepo `json:"items"`
}

// Repository type metadata.
var (
	EeRepo_Kind             = "EeRepo"
	EeRepo_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EeRepo_Kind}.String()
	EeRepo_KindAPIVersion   = EeRepo_Kind + "." + CRDGroupVersion.String()
	EeRepo_GroupVersionKind = CRDGroupVersion.WithKind(EeRepo_Kind)
)

func init() {
	SchemeBuilder.Register(&EeRepo{}, &EeRepoList{})
}
