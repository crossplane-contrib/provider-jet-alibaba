/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EeSyncRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	SyncDirection *string `json:"syncDirection,omitempty" tf:"sync_direction,omitempty"`

	SyncScope *string `json:"syncScope,omitempty" tf:"sync_scope,omitempty"`
}

type EeSyncRuleParameters struct {

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceName *string `json:"namespaceName" tf:"namespace_name,omitempty"`

	// +kubebuilder:validation:Optional
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// +kubebuilder:validation:Required
	TagFilter *string `json:"tagFilter" tf:"tag_filter,omitempty"`

	// +kubebuilder:validation:Required
	TargetInstanceID *string `json:"targetInstanceId" tf:"target_instance_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetNamespaceName *string `json:"targetNamespaceName" tf:"target_namespace_name,omitempty"`

	// +kubebuilder:validation:Required
	TargetRegionID *string `json:"targetRegionId" tf:"target_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	TargetRepoName *string `json:"targetRepoName,omitempty" tf:"target_repo_name,omitempty"`
}

// EeSyncRuleSpec defines the desired state of EeSyncRule
type EeSyncRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EeSyncRuleParameters `json:"forProvider"`
}

// EeSyncRuleStatus defines the observed state of EeSyncRule.
type EeSyncRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EeSyncRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EeSyncRule is the Schema for the EeSyncRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EeSyncRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EeSyncRuleSpec   `json:"spec"`
	Status            EeSyncRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EeSyncRuleList contains a list of EeSyncRules
type EeSyncRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EeSyncRule `json:"items"`
}

// Repository type metadata.
var (
	EeSyncRule_Kind             = "EeSyncRule"
	EeSyncRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EeSyncRule_Kind}.String()
	EeSyncRule_KindAPIVersion   = EeSyncRule_Kind + "." + CRDGroupVersion.String()
	EeSyncRule_GroupVersionKind = CRDGroupVersion.WithKind(EeSyncRule_Kind)
)

func init() {
	SchemeBuilder.Register(&EeSyncRule{}, &EeSyncRuleList{})
}
