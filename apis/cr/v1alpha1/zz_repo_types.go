/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepoObservation struct {
	DomainList map[string]*string `json:"domainList,omitempty" tf:"domain_list,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RepoParameters struct {

	// +kubebuilder:validation:Optional
	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Required
	RepoType *string `json:"repoType" tf:"repo_type,omitempty"`

	// +kubebuilder:validation:Required
	Summary *string `json:"summary" tf:"summary,omitempty"`
}

// RepoSpec defines the desired state of Repo
type RepoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepoParameters `json:"forProvider"`
}

// RepoStatus defines the observed state of Repo.
type RepoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Repo is the Schema for the Repos API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Repo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepoSpec   `json:"spec"`
	Status            RepoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepoList contains a list of Repos
type RepoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Repo `json:"items"`
}

// Repository type metadata.
var (
	Repo_Kind             = "Repo"
	Repo_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Repo_Kind}.String()
	Repo_KindAPIVersion   = Repo_Kind + "." + CRDGroupVersion.String()
	Repo_GroupVersionKind = CRDGroupVersion.WithKind(Repo_Kind)
)

func init() {
	SchemeBuilder.Register(&Repo{}, &RepoList{})
}
