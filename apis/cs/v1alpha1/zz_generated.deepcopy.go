//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsObservation) DeepCopyInto(out *AddonsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsObservation.
func (in *AddonsObservation) DeepCopy() *AddonsObservation {
	if in == nil {
		return nil
	}
	out := new(AddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsParameters) DeepCopyInto(out *AddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsParameters.
func (in *AddonsParameters) DeepCopy() *AddonsParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Application) DeepCopyInto(out *Application) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Application.
func (in *Application) DeepCopy() *Application {
	if in == nil {
		return nil
	}
	out := new(Application)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Application) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationList) DeepCopyInto(out *ApplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Application, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationList.
func (in *ApplicationList) DeepCopy() *ApplicationList {
	if in == nil {
		return nil
	}
	out := new(ApplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ApplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationObservation) DeepCopyInto(out *ApplicationObservation) {
	*out = *in
	if in.DefaultDomain != nil {
		in, out := &in.DefaultDomain, &out.DefaultDomain
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]ServicesObservation, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationObservation.
func (in *ApplicationObservation) DeepCopy() *ApplicationObservation {
	if in == nil {
		return nil
	}
	out := new(ApplicationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationParameters) DeepCopyInto(out *ApplicationParameters) {
	*out = *in
	if in.BlueGreen != nil {
		in, out := &in.BlueGreen, &out.BlueGreen
		*out = new(bool)
		**out = **in
	}
	if in.BlueGreenConfirm != nil {
		in, out := &in.BlueGreenConfirm, &out.BlueGreenConfirm
		*out = new(bool)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LatestImage != nil {
		in, out := &in.LatestImage, &out.LatestImage
		*out = new(bool)
		**out = **in
	}
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationParameters.
func (in *ApplicationParameters) DeepCopy() *ApplicationParameters {
	if in == nil {
		return nil
	}
	out := new(ApplicationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationSpec) DeepCopyInto(out *ApplicationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationSpec.
func (in *ApplicationSpec) DeepCopy() *ApplicationSpec {
	if in == nil {
		return nil
	}
	out := new(ApplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApplicationStatus) DeepCopyInto(out *ApplicationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApplicationStatus.
func (in *ApplicationStatus) DeepCopy() *ApplicationStatus {
	if in == nil {
		return nil
	}
	out := new(ApplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfig) DeepCopyInto(out *AutoscalingConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfig.
func (in *AutoscalingConfig) DeepCopy() *AutoscalingConfig {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoscalingConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigList) DeepCopyInto(out *AutoscalingConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AutoscalingConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigList.
func (in *AutoscalingConfigList) DeepCopy() *AutoscalingConfigList {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoscalingConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigObservation) DeepCopyInto(out *AutoscalingConfigObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigObservation.
func (in *AutoscalingConfigObservation) DeepCopy() *AutoscalingConfigObservation {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigParameters) DeepCopyInto(out *AutoscalingConfigParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.GpuUtilizationThreshold != nil {
		in, out := &in.GpuUtilizationThreshold, &out.GpuUtilizationThreshold
		*out = new(string)
		**out = **in
	}
	if in.ScanInterval != nil {
		in, out := &in.ScanInterval, &out.ScanInterval
		*out = new(string)
		**out = **in
	}
	if in.UnneededDuration != nil {
		in, out := &in.UnneededDuration, &out.UnneededDuration
		*out = new(string)
		**out = **in
	}
	if in.UtilizationThreshold != nil {
		in, out := &in.UtilizationThreshold, &out.UtilizationThreshold
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigParameters.
func (in *AutoscalingConfigParameters) DeepCopy() *AutoscalingConfigParameters {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigSpec) DeepCopyInto(out *AutoscalingConfigSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigSpec.
func (in *AutoscalingConfigSpec) DeepCopy() *AutoscalingConfigSpec {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigStatus) DeepCopyInto(out *AutoscalingConfigStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigStatus.
func (in *AutoscalingConfigStatus) DeepCopy() *AutoscalingConfigStatus {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksObservation) DeepCopyInto(out *DataDisksObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksObservation.
func (in *DataDisksObservation) DeepCopy() *DataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(DataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksParameters) DeepCopyInto(out *DataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksParameters.
func (in *DataDisksParameters) DeepCopy() *DataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(DataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetes) DeepCopyInto(out *EdgeKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetes.
func (in *EdgeKubernetes) DeepCopy() *EdgeKubernetes {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesList) DeepCopyInto(out *EdgeKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EdgeKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesList.
func (in *EdgeKubernetesList) DeepCopy() *EdgeKubernetesList {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesObservation) DeepCopyInto(out *EdgeKubernetesObservation) {
	*out = *in
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NATGatewayID != nil {
		in, out := &in.NATGatewayID, &out.NATGatewayID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]WorkerNodesObservation, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesObservation.
func (in *EdgeKubernetesObservation) DeepCopy() *EdgeKubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesParameters) DeepCopyInto(out *EdgeKubernetesParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]LogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]WorkerDataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesParameters.
func (in *EdgeKubernetesParameters) DeepCopy() *EdgeKubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpec) DeepCopyInto(out *EdgeKubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpec.
func (in *EdgeKubernetesSpec) DeepCopy() *EdgeKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesStatus) DeepCopyInto(out *EdgeKubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesStatus.
func (in *EdgeKubernetesStatus) DeepCopy() *EdgeKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Kubernetes) DeepCopyInto(out *Kubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Kubernetes.
func (in *Kubernetes) DeepCopy() *Kubernetes {
	if in == nil {
		return nil
	}
	out := new(Kubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Kubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddon) DeepCopyInto(out *KubernetesAddon) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddon.
func (in *KubernetesAddon) DeepCopy() *KubernetesAddon {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddon)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAddon) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonList) DeepCopyInto(out *KubernetesAddonList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesAddon, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonList.
func (in *KubernetesAddonList) DeepCopy() *KubernetesAddonList {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAddonList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonObservation) DeepCopyInto(out *KubernetesAddonObservation) {
	*out = *in
	if in.CanUpgrade != nil {
		in, out := &in.CanUpgrade, &out.CanUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NextVersion != nil {
		in, out := &in.NextVersion, &out.NextVersion
		*out = new(string)
		**out = **in
	}
	if in.Required != nil {
		in, out := &in.Required, &out.Required
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonObservation.
func (in *KubernetesAddonObservation) DeepCopy() *KubernetesAddonObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonParameters) DeepCopyInto(out *KubernetesAddonParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonParameters.
func (in *KubernetesAddonParameters) DeepCopy() *KubernetesAddonParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonSpec) DeepCopyInto(out *KubernetesAddonSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonSpec.
func (in *KubernetesAddonSpec) DeepCopy() *KubernetesAddonSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonStatus) DeepCopyInto(out *KubernetesAddonStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonStatus.
func (in *KubernetesAddonStatus) DeepCopy() *KubernetesAddonStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonsObservation) DeepCopyInto(out *KubernetesAddonsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonsObservation.
func (in *KubernetesAddonsObservation) DeepCopy() *KubernetesAddonsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonsParameters) DeepCopyInto(out *KubernetesAddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonsParameters.
func (in *KubernetesAddonsParameters) DeepCopy() *KubernetesAddonsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscaler) DeepCopyInto(out *KubernetesAutoscaler) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscaler.
func (in *KubernetesAutoscaler) DeepCopy() *KubernetesAutoscaler {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscaler)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAutoscaler) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerList) DeepCopyInto(out *KubernetesAutoscalerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesAutoscaler, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerList.
func (in *KubernetesAutoscalerList) DeepCopy() *KubernetesAutoscalerList {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAutoscalerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerObservation) DeepCopyInto(out *KubernetesAutoscalerObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerObservation.
func (in *KubernetesAutoscalerObservation) DeepCopy() *KubernetesAutoscalerObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerParameters) DeepCopyInto(out *KubernetesAutoscalerParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.DeferScaleInDuration != nil {
		in, out := &in.DeferScaleInDuration, &out.DeferScaleInDuration
		*out = new(string)
		**out = **in
	}
	if in.Nodepools != nil {
		in, out := &in.Nodepools, &out.Nodepools
		*out = make([]NodepoolsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UseEcsRAMRoleToken != nil {
		in, out := &in.UseEcsRAMRoleToken, &out.UseEcsRAMRoleToken
		*out = new(bool)
		**out = **in
	}
	if in.Utilization != nil {
		in, out := &in.Utilization, &out.Utilization
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerParameters.
func (in *KubernetesAutoscalerParameters) DeepCopy() *KubernetesAutoscalerParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerSpec) DeepCopyInto(out *KubernetesAutoscalerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerSpec.
func (in *KubernetesAutoscalerSpec) DeepCopy() *KubernetesAutoscalerSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAutoscalerStatus) DeepCopyInto(out *KubernetesAutoscalerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAutoscalerStatus.
func (in *KubernetesAutoscalerStatus) DeepCopy() *KubernetesAutoscalerStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesAutoscalerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesList) DeepCopyInto(out *KubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Kubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesList.
func (in *KubernetesList) DeepCopy() *KubernetesList {
	if in == nil {
		return nil
	}
	out := new(KubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesLogConfigObservation) DeepCopyInto(out *KubernetesLogConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesLogConfigObservation.
func (in *KubernetesLogConfigObservation) DeepCopy() *KubernetesLogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesLogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesLogConfigParameters) DeepCopyInto(out *KubernetesLogConfigParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesLogConfigParameters.
func (in *KubernetesLogConfigParameters) DeepCopy() *KubernetesLogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesLogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePool) DeepCopyInto(out *KubernetesNodePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePool.
func (in *KubernetesNodePool) DeepCopy() *KubernetesNodePool {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesNodePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolList) DeepCopyInto(out *KubernetesNodePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesNodePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolList.
func (in *KubernetesNodePoolList) DeepCopy() *KubernetesNodePoolList {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesNodePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolObservation) DeepCopyInto(out *KubernetesNodePoolObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ScalingGroupID != nil {
		in, out := &in.ScalingGroupID, &out.ScalingGroupID
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolObservation.
func (in *KubernetesNodePoolObservation) DeepCopy() *KubernetesNodePoolObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolParameters) DeepCopyInto(out *KubernetesNodePoolParameters) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeploymentSetID != nil {
		in, out := &in.DeploymentSetID, &out.DeploymentSetID
		*out = new(string)
		**out = **in
	}
	if in.FormatDisk != nil {
		in, out := &in.FormatDisk, &out.FormatDisk
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageType != nil {
		in, out := &in.ImageType, &out.ImageType
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceTypes != nil {
		in, out := &in.InstanceTypes, &out.InstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KeepInstanceName != nil {
		in, out := &in.KeepInstanceName, &out.KeepInstanceName
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = make([]ManagementParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RuntimeName != nil {
		in, out := &in.RuntimeName, &out.RuntimeName
		*out = new(string)
		**out = **in
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ScalingConfig != nil {
		in, out := &in.ScalingConfig, &out.ScalingConfig
		*out = make([]ScalingConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotPriceLimit != nil {
		in, out := &in.SpotPriceLimit, &out.SpotPriceLimit
		*out = make([]SpotPriceLimitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SpotStrategy != nil {
		in, out := &in.SpotStrategy, &out.SpotStrategy
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskCategory != nil {
		in, out := &in.SystemDiskCategory, &out.SystemDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskPerformanceLevel != nil {
		in, out := &in.SystemDiskPerformanceLevel, &out.SystemDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]KubernetesNodePoolTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(bool)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolParameters.
func (in *KubernetesNodePoolParameters) DeepCopy() *KubernetesNodePoolParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpec) DeepCopyInto(out *KubernetesNodePoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpec.
func (in *KubernetesNodePoolSpec) DeepCopy() *KubernetesNodePoolSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolStatus) DeepCopyInto(out *KubernetesNodePoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolStatus.
func (in *KubernetesNodePoolStatus) DeepCopy() *KubernetesNodePoolStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolTaintsObservation) DeepCopyInto(out *KubernetesNodePoolTaintsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolTaintsObservation.
func (in *KubernetesNodePoolTaintsObservation) DeepCopy() *KubernetesNodePoolTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolTaintsParameters) DeepCopyInto(out *KubernetesNodePoolTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolTaintsParameters.
func (in *KubernetesNodePoolTaintsParameters) DeepCopy() *KubernetesNodePoolTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesObservation) DeepCopyInto(out *KubernetesObservation) {
	*out = *in
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MasterNodes != nil {
		in, out := &in.MasterNodes, &out.MasterNodes
		*out = make([]MasterNodesObservation, len(*in))
		copy(*out, *in)
	}
	if in.NATGatewayID != nil {
		in, out := &in.NATGatewayID, &out.NATGatewayID
		*out = new(string)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]KubernetesWorkerNodesObservation, len(*in))
		copy(*out, *in)
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesObservation.
func (in *KubernetesObservation) DeepCopy() *KubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesParameters) DeepCopyInto(out *KubernetesParameters) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]KubernetesAddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]KubernetesLogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterAutoRenew != nil {
		in, out := &in.MasterAutoRenew, &out.MasterAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.MasterAutoRenewPeriod != nil {
		in, out := &in.MasterAutoRenewPeriod, &out.MasterAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskCategory != nil {
		in, out := &in.MasterDiskCategory, &out.MasterDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskPerformanceLevel != nil {
		in, out := &in.MasterDiskPerformanceLevel, &out.MasterDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskSize != nil {
		in, out := &in.MasterDiskSize, &out.MasterDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskSnapshotPolicyID != nil {
		in, out := &in.MasterDiskSnapshotPolicyID, &out.MasterDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceChargeType != nil {
		in, out := &in.MasterInstanceChargeType, &out.MasterInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceType != nil {
		in, out := &in.MasterInstanceType, &out.MasterInstanceType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceTypes != nil {
		in, out := &in.MasterInstanceTypes, &out.MasterInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterPeriod != nil {
		in, out := &in.MasterPeriod, &out.MasterPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterPeriodUnit != nil {
		in, out := &in.MasterPeriodUnit, &out.MasterPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.MasterVswitchIds != nil {
		in, out := &in.MasterVswitchIds, &out.MasterVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]KubernetesWorkerDataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesParameters.
func (in *KubernetesParameters) DeepCopy() *KubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissions) DeepCopyInto(out *KubernetesPermissions) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissions.
func (in *KubernetesPermissions) DeepCopy() *KubernetesPermissions {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesPermissions) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsList) DeepCopyInto(out *KubernetesPermissionsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesPermissions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsList.
func (in *KubernetesPermissionsList) DeepCopy() *KubernetesPermissionsList {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesPermissionsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsObservation) DeepCopyInto(out *KubernetesPermissionsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsObservation.
func (in *KubernetesPermissionsObservation) DeepCopy() *KubernetesPermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsParameters) DeepCopyInto(out *KubernetesPermissionsParameters) {
	*out = *in
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]PermissionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsParameters.
func (in *KubernetesPermissionsParameters) DeepCopy() *KubernetesPermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsSpec) DeepCopyInto(out *KubernetesPermissionsSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsSpec.
func (in *KubernetesPermissionsSpec) DeepCopy() *KubernetesPermissionsSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsStatus) DeepCopyInto(out *KubernetesPermissionsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsStatus.
func (in *KubernetesPermissionsStatus) DeepCopy() *KubernetesPermissionsStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpec) DeepCopyInto(out *KubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpec.
func (in *KubernetesSpec) DeepCopy() *KubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesStatus) DeepCopyInto(out *KubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesStatus.
func (in *KubernetesStatus) DeepCopy() *KubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerDataDisksObservation) DeepCopyInto(out *KubernetesWorkerDataDisksObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerDataDisksObservation.
func (in *KubernetesWorkerDataDisksObservation) DeepCopy() *KubernetesWorkerDataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerDataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerDataDisksParameters) DeepCopyInto(out *KubernetesWorkerDataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerDataDisksParameters.
func (in *KubernetesWorkerDataDisksParameters) DeepCopy() *KubernetesWorkerDataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerDataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerNodesObservation) DeepCopyInto(out *KubernetesWorkerNodesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerNodesObservation.
func (in *KubernetesWorkerNodesObservation) DeepCopy() *KubernetesWorkerNodesObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerNodesParameters) DeepCopyInto(out *KubernetesWorkerNodesParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerNodesParameters.
func (in *KubernetesWorkerNodesParameters) DeepCopy() *KubernetesWorkerNodesParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerNodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsObservation) DeepCopyInto(out *LabelsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsObservation.
func (in *LabelsObservation) DeepCopy() *LabelsObservation {
	if in == nil {
		return nil
	}
	out := new(LabelsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsParameters) DeepCopyInto(out *LabelsParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsParameters.
func (in *LabelsParameters) DeepCopy() *LabelsParameters {
	if in == nil {
		return nil
	}
	out := new(LabelsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigObservation) DeepCopyInto(out *LogConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigObservation.
func (in *LogConfigObservation) DeepCopy() *LogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(LogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigParameters) DeepCopyInto(out *LogConfigParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigParameters.
func (in *LogConfigParameters) DeepCopy() *LogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(LogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowObservation) DeepCopyInto(out *MaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowObservation.
func (in *MaintenanceWindowObservation) DeepCopy() *MaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowParameters) DeepCopyInto(out *MaintenanceWindowParameters) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowParameters.
func (in *MaintenanceWindowParameters) DeepCopy() *MaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetes) DeepCopyInto(out *ManagedKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetes.
func (in *ManagedKubernetes) DeepCopy() *ManagedKubernetes {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesAddonsObservation) DeepCopyInto(out *ManagedKubernetesAddonsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesAddonsObservation.
func (in *ManagedKubernetesAddonsObservation) DeepCopy() *ManagedKubernetesAddonsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesAddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesAddonsParameters) DeepCopyInto(out *ManagedKubernetesAddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesAddonsParameters.
func (in *ManagedKubernetesAddonsParameters) DeepCopy() *ManagedKubernetesAddonsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesAddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesList) DeepCopyInto(out *ManagedKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesList.
func (in *ManagedKubernetesList) DeepCopy() *ManagedKubernetesList {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesLogConfigObservation) DeepCopyInto(out *ManagedKubernetesLogConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesLogConfigObservation.
func (in *ManagedKubernetesLogConfigObservation) DeepCopy() *ManagedKubernetesLogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesLogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesLogConfigParameters) DeepCopyInto(out *ManagedKubernetesLogConfigParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesLogConfigParameters.
func (in *ManagedKubernetesLogConfigParameters) DeepCopy() *ManagedKubernetesLogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesLogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesObservation) DeepCopyInto(out *ManagedKubernetesObservation) {
	*out = *in
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NATGatewayID != nil {
		in, out := &in.NATGatewayID, &out.NATGatewayID
		*out = new(string)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]ManagedKubernetesWorkerNodesObservation, len(*in))
		copy(*out, *in)
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesObservation.
func (in *ManagedKubernetesObservation) DeepCopy() *ManagedKubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesParameters) DeepCopyInto(out *ManagedKubernetesParameters) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ManagedKubernetesAddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogComponents != nil {
		in, out := &in.ControlPlaneLogComponents, &out.ControlPlaneLogComponents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ControlPlaneLogProject != nil {
		in, out := &in.ControlPlaneLogProject, &out.ControlPlaneLogProject
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogTTL != nil {
		in, out := &in.ControlPlaneLogTTL, &out.ControlPlaneLogTTL
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionProviderKey != nil {
		in, out := &in.EncryptionProviderKey, &out.EncryptionProviderKey
		*out = new(string)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]ManagedKubernetesLogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ManagedKubernetesTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]ManagedKubernetesWorkerDataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesParameters.
func (in *ManagedKubernetesParameters) DeepCopy() *ManagedKubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpec) DeepCopyInto(out *ManagedKubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpec.
func (in *ManagedKubernetesSpec) DeepCopy() *ManagedKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesStatus) DeepCopyInto(out *ManagedKubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesStatus.
func (in *ManagedKubernetesStatus) DeepCopy() *ManagedKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesTaintsObservation) DeepCopyInto(out *ManagedKubernetesTaintsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesTaintsObservation.
func (in *ManagedKubernetesTaintsObservation) DeepCopy() *ManagedKubernetesTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesTaintsParameters) DeepCopyInto(out *ManagedKubernetesTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesTaintsParameters.
func (in *ManagedKubernetesTaintsParameters) DeepCopy() *ManagedKubernetesTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerDataDisksObservation) DeepCopyInto(out *ManagedKubernetesWorkerDataDisksObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerDataDisksObservation.
func (in *ManagedKubernetesWorkerDataDisksObservation) DeepCopy() *ManagedKubernetesWorkerDataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerDataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerDataDisksParameters) DeepCopyInto(out *ManagedKubernetesWorkerDataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerDataDisksParameters.
func (in *ManagedKubernetesWorkerDataDisksParameters) DeepCopy() *ManagedKubernetesWorkerDataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerDataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerNodesObservation) DeepCopyInto(out *ManagedKubernetesWorkerNodesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerNodesObservation.
func (in *ManagedKubernetesWorkerNodesObservation) DeepCopy() *ManagedKubernetesWorkerNodesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerNodesParameters) DeepCopyInto(out *ManagedKubernetesWorkerNodesParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerNodesParameters.
func (in *ManagedKubernetesWorkerNodesParameters) DeepCopy() *ManagedKubernetesWorkerNodesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerNodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementObservation) DeepCopyInto(out *ManagementObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementObservation.
func (in *ManagementObservation) DeepCopy() *ManagementObservation {
	if in == nil {
		return nil
	}
	out := new(ManagementObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementParameters) DeepCopyInto(out *ManagementParameters) {
	*out = *in
	if in.AutoRepair != nil {
		in, out := &in.AutoRepair, &out.AutoRepair
		*out = new(bool)
		**out = **in
	}
	if in.AutoUpgrade != nil {
		in, out := &in.AutoUpgrade, &out.AutoUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
	if in.Surge != nil {
		in, out := &in.Surge, &out.Surge
		*out = new(float64)
		**out = **in
	}
	if in.SurgePercentage != nil {
		in, out := &in.SurgePercentage, &out.SurgePercentage
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementParameters.
func (in *ManagementParameters) DeepCopy() *ManagementParameters {
	if in == nil {
		return nil
	}
	out := new(ManagementParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodesObservation) DeepCopyInto(out *MasterNodesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodesObservation.
func (in *MasterNodesObservation) DeepCopy() *MasterNodesObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodesParameters) DeepCopyInto(out *MasterNodesParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodesParameters.
func (in *MasterNodesParameters) DeepCopy() *MasterNodesParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodepoolsObservation) DeepCopyInto(out *NodepoolsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodepoolsObservation.
func (in *NodepoolsObservation) DeepCopy() *NodepoolsObservation {
	if in == nil {
		return nil
	}
	out := new(NodepoolsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodepoolsParameters) DeepCopyInto(out *NodepoolsParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = new(string)
		**out = **in
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodepoolsParameters.
func (in *NodepoolsParameters) DeepCopy() *NodepoolsParameters {
	if in == nil {
		return nil
	}
	out := new(NodepoolsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodesObservation) DeepCopyInto(out *NodesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodesObservation.
func (in *NodesObservation) DeepCopy() *NodesObservation {
	if in == nil {
		return nil
	}
	out := new(NodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodesParameters) DeepCopyInto(out *NodesParameters) {
	*out = *in
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodesParameters.
func (in *NodesParameters) DeepCopy() *NodesParameters {
	if in == nil {
		return nil
	}
	out := new(NodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsObservation) DeepCopyInto(out *PermissionsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsObservation.
func (in *PermissionsObservation) DeepCopy() *PermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(PermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsParameters) DeepCopyInto(out *PermissionsParameters) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.IsCustom != nil {
		in, out := &in.IsCustom, &out.IsCustom
		*out = new(bool)
		**out = **in
	}
	if in.IsRAMRole != nil {
		in, out := &in.IsRAMRole, &out.IsRAMRole
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.RoleType != nil {
		in, out := &in.RoleType, &out.RoleType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsParameters.
func (in *PermissionsParameters) DeepCopy() *PermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalingConfigObservation) DeepCopyInto(out *ScalingConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalingConfigObservation.
func (in *ScalingConfigObservation) DeepCopy() *ScalingConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ScalingConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalingConfigParameters) DeepCopyInto(out *ScalingConfigParameters) {
	*out = *in
	if in.EIPBandwidth != nil {
		in, out := &in.EIPBandwidth, &out.EIPBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EIPInternetChargeType != nil {
		in, out := &in.EIPInternetChargeType, &out.EIPInternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.IsBondEIP != nil {
		in, out := &in.IsBondEIP, &out.IsBondEIP
		*out = new(bool)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalingConfigParameters.
func (in *ScalingConfigParameters) DeepCopy() *ScalingConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ScalingConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetes) DeepCopyInto(out *ServerlessKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetes.
func (in *ServerlessKubernetes) DeepCopy() *ServerlessKubernetes {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServerlessKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesAddonsObservation) DeepCopyInto(out *ServerlessKubernetesAddonsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesAddonsObservation.
func (in *ServerlessKubernetesAddonsObservation) DeepCopy() *ServerlessKubernetesAddonsObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesAddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesAddonsParameters) DeepCopyInto(out *ServerlessKubernetesAddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesAddonsParameters.
func (in *ServerlessKubernetesAddonsParameters) DeepCopy() *ServerlessKubernetesAddonsParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesAddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesList) DeepCopyInto(out *ServerlessKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ServerlessKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesList.
func (in *ServerlessKubernetesList) DeepCopy() *ServerlessKubernetesList {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServerlessKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesObservation) DeepCopyInto(out *ServerlessKubernetesObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesObservation.
func (in *ServerlessKubernetesObservation) DeepCopy() *ServerlessKubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesParameters) DeepCopyInto(out *ServerlessKubernetesParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ServerlessKubernetesAddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EndpointPublicAccessEnabled != nil {
		in, out := &in.EndpointPublicAccessEnabled, &out.EndpointPublicAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LoggingType != nil {
		in, out := &in.LoggingType, &out.LoggingType
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.PrivateZone != nil {
		in, out := &in.PrivateZone, &out.PrivateZone
		*out = new(bool)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.ServiceDiscoveryTypes != nil {
		in, out := &in.ServiceDiscoveryTypes, &out.ServiceDiscoveryTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesParameters.
func (in *ServerlessKubernetesParameters) DeepCopy() *ServerlessKubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesSpec) DeepCopyInto(out *ServerlessKubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesSpec.
func (in *ServerlessKubernetesSpec) DeepCopy() *ServerlessKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesStatus) DeepCopyInto(out *ServerlessKubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesStatus.
func (in *ServerlessKubernetesStatus) DeepCopy() *ServerlessKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicesObservation) DeepCopyInto(out *ServicesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicesObservation.
func (in *ServicesObservation) DeepCopy() *ServicesObservation {
	if in == nil {
		return nil
	}
	out := new(ServicesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicesParameters) DeepCopyInto(out *ServicesParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicesParameters.
func (in *ServicesParameters) DeepCopy() *ServicesParameters {
	if in == nil {
		return nil
	}
	out := new(ServicesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpotPriceLimitObservation) DeepCopyInto(out *SpotPriceLimitObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpotPriceLimitObservation.
func (in *SpotPriceLimitObservation) DeepCopy() *SpotPriceLimitObservation {
	if in == nil {
		return nil
	}
	out := new(SpotPriceLimitObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpotPriceLimitParameters) DeepCopyInto(out *SpotPriceLimitParameters) {
	*out = *in
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.PriceLimit != nil {
		in, out := &in.PriceLimit, &out.PriceLimit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpotPriceLimitParameters.
func (in *SpotPriceLimitParameters) DeepCopy() *SpotPriceLimitParameters {
	if in == nil {
		return nil
	}
	out := new(SpotPriceLimitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Swarm) DeepCopyInto(out *Swarm) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Swarm.
func (in *Swarm) DeepCopy() *Swarm {
	if in == nil {
		return nil
	}
	out := new(Swarm)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Swarm) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmList) DeepCopyInto(out *SwarmList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Swarm, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmList.
func (in *SwarmList) DeepCopy() *SwarmList {
	if in == nil {
		return nil
	}
	out := new(SwarmList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SwarmList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmObservation) DeepCopyInto(out *SwarmObservation) {
	*out = *in
	if in.AgentVersion != nil {
		in, out := &in.AgentVersion, &out.AgentVersion
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]NodesObservation, len(*in))
		copy(*out, *in)
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmObservation.
func (in *SwarmObservation) DeepCopy() *SwarmObservation {
	if in == nil {
		return nil
	}
	out := new(SwarmObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmParameters) DeepCopyInto(out *SwarmParameters) {
	*out = *in
	if in.CidrBlock != nil {
		in, out := &in.CidrBlock, &out.CidrBlock
		*out = new(string)
		**out = **in
	}
	if in.DiskCategory != nil {
		in, out := &in.DiskCategory, &out.DiskCategory
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.IsOutdated != nil {
		in, out := &in.IsOutdated, &out.IsOutdated
		*out = new(bool)
		**out = **in
	}
	if in.NeedSlb != nil {
		in, out := &in.NeedSlb, &out.NeedSlb
		*out = new(bool)
		**out = **in
	}
	if in.NodeNumber != nil {
		in, out := &in.NodeNumber, &out.NodeNumber
		*out = new(float64)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.ReleaseEIP != nil {
		in, out := &in.ReleaseEIP, &out.ReleaseEIP
		*out = new(bool)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmParameters.
func (in *SwarmParameters) DeepCopy() *SwarmParameters {
	if in == nil {
		return nil
	}
	out := new(SwarmParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmSpec) DeepCopyInto(out *SwarmSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmSpec.
func (in *SwarmSpec) DeepCopy() *SwarmSpec {
	if in == nil {
		return nil
	}
	out := new(SwarmSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SwarmStatus) DeepCopyInto(out *SwarmStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SwarmStatus.
func (in *SwarmStatus) DeepCopy() *SwarmStatus {
	if in == nil {
		return nil
	}
	out := new(SwarmStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsObservation) DeepCopyInto(out *TaintsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsObservation.
func (in *TaintsObservation) DeepCopy() *TaintsObservation {
	if in == nil {
		return nil
	}
	out := new(TaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsParameters) DeepCopyInto(out *TaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsParameters.
func (in *TaintsParameters) DeepCopy() *TaintsParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerDataDisksObservation) DeepCopyInto(out *WorkerDataDisksObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerDataDisksObservation.
func (in *WorkerDataDisksObservation) DeepCopy() *WorkerDataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerDataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerDataDisksParameters) DeepCopyInto(out *WorkerDataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerDataDisksParameters.
func (in *WorkerDataDisksParameters) DeepCopy() *WorkerDataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerDataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerNodesObservation) DeepCopyInto(out *WorkerNodesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerNodesObservation.
func (in *WorkerNodesObservation) DeepCopy() *WorkerNodesObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerNodesParameters) DeepCopyInto(out *WorkerNodesParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerNodesParameters.
func (in *WorkerNodesParameters) DeepCopy() *WorkerNodesParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerNodesParameters)
	in.DeepCopyInto(out)
	return out
}
