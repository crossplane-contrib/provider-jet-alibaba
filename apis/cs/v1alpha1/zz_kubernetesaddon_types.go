/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubernetesAddonObservation struct {
	CanUpgrade *bool `json:"canUpgrade,omitempty" tf:"can_upgrade,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NextVersion *string `json:"nextVersion,omitempty" tf:"next_version,omitempty"`

	Required *bool `json:"required,omitempty" tf:"required,omitempty"`
}

type KubernetesAddonParameters struct {

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

// KubernetesAddonSpec defines the desired state of KubernetesAddon
type KubernetesAddonSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubernetesAddonParameters `json:"forProvider"`
}

// KubernetesAddonStatus defines the observed state of KubernetesAddon.
type KubernetesAddonStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubernetesAddonObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesAddon is the Schema for the KubernetesAddons API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type KubernetesAddon struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KubernetesAddonSpec   `json:"spec"`
	Status            KubernetesAddonStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesAddonList contains a list of KubernetesAddons
type KubernetesAddonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KubernetesAddon `json:"items"`
}

// Repository type metadata.
var (
	KubernetesAddon_Kind             = "KubernetesAddon"
	KubernetesAddon_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KubernetesAddon_Kind}.String()
	KubernetesAddon_KindAPIVersion   = KubernetesAddon_Kind + "." + CRDGroupVersion.String()
	KubernetesAddon_GroupVersionKind = CRDGroupVersion.WithKind(KubernetesAddon_Kind)
)

func init() {
	SchemeBuilder.Register(&KubernetesAddon{}, &KubernetesAddonList{})
}
