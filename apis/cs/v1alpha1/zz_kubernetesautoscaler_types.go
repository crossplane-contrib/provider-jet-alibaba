/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubernetesAutoscalerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KubernetesAutoscalerParameters struct {

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	CoolDownDuration *string `json:"coolDownDuration" tf:"cool_down_duration,omitempty"`

	// +kubebuilder:validation:Required
	DeferScaleInDuration *string `json:"deferScaleInDuration" tf:"defer_scale_in_duration,omitempty"`

	// +kubebuilder:validation:Optional
	Nodepools []NodepoolsParameters `json:"nodepools,omitempty" tf:"nodepools,omitempty"`

	// +kubebuilder:validation:Optional
	UseEcsRAMRoleToken *bool `json:"useEcsRamRoleToken,omitempty" tf:"use_ecs_ram_role_token,omitempty"`

	// +kubebuilder:validation:Required
	Utilization *string `json:"utilization" tf:"utilization,omitempty"`
}

type NodepoolsObservation struct {
}

type NodepoolsParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Labels *string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Taints *string `json:"taints,omitempty" tf:"taints,omitempty"`
}

// KubernetesAutoscalerSpec defines the desired state of KubernetesAutoscaler
type KubernetesAutoscalerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubernetesAutoscalerParameters `json:"forProvider"`
}

// KubernetesAutoscalerStatus defines the observed state of KubernetesAutoscaler.
type KubernetesAutoscalerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubernetesAutoscalerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesAutoscaler is the Schema for the KubernetesAutoscalers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type KubernetesAutoscaler struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KubernetesAutoscalerSpec   `json:"spec"`
	Status            KubernetesAutoscalerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesAutoscalerList contains a list of KubernetesAutoscalers
type KubernetesAutoscalerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KubernetesAutoscaler `json:"items"`
}

// Repository type metadata.
var (
	KubernetesAutoscaler_Kind             = "KubernetesAutoscaler"
	KubernetesAutoscaler_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KubernetesAutoscaler_Kind}.String()
	KubernetesAutoscaler_KindAPIVersion   = KubernetesAutoscaler_Kind + "." + CRDGroupVersion.String()
	KubernetesAutoscaler_GroupVersionKind = CRDGroupVersion.WithKind(KubernetesAutoscaler_Kind)
)

func init() {
	SchemeBuilder.Register(&KubernetesAutoscaler{}, &KubernetesAutoscalerList{})
}
