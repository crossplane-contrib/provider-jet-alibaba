/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubernetesPermissionsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KubernetesPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// +kubebuilder:validation:Required
	UID *string `json:"uid" tf:"uid,omitempty"`
}

type PermissionsObservation struct {
}

type PermissionsParameters struct {

	// +kubebuilder:validation:Required
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// +kubebuilder:validation:Optional
	IsCustom *bool `json:"isCustom,omitempty" tf:"is_custom,omitempty"`

	// +kubebuilder:validation:Optional
	IsRAMRole *bool `json:"isRamRole,omitempty" tf:"is_ram_role,omitempty"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleType *string `json:"roleType" tf:"role_type,omitempty"`
}

// KubernetesPermissionsSpec defines the desired state of KubernetesPermissions
type KubernetesPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubernetesPermissionsParameters `json:"forProvider"`
}

// KubernetesPermissionsStatus defines the observed state of KubernetesPermissions.
type KubernetesPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubernetesPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesPermissions is the Schema for the KubernetesPermissionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type KubernetesPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KubernetesPermissionsSpec   `json:"spec"`
	Status            KubernetesPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesPermissionsList contains a list of KubernetesPermissionss
type KubernetesPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KubernetesPermissions `json:"items"`
}

// Repository type metadata.
var (
	KubernetesPermissions_Kind             = "KubernetesPermissions"
	KubernetesPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KubernetesPermissions_Kind}.String()
	KubernetesPermissions_KindAPIVersion   = KubernetesPermissions_Kind + "." + CRDGroupVersion.String()
	KubernetesPermissions_GroupVersionKind = CRDGroupVersion.WithKind(KubernetesPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&KubernetesPermissions{}, &KubernetesPermissionsList{})
}
