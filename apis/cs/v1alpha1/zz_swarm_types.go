/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodesObservation struct {
}

type NodesParameters struct {

	// +kubebuilder:validation:Required
	EIP *string `json:"eip" tf:"eip,omitempty"`

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PrivateIP *string `json:"privateIp" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`
}

type SwarmObservation struct {
	AgentVersion *string `json:"agentVersion,omitempty" tf:"agent_version,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	SlbID *string `json:"slbId,omitempty" tf:"slb_id,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type SwarmParameters struct {

	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	DiskCategory *string `json:"diskCategory,omitempty" tf:"disk_category,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	IsOutdated *bool `json:"isOutdated,omitempty" tf:"is_outdated,omitempty"`

	// +kubebuilder:validation:Optional
	NeedSlb *bool `json:"needSlb,omitempty" tf:"need_slb,omitempty"`

	// +kubebuilder:validation:Optional
	NodeNumber *float64 `json:"nodeNumber,omitempty" tf:"node_number,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	ReleaseEIP *bool `json:"releaseEip,omitempty" tf:"release_eip,omitempty"`

	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`
}

// SwarmSpec defines the desired state of Swarm
type SwarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SwarmParameters `json:"forProvider"`
}

// SwarmStatus defines the observed state of Swarm.
type SwarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SwarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Swarm is the Schema for the Swarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Swarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SwarmSpec   `json:"spec"`
	Status            SwarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SwarmList contains a list of Swarms
type SwarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Swarm `json:"items"`
}

// Repository type metadata.
var (
	Swarm_Kind             = "Swarm"
	Swarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Swarm_Kind}.String()
	Swarm_KindAPIVersion   = Swarm_Kind + "." + CRDGroupVersion.String()
	Swarm_GroupVersionKind = CRDGroupVersion.WithKind(Swarm_Kind)
)

func init() {
	SchemeBuilder.Register(&Swarm{}, &SwarmList{})
}
