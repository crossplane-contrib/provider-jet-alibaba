/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WorksFolderObservation struct {
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WorksFolderParameters struct {

	// +kubebuilder:validation:Required
	FolderPath *string `json:"folderPath" tf:"folder_path,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIdentifier *string `json:"projectIdentifier,omitempty" tf:"project_identifier,omitempty"`
}

// WorksFolderSpec defines the desired state of WorksFolder
type WorksFolderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorksFolderParameters `json:"forProvider"`
}

// WorksFolderStatus defines the observed state of WorksFolder.
type WorksFolderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorksFolderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorksFolder is the Schema for the WorksFolders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type WorksFolder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorksFolderSpec   `json:"spec"`
	Status            WorksFolderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorksFolderList contains a list of WorksFolders
type WorksFolderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorksFolder `json:"items"`
}

// Repository type metadata.
var (
	WorksFolder_Kind             = "WorksFolder"
	WorksFolder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorksFolder_Kind}.String()
	WorksFolder_KindAPIVersion   = WorksFolder_Kind + "." + CRDGroupVersion.String()
	WorksFolder_GroupVersionKind = CRDGroupVersion.WithKind(WorksFolder_Kind)
)

func init() {
	SchemeBuilder.Register(&WorksFolder{}, &WorksFolderList{})
}
