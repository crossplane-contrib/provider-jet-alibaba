/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type GatewayGatewayParameters struct {

	// +kubebuilder:validation:Optional
	GatewayDesc *string `json:"gatewayDesc,omitempty" tf:"gateway_desc,omitempty"`

	// +kubebuilder:validation:Required
	GatewayName *string `json:"gatewayName" tf:"gateway_name,omitempty"`
}

// GatewayGatewaySpec defines the desired state of GatewayGateway
type GatewayGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayGatewayParameters `json:"forProvider"`
}

// GatewayGatewayStatus defines the observed state of GatewayGateway.
type GatewayGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayGateway is the Schema for the GatewayGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type GatewayGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayGatewaySpec   `json:"spec"`
	Status            GatewayGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayGatewayList contains a list of GatewayGateways
type GatewayGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayGateway `json:"items"`
}

// Repository type metadata.
var (
	GatewayGateway_Kind             = "GatewayGateway"
	GatewayGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayGateway_Kind}.String()
	GatewayGateway_KindAPIVersion   = GatewayGateway_Kind + "." + CRDGroupVersion.String()
	GatewayGateway_GroupVersionKind = CRDGroupVersion.WithKind(GatewayGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayGateway{}, &GatewayGatewayList{})
}
