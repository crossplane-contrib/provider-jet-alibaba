/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceObservation struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SSLStatus *string `json:"sslStatus,omitempty" tf:"ssl_status,omitempty"`
}

type InstanceParameters struct {

	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenewPeriod *float64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period,omitempty"`

	// +kubebuilder:validation:Optional
	AutoUpgradeMinorVersion *string `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version,omitempty"`

	// +kubebuilder:validation:Optional
	CAType *string `json:"caType,omitempty" tf:"ca_type,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCACert *string `json:"clientCaCert,omitempty" tf:"client_ca_cert,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCAEnabled *float64 `json:"clientCaEnabled,omitempty" tf:"client_ca_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCertRevocationList *string `json:"clientCertRevocationList,omitempty" tf:"client_cert_revocation_list,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCrlEnabled *float64 `json:"clientCrlEnabled,omitempty" tf:"client_crl_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionStringPrefix *string `json:"connectionStringPrefix,omitempty" tf:"connection_string_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceIPArrayAttribute *string `json:"dbInstanceIpArrayAttribute,omitempty" tf:"db_instance_ip_array_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceIPArrayName *string `json:"dbInstanceIpArrayName,omitempty" tf:"db_instance_ip_array_name,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceStorageType *string `json:"dbInstanceStorageType,omitempty" tf:"db_instance_storage_type,omitempty"`

	// +kubebuilder:validation:Optional
	DBTimeZone *string `json:"dbTimeZone,omitempty" tf:"db_time_zone,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// +kubebuilder:validation:Required
	Engine *string `json:"engine" tf:"engine,omitempty"`

	// +kubebuilder:validation:Required
	EngineVersion *string `json:"engineVersion" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	ForceRestart *bool `json:"forceRestart,omitempty" tf:"force_restart,omitempty"`

	// +kubebuilder:validation:Optional
	FreshWhiteListReadins *string `json:"freshWhiteListReadins,omitempty" tf:"fresh_white_list_readins,omitempty"`

	// +kubebuilder:validation:Optional
	HaConfig *string `json:"haConfig,omitempty" tf:"ha_config,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceChargeType *string `json:"instanceChargeType,omitempty" tf:"instance_charge_type,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// +kubebuilder:validation:Required
	InstanceStorage *float64 `json:"instanceStorage" tf:"instance_storage,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainTime *string `json:"maintainTime,omitempty" tf:"maintain_time,omitempty"`

	// +kubebuilder:validation:Optional
	ManualHaTime *string `json:"manualHaTime,omitempty" tf:"manual_ha_time,omitempty"`

	// +kubebuilder:validation:Optional
	ModifyMode *string `json:"modifyMode,omitempty" tf:"modify_mode,omitempty"`

	// +kubebuilder:validation:Optional
	MonitoringPeriod *float64 `json:"monitoringPeriod,omitempty" tf:"monitoring_period,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	PgHbaConf []PgHbaConfParameters `json:"pgHbaConf,omitempty" tf:"pg_hba_conf,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	ReleasedKeepPolicy *string `json:"releasedKeepPolicy,omitempty" tf:"released_keep_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationACL *string `json:"replicationAcl,omitempty" tf:"replication_acl,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SQLCollectorConfigValue *float64 `json:"sqlCollectorConfigValue,omitempty" tf:"sql_collector_config_value,omitempty"`

	// +kubebuilder:validation:Optional
	SQLCollectorStatus *string `json:"sqlCollectorStatus,omitempty" tf:"sql_collector_status,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAction *string `json:"sslAction,omitempty" tf:"ssl_action,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPMode *string `json:"securityIpMode,omitempty" tf:"security_ip_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPType *string `json:"securityIpType,omitempty" tf:"security_ip_type,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIps []*string `json:"securityIps,omitempty" tf:"security_ips,omitempty"`

	// +kubebuilder:validation:Optional
	ServerCert *string `json:"serverCert,omitempty" tf:"server_cert,omitempty"`

	// +kubebuilder:validation:Optional
	ServerKey *string `json:"serverKey,omitempty" tf:"server_key,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAutoScale *string `json:"storageAutoScale,omitempty" tf:"storage_auto_scale,omitempty"`

	// +kubebuilder:validation:Optional
	StorageThreshold *float64 `json:"storageThreshold,omitempty" tf:"storage_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	StorageUpperBound *float64 `json:"storageUpperBound,omitempty" tf:"storage_upper_bound,omitempty"`

	// +kubebuilder:validation:Optional
	SwitchTime *string `json:"switchTime,omitempty" tf:"switch_time,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TargetMinorVersion *string `json:"targetMinorVersion,omitempty" tf:"target_minor_version,omitempty"`

	// +kubebuilder:validation:Optional
	TdeStatus *string `json:"tdeStatus,omitempty" tf:"tde_status,omitempty"`

	// +kubebuilder:validation:Optional
	UpgradeDBInstanceKernelVersion *bool `json:"upgradeDbInstanceKernelVersion,omitempty" tf:"upgrade_db_instance_kernel_version,omitempty"`

	// +kubebuilder:validation:Optional
	UpgradeTime *string `json:"upgradeTime,omitempty" tf:"upgrade_time,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	WhitelistNetworkType *string `json:"whitelistNetworkType,omitempty" tf:"whitelist_network_type,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneIDSlaveA *string `json:"zoneIdSlaveA,omitempty" tf:"zone_id_slave_a,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneIDSlaveB *string `json:"zoneIdSlaveB,omitempty" tf:"zone_id_slave_b,omitempty"`
}

type ParametersObservation struct {
}

type ParametersParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type PgHbaConfObservation struct {
}

type PgHbaConfParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Required
	Database *string `json:"database" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`

	// +kubebuilder:validation:Required
	Method *string `json:"method" tf:"method,omitempty"`

	// +kubebuilder:validation:Optional
	Option *string `json:"option,omitempty" tf:"option,omitempty"`

	// +kubebuilder:validation:Required
	PriorityID *float64 `json:"priorityId" tf:"priority_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
