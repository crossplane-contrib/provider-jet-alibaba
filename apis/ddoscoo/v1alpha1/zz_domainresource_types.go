/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainResourceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DomainResourceParameters struct {

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPSExt *string `json:"httpsExt,omitempty" tf:"https_ext,omitempty"`

	// +kubebuilder:validation:Required
	InstanceIds []*string `json:"instanceIds" tf:"instance_ids,omitempty"`

	// +kubebuilder:validation:Required
	ProxyTypes []ProxyTypesParameters `json:"proxyTypes" tf:"proxy_types,omitempty"`

	// +kubebuilder:validation:Required
	RealServers []*string `json:"realServers" tf:"real_servers,omitempty"`

	// +kubebuilder:validation:Required
	RsType *float64 `json:"rsType" tf:"rs_type,omitempty"`
}

type ProxyTypesObservation struct {
}

type ProxyTypesParameters struct {

	// +kubebuilder:validation:Optional
	ProxyPorts []*float64 `json:"proxyPorts,omitempty" tf:"proxy_ports,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyType *string `json:"proxyType,omitempty" tf:"proxy_type,omitempty"`
}

// DomainResourceSpec defines the desired state of DomainResource
type DomainResourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainResourceParameters `json:"forProvider"`
}

// DomainResourceStatus defines the observed state of DomainResource.
type DomainResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainResource is the Schema for the DomainResources API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DomainResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainResourceSpec   `json:"spec"`
	Status            DomainResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainResourceList contains a list of DomainResources
type DomainResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainResource `json:"items"`
}

// Repository type metadata.
var (
	DomainResource_Kind             = "DomainResource"
	DomainResource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainResource_Kind}.String()
	DomainResource_KindAPIVersion   = DomainResource_Kind + "." + CRDGroupVersion.String()
	DomainResource_GroupVersionKind = CRDGroupVersion.WithKind(DomainResource_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainResource{}, &DomainResourceList{})
}
