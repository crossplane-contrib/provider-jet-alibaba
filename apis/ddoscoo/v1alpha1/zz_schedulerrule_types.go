/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RulesObservation struct {
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// +kubebuilder:validation:Optional
	ValueType *float64 `json:"valueType,omitempty" tf:"value_type,omitempty"`
}

type SchedulerRuleObservation struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SchedulerRuleParameters struct {

	// +kubebuilder:validation:Optional
	Param *string `json:"param,omitempty" tf:"param,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Required
	RuleName *string `json:"ruleName" tf:"rule_name,omitempty"`

	// +kubebuilder:validation:Required
	RuleType *float64 `json:"ruleType" tf:"rule_type,omitempty"`

	// +kubebuilder:validation:Required
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`
}

// SchedulerRuleSpec defines the desired state of SchedulerRule
type SchedulerRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SchedulerRuleParameters `json:"forProvider"`
}

// SchedulerRuleStatus defines the observed state of SchedulerRule.
type SchedulerRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SchedulerRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SchedulerRule is the Schema for the SchedulerRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SchedulerRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SchedulerRuleSpec   `json:"spec"`
	Status            SchedulerRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SchedulerRuleList contains a list of SchedulerRules
type SchedulerRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SchedulerRule `json:"items"`
}

// Repository type metadata.
var (
	SchedulerRule_Kind             = "SchedulerRule"
	SchedulerRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SchedulerRule_Kind}.String()
	SchedulerRule_KindAPIVersion   = SchedulerRule_Kind + "." + CRDGroupVersion.String()
	SchedulerRule_GroupVersionKind = CRDGroupVersion.WithKind(SchedulerRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SchedulerRule{}, &SchedulerRuleList{})
}
