/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MountPointObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MountPointID *string `json:"mountPointId,omitempty" tf:"mount_point_id,omitempty"`
}

type MountPointParameters struct {

	// +kubebuilder:validation:Required
	AccessGroupID *string `json:"accessGroupId" tf:"access_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemID *string `json:"fileSystemId" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Required
	NetworkType *string `json:"networkType" tf:"network_type,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`
}

// MountPointSpec defines the desired state of MountPoint
type MountPointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MountPointParameters `json:"forProvider"`
}

// MountPointStatus defines the observed state of MountPoint.
type MountPointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MountPointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MountPoint is the Schema for the MountPoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MountPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MountPointSpec   `json:"spec"`
	Status            MountPointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MountPointList contains a list of MountPoints
type MountPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MountPoint `json:"items"`
}

// Repository type metadata.
var (
	MountPoint_Kind             = "MountPoint"
	MountPoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MountPoint_Kind}.String()
	MountPoint_KindAPIVersion   = MountPoint_Kind + "." + CRDGroupVersion.String()
	MountPoint_GroupVersionKind = CRDGroupVersion.WithKind(MountPoint_Kind)
)

func init() {
	SchemeBuilder.Register(&MountPoint{}, &MountPointList{})
}
