/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MailDomainObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MailDomainParameters struct {

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`
}

// MailDomainSpec defines the desired state of MailDomain
type MailDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MailDomainParameters `json:"forProvider"`
}

// MailDomainStatus defines the observed state of MailDomain.
type MailDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MailDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MailDomain is the Schema for the MailDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MailDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MailDomainSpec   `json:"spec"`
	Status            MailDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MailDomainList contains a list of MailDomains
type MailDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MailDomain `json:"items"`
}

// Repository type metadata.
var (
	MailDomain_Kind             = "MailDomain"
	MailDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MailDomain_Kind}.String()
	MailDomain_KindAPIVersion   = MailDomain_Kind + "." + CRDGroupVersion.String()
	MailDomain_GroupVersionKind = CRDGroupVersion.WithKind(MailDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&MailDomain{}, &MailDomainList{})
}
