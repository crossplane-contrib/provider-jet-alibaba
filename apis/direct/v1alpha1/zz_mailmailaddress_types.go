/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MailMailAddressObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MailMailAddressParameters struct {

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	ReplyAddress *string `json:"replyAddress,omitempty" tf:"reply_address,omitempty"`

	// +kubebuilder:validation:Required
	Sendtype *string `json:"sendtype" tf:"sendtype,omitempty"`
}

// MailMailAddressSpec defines the desired state of MailMailAddress
type MailMailAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MailMailAddressParameters `json:"forProvider"`
}

// MailMailAddressStatus defines the observed state of MailMailAddress.
type MailMailAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MailMailAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MailMailAddress is the Schema for the MailMailAddresss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MailMailAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MailMailAddressSpec   `json:"spec"`
	Status            MailMailAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MailMailAddressList contains a list of MailMailAddresss
type MailMailAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MailMailAddress `json:"items"`
}

// Repository type metadata.
var (
	MailMailAddress_Kind             = "MailMailAddress"
	MailMailAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MailMailAddress_Kind}.String()
	MailMailAddress_KindAPIVersion   = MailMailAddress_Kind + "." + CRDGroupVersion.String()
	MailMailAddress_GroupVersionKind = CRDGroupVersion.WithKind(MailMailAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&MailMailAddress{}, &MailMailAddressList{})
}
