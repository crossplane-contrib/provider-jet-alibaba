/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MailTagObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MailTagParameters struct {

	// +kubebuilder:validation:Required
	TagName *string `json:"tagName" tf:"tag_name,omitempty"`
}

// MailTagSpec defines the desired state of MailTag
type MailTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MailTagParameters `json:"forProvider"`
}

// MailTagStatus defines the observed state of MailTag.
type MailTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MailTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MailTag is the Schema for the MailTags API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MailTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MailTagSpec   `json:"spec"`
	Status            MailTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MailTagList contains a list of MailTags
type MailTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MailTag `json:"items"`
}

// Repository type metadata.
var (
	MailTag_Kind             = "MailTag"
	MailTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MailTag_Kind}.String()
	MailTag_KindAPIVersion   = MailTag_Kind + "." + CRDGroupVersion.String()
	MailTag_GroupVersionKind = CRDGroupVersion.WithKind(MailTag_Kind)
)

func init() {
	SchemeBuilder.Register(&MailTag{}, &MailTagList{})
}
