/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnterpriseInstanceObservation struct {
	DbaNickName *string `json:"dbaNickName,omitempty" tf:"dba_nick_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type EnterpriseInstanceParameters struct {

	// +kubebuilder:validation:Optional
	DataLinkName *string `json:"dataLinkName,omitempty" tf:"data_link_name,omitempty"`

	// +kubebuilder:validation:Required
	DatabasePasswordSecretRef v1.SecretKeySelector `json:"databasePasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	DatabaseUser *string `json:"databaseUser" tf:"database_user,omitempty"`

	// +kubebuilder:validation:Optional
	DbaID *string `json:"dbaId,omitempty" tf:"dba_id,omitempty"`

	// +kubebuilder:validation:Required
	DbaUID *float64 `json:"dbaUid" tf:"dba_uid,omitempty"`

	// +kubebuilder:validation:Optional
	DdlOnline *float64 `json:"ddlOnline,omitempty" tf:"ddl_online,omitempty"`

	// +kubebuilder:validation:Optional
	EcsInstanceID *string `json:"ecsInstanceId,omitempty" tf:"ecs_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	EcsRegion *string `json:"ecsRegion,omitempty" tf:"ecs_region,omitempty"`

	// +kubebuilder:validation:Required
	EnvType *string `json:"envType" tf:"env_type,omitempty"`

	// +kubebuilder:validation:Required
	ExportTimeout *float64 `json:"exportTimeout" tf:"export_timeout,omitempty"`

	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceAlias *string `json:"instanceAlias,omitempty" tf:"instance_alias,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// +kubebuilder:validation:Required
	InstanceSource *string `json:"instanceSource" tf:"instance_source,omitempty"`

	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// +kubebuilder:validation:Required
	NetworkType *string `json:"networkType" tf:"network_type,omitempty"`

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	QueryTimeout *float64 `json:"queryTimeout" tf:"query_timeout,omitempty"`

	// +kubebuilder:validation:Required
	SafeRule *string `json:"safeRule" tf:"safe_rule,omitempty"`

	// +kubebuilder:validation:Optional
	SafeRuleID *string `json:"safeRuleId,omitempty" tf:"safe_rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	Sid *string `json:"sid,omitempty" tf:"sid,omitempty"`

	// +kubebuilder:validation:Optional
	SkipTest *bool `json:"skipTest,omitempty" tf:"skip_test,omitempty"`

	// +kubebuilder:validation:Optional
	Tid *float64 `json:"tid,omitempty" tf:"tid,omitempty"`

	// +kubebuilder:validation:Optional
	UseDsql *float64 `json:"useDsql,omitempty" tf:"use_dsql,omitempty"`

	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// EnterpriseInstanceSpec defines the desired state of EnterpriseInstance
type EnterpriseInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnterpriseInstanceParameters `json:"forProvider"`
}

// EnterpriseInstanceStatus defines the observed state of EnterpriseInstance.
type EnterpriseInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnterpriseInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EnterpriseInstance is the Schema for the EnterpriseInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EnterpriseInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnterpriseInstanceSpec   `json:"spec"`
	Status            EnterpriseInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnterpriseInstanceList contains a list of EnterpriseInstances
type EnterpriseInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnterpriseInstance `json:"items"`
}

// Repository type metadata.
var (
	EnterpriseInstance_Kind             = "EnterpriseInstance"
	EnterpriseInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnterpriseInstance_Kind}.String()
	EnterpriseInstance_KindAPIVersion   = EnterpriseInstance_Kind + "." + CRDGroupVersion.String()
	EnterpriseInstance_GroupVersionKind = CRDGroupVersion.WithKind(EnterpriseInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&EnterpriseInstance{}, &EnterpriseInstanceList{})
}
