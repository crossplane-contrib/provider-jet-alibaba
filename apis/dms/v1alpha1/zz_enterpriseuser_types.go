/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnterpriseUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EnterpriseUserParameters struct {

	// +kubebuilder:validation:Optional
	MaxExecuteCount *float64 `json:"maxExecuteCount,omitempty" tf:"max_execute_count,omitempty"`

	// +kubebuilder:validation:Optional
	MaxResultCount *float64 `json:"maxResultCount,omitempty" tf:"max_result_count,omitempty"`

	// +kubebuilder:validation:Optional
	Mobile *string `json:"mobile,omitempty" tf:"mobile,omitempty"`

	// +kubebuilder:validation:Optional
	NickName *string `json:"nickName,omitempty" tf:"nick_name,omitempty"`

	// +kubebuilder:validation:Optional
	RoleNames []*string `json:"roleNames,omitempty" tf:"role_names,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tid *float64 `json:"tid,omitempty" tf:"tid,omitempty"`

	// +kubebuilder:validation:Required
	UID *string `json:"uid" tf:"uid,omitempty"`

	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// EnterpriseUserSpec defines the desired state of EnterpriseUser
type EnterpriseUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnterpriseUserParameters `json:"forProvider"`
}

// EnterpriseUserStatus defines the observed state of EnterpriseUser.
type EnterpriseUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnterpriseUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EnterpriseUser is the Schema for the EnterpriseUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EnterpriseUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnterpriseUserSpec   `json:"spec"`
	Status            EnterpriseUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnterpriseUserList contains a list of EnterpriseUsers
type EnterpriseUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnterpriseUser `json:"items"`
}

// Repository type metadata.
var (
	EnterpriseUser_Kind             = "EnterpriseUser"
	EnterpriseUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnterpriseUser_Kind}.String()
	EnterpriseUser_KindAPIVersion   = EnterpriseUser_Kind + "." + CRDGroupVersion.String()
	EnterpriseUser_GroupVersionKind = CRDGroupVersion.WithKind(EnterpriseUser_Kind)
)

func init() {
	SchemeBuilder.Register(&EnterpriseUser{}, &EnterpriseUserList{})
}
