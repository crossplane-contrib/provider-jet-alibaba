/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConsumerChannelObservation struct {
	ConsumerGroupID *string `json:"consumerGroupId,omitempty" tf:"consumer_group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConsumerChannelParameters struct {

	// +kubebuilder:validation:Required
	ConsumerGroupName *string `json:"consumerGroupName" tf:"consumer_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ConsumerGroupPassword *string `json:"consumerGroupPassword" tf:"consumer_group_password,omitempty"`

	// +kubebuilder:validation:Required
	ConsumerGroupUserName *string `json:"consumerGroupUserName" tf:"consumer_group_user_name,omitempty"`

	// +kubebuilder:validation:Required
	DtsInstanceID *string `json:"dtsInstanceId" tf:"dts_instance_id,omitempty"`
}

// ConsumerChannelSpec defines the desired state of ConsumerChannel
type ConsumerChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConsumerChannelParameters `json:"forProvider"`
}

// ConsumerChannelStatus defines the observed state of ConsumerChannel.
type ConsumerChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConsumerChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumerChannel is the Schema for the ConsumerChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ConsumerChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConsumerChannelSpec   `json:"spec"`
	Status            ConsumerChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConsumerChannelList contains a list of ConsumerChannels
type ConsumerChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConsumerChannel `json:"items"`
}

// Repository type metadata.
var (
	ConsumerChannel_Kind             = "ConsumerChannel"
	ConsumerChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConsumerChannel_Kind}.String()
	ConsumerChannel_KindAPIVersion   = ConsumerChannel_Kind + "." + CRDGroupVersion.String()
	ConsumerChannel_GroupVersionKind = CRDGroupVersion.WithKind(ConsumerChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&ConsumerChannel{}, &ConsumerChannelList{})
}
