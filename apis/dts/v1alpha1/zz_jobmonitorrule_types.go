/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type JobMonitorRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type JobMonitorRuleParameters struct {

	// +kubebuilder:validation:Optional
	DelayRuleTime *string `json:"delayRuleTime,omitempty" tf:"delay_rule_time,omitempty"`

	// +kubebuilder:validation:Required
	DtsJobID *string `json:"dtsJobId" tf:"dts_job_id,omitempty"`

	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// JobMonitorRuleSpec defines the desired state of JobMonitorRule
type JobMonitorRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     JobMonitorRuleParameters `json:"forProvider"`
}

// JobMonitorRuleStatus defines the observed state of JobMonitorRule.
type JobMonitorRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        JobMonitorRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// JobMonitorRule is the Schema for the JobMonitorRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type JobMonitorRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              JobMonitorRuleSpec   `json:"spec"`
	Status            JobMonitorRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// JobMonitorRuleList contains a list of JobMonitorRules
type JobMonitorRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []JobMonitorRule `json:"items"`
}

// Repository type metadata.
var (
	JobMonitorRule_Kind             = "JobMonitorRule"
	JobMonitorRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: JobMonitorRule_Kind}.String()
	JobMonitorRule_KindAPIVersion   = JobMonitorRule_Kind + "." + CRDGroupVersion.String()
	JobMonitorRule_GroupVersionKind = CRDGroupVersion.WithKind(JobMonitorRule_Kind)
)

func init() {
	SchemeBuilder.Register(&JobMonitorRule{}, &JobMonitorRuleList{})
}
