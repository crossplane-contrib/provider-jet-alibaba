/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionJobObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SubscriptionJobParameters struct {

	// +kubebuilder:validation:Optional
	Checkpoint *string `json:"checkpoint,omitempty" tf:"checkpoint,omitempty"`

	// +kubebuilder:validation:Optional
	ComputeUnit *float64 `json:"computeUnit,omitempty" tf:"compute_unit,omitempty"`

	// +kubebuilder:validation:Optional
	DBList *string `json:"dbList,omitempty" tf:"db_list,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseCount *float64 `json:"databaseCount,omitempty" tf:"database_count,omitempty"`

	// +kubebuilder:validation:Optional
	DelayNotice *bool `json:"delayNotice,omitempty" tf:"delay_notice,omitempty"`

	// +kubebuilder:validation:Optional
	DelayPhone *string `json:"delayPhone,omitempty" tf:"delay_phone,omitempty"`

	// +kubebuilder:validation:Optional
	DelayRuleTime *string `json:"delayRuleTime,omitempty" tf:"delay_rule_time,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointEngineName *string `json:"destinationEndpointEngineName,omitempty" tf:"destination_endpoint_engine_name,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationRegion *string `json:"destinationRegion,omitempty" tf:"destination_region,omitempty"`

	// +kubebuilder:validation:Optional
	DtsInstanceID *string `json:"dtsInstanceId,omitempty" tf:"dts_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	DtsJobName *string `json:"dtsJobName,omitempty" tf:"dts_job_name,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorNotice *bool `json:"errorNotice,omitempty" tf:"error_notice,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorPhone *string `json:"errorPhone,omitempty" tf:"error_phone,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceClass *string `json:"instanceClass,omitempty" tf:"instance_class,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentDuration *float64 `json:"paymentDuration,omitempty" tf:"payment_duration,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentDurationUnit *string `json:"paymentDurationUnit,omitempty" tf:"payment_duration_unit,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	Reserve *string `json:"reserve,omitempty" tf:"reserve,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointDatabaseName *string `json:"sourceEndpointDatabaseName,omitempty" tf:"source_endpoint_database_name,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointEngineName *string `json:"sourceEndpointEngineName,omitempty" tf:"source_endpoint_engine_name,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointIP *string `json:"sourceEndpointIp,omitempty" tf:"source_endpoint_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointInstanceID *string `json:"sourceEndpointInstanceId,omitempty" tf:"source_endpoint_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointInstanceType *string `json:"sourceEndpointInstanceType,omitempty" tf:"source_endpoint_instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointOracleSid *string `json:"sourceEndpointOracleSid,omitempty" tf:"source_endpoint_oracle_sid,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointOwnerID *string `json:"sourceEndpointOwnerId,omitempty" tf:"source_endpoint_owner_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointPassword *string `json:"sourceEndpointPassword,omitempty" tf:"source_endpoint_password,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointPort *string `json:"sourceEndpointPort,omitempty" tf:"source_endpoint_port,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointRegion *string `json:"sourceEndpointRegion,omitempty" tf:"source_endpoint_region,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointRole *string `json:"sourceEndpointRole,omitempty" tf:"source_endpoint_role,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointUserName *string `json:"sourceEndpointUserName,omitempty" tf:"source_endpoint_user_name,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionDataTypeDdl *bool `json:"subscriptionDataTypeDdl,omitempty" tf:"subscription_data_type_ddl,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionDataTypeDml *bool `json:"subscriptionDataTypeDml,omitempty" tf:"subscription_data_type_dml,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionInstanceNetworkType *string `json:"subscriptionInstanceNetworkType,omitempty" tf:"subscription_instance_network_type,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionInstanceVPCID *string `json:"subscriptionInstanceVpcId,omitempty" tf:"subscription_instance_vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionInstanceVswitchID *string `json:"subscriptionInstanceVswitchId,omitempty" tf:"subscription_instance_vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	SyncArchitecture *string `json:"syncArchitecture,omitempty" tf:"sync_architecture,omitempty"`

	// +kubebuilder:validation:Optional
	SynchronizationDirection *string `json:"synchronizationDirection,omitempty" tf:"synchronization_direction,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SubscriptionJobSpec defines the desired state of SubscriptionJob
type SubscriptionJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionJobParameters `json:"forProvider"`
}

// SubscriptionJobStatus defines the observed state of SubscriptionJob.
type SubscriptionJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionJob is the Schema for the SubscriptionJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SubscriptionJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubscriptionJobSpec   `json:"spec"`
	Status            SubscriptionJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionJobList contains a list of SubscriptionJobs
type SubscriptionJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionJob `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionJob_Kind             = "SubscriptionJob"
	SubscriptionJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubscriptionJob_Kind}.String()
	SubscriptionJob_KindAPIVersion   = SubscriptionJob_Kind + "." + CRDGroupVersion.String()
	SubscriptionJob_GroupVersionKind = CRDGroupVersion.WithKind(SubscriptionJob_Kind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionJob{}, &SubscriptionJobList{})
}
