/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SynchronizationJobObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SynchronizationJobParameters struct {

	// +kubebuilder:validation:Optional
	Checkpoint *string `json:"checkpoint,omitempty" tf:"checkpoint,omitempty"`

	// +kubebuilder:validation:Required
	DBList *string `json:"dbList" tf:"db_list,omitempty"`

	// +kubebuilder:validation:Required
	DataInitialization *bool `json:"dataInitialization" tf:"data_initialization,omitempty"`

	// +kubebuilder:validation:Required
	DataSynchronization *bool `json:"dataSynchronization" tf:"data_synchronization,omitempty"`

	// +kubebuilder:validation:Optional
	DelayNotice *bool `json:"delayNotice,omitempty" tf:"delay_notice,omitempty"`

	// +kubebuilder:validation:Optional
	DelayPhone *string `json:"delayPhone,omitempty" tf:"delay_phone,omitempty"`

	// +kubebuilder:validation:Optional
	DelayRuleTime *string `json:"delayRuleTime,omitempty" tf:"delay_rule_time,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointDatabaseName *string `json:"destinationEndpointDatabaseName,omitempty" tf:"destination_endpoint_database_name,omitempty"`

	// +kubebuilder:validation:Required
	DestinationEndpointEngineName *string `json:"destinationEndpointEngineName" tf:"destination_endpoint_engine_name,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointIP *string `json:"destinationEndpointIp,omitempty" tf:"destination_endpoint_ip,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointInstanceID *string `json:"destinationEndpointInstanceId,omitempty" tf:"destination_endpoint_instance_id,omitempty"`

	// +kubebuilder:validation:Required
	DestinationEndpointInstanceType *string `json:"destinationEndpointInstanceType" tf:"destination_endpoint_instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointOracleSid *string `json:"destinationEndpointOracleSid,omitempty" tf:"destination_endpoint_oracle_sid,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointPassword *string `json:"destinationEndpointPassword,omitempty" tf:"destination_endpoint_password,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointPort *string `json:"destinationEndpointPort,omitempty" tf:"destination_endpoint_port,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointRegion *string `json:"destinationEndpointRegion,omitempty" tf:"destination_endpoint_region,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationEndpointUserName *string `json:"destinationEndpointUserName,omitempty" tf:"destination_endpoint_user_name,omitempty"`

	// +kubebuilder:validation:Required
	DtsInstanceID *string `json:"dtsInstanceId" tf:"dts_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	DtsJobName *string `json:"dtsJobName,omitempty" tf:"dts_job_name,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorNotice *bool `json:"errorNotice,omitempty" tf:"error_notice,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorPhone *string `json:"errorPhone,omitempty" tf:"error_phone,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceClass *string `json:"instanceClass,omitempty" tf:"instance_class,omitempty"`

	// +kubebuilder:validation:Optional
	Reserve *string `json:"reserve,omitempty" tf:"reserve,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointDatabaseName *string `json:"sourceEndpointDatabaseName,omitempty" tf:"source_endpoint_database_name,omitempty"`

	// +kubebuilder:validation:Required
	SourceEndpointEngineName *string `json:"sourceEndpointEngineName" tf:"source_endpoint_engine_name,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointIP *string `json:"sourceEndpointIp,omitempty" tf:"source_endpoint_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointInstanceID *string `json:"sourceEndpointInstanceId,omitempty" tf:"source_endpoint_instance_id,omitempty"`

	// +kubebuilder:validation:Required
	SourceEndpointInstanceType *string `json:"sourceEndpointInstanceType" tf:"source_endpoint_instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointOracleSid *string `json:"sourceEndpointOracleSid,omitempty" tf:"source_endpoint_oracle_sid,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointOwnerID *string `json:"sourceEndpointOwnerId,omitempty" tf:"source_endpoint_owner_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointPassword *string `json:"sourceEndpointPassword,omitempty" tf:"source_endpoint_password,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointPort *string `json:"sourceEndpointPort,omitempty" tf:"source_endpoint_port,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointRegion *string `json:"sourceEndpointRegion,omitempty" tf:"source_endpoint_region,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointRole *string `json:"sourceEndpointRole,omitempty" tf:"source_endpoint_role,omitempty"`

	// +kubebuilder:validation:Optional
	SourceEndpointUserName *string `json:"sourceEndpointUserName,omitempty" tf:"source_endpoint_user_name,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	StructureInitialization *bool `json:"structureInitialization" tf:"structure_initialization,omitempty"`

	// +kubebuilder:validation:Optional
	SynchronizationDirection *string `json:"synchronizationDirection,omitempty" tf:"synchronization_direction,omitempty"`
}

// SynchronizationJobSpec defines the desired state of SynchronizationJob
type SynchronizationJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SynchronizationJobParameters `json:"forProvider"`
}

// SynchronizationJobStatus defines the observed state of SynchronizationJob.
type SynchronizationJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SynchronizationJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynchronizationJob is the Schema for the SynchronizationJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SynchronizationJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynchronizationJobSpec   `json:"spec"`
	Status            SynchronizationJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynchronizationJobList contains a list of SynchronizationJobs
type SynchronizationJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynchronizationJob `json:"items"`
}

// Repository type metadata.
var (
	SynchronizationJob_Kind             = "SynchronizationJob"
	SynchronizationJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SynchronizationJob_Kind}.String()
	SynchronizationJob_KindAPIVersion   = SynchronizationJob_Kind + "." + CRDGroupVersion.String()
	SynchronizationJob_GroupVersionKind = CRDGroupVersion.WithKind(SynchronizationJob_Kind)
)

func init() {
	SchemeBuilder.Register(&SynchronizationJob{}, &SynchronizationJobList{})
}
