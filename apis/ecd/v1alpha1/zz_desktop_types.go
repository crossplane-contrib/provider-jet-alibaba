/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DesktopObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DesktopParameters struct {

	// +kubebuilder:validation:Optional
	Amount *float64 `json:"amount,omitempty" tf:"amount,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPay *bool `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Required
	BundleID *string `json:"bundleId" tf:"bundle_id,omitempty"`

	// +kubebuilder:validation:Optional
	DesktopName *string `json:"desktopName,omitempty" tf:"desktop_name,omitempty"`

	// +kubebuilder:validation:Optional
	DesktopType *string `json:"desktopType,omitempty" tf:"desktop_type,omitempty"`

	// +kubebuilder:validation:Optional
	EndUserIds []*string `json:"endUserIds,omitempty" tf:"end_user_ids,omitempty"`

	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// +kubebuilder:validation:Required
	OfficeSiteID *string `json:"officeSiteId" tf:"office_site_id,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// +kubebuilder:validation:Required
	PolicyGroupID *string `json:"policyGroupId" tf:"policy_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	RootDiskSizeGib *float64 `json:"rootDiskSizeGib,omitempty" tf:"root_disk_size_gib,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	StoppedMode *string `json:"stoppedMode,omitempty" tf:"stopped_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserAssignMode *string `json:"userAssignMode,omitempty" tf:"user_assign_mode,omitempty"`

	// +kubebuilder:validation:Optional
	UserDiskSizeGib *float64 `json:"userDiskSizeGib,omitempty" tf:"user_disk_size_gib,omitempty"`
}

// DesktopSpec defines the desired state of Desktop
type DesktopSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DesktopParameters `json:"forProvider"`
}

// DesktopStatus defines the observed state of Desktop.
type DesktopStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DesktopObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Desktop is the Schema for the Desktops API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Desktop struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DesktopSpec   `json:"spec"`
	Status            DesktopStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopList contains a list of Desktops
type DesktopList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Desktop `json:"items"`
}

// Repository type metadata.
var (
	Desktop_Kind             = "Desktop"
	Desktop_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Desktop_Kind}.String()
	Desktop_KindAPIVersion   = Desktop_Kind + "." + CRDGroupVersion.String()
	Desktop_GroupVersionKind = CRDGroupVersion.WithKind(Desktop_Kind)
)

func init() {
	SchemeBuilder.Register(&Desktop{}, &DesktopList{})
}
