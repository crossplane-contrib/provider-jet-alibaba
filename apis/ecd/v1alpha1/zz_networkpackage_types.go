/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkPackageObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InternetChargeType *string `json:"internetChargeType,omitempty" tf:"internet_charge_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NetworkPackageParameters struct {

	// +kubebuilder:validation:Required
	Bandwidth *float64 `json:"bandwidth" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Required
	OfficeSiteID *string `json:"officeSiteId" tf:"office_site_id,omitempty"`
}

// NetworkPackageSpec defines the desired state of NetworkPackage
type NetworkPackageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkPackageParameters `json:"forProvider"`
}

// NetworkPackageStatus defines the observed state of NetworkPackage.
type NetworkPackageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkPackageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPackage is the Schema for the NetworkPackages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type NetworkPackage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkPackageSpec   `json:"spec"`
	Status            NetworkPackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPackageList contains a list of NetworkPackages
type NetworkPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkPackage `json:"items"`
}

// Repository type metadata.
var (
	NetworkPackage_Kind             = "NetworkPackage"
	NetworkPackage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkPackage_Kind}.String()
	NetworkPackage_KindAPIVersion   = NetworkPackage_Kind + "." + CRDGroupVersion.String()
	NetworkPackage_GroupVersionKind = CRDGroupVersion.WithKind(NetworkPackage_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkPackage{}, &NetworkPackageList{})
}
