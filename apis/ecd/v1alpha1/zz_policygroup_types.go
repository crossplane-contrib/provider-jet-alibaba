/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizeAccessPolicyRulesObservation struct {
}

type AuthorizeAccessPolicyRulesParameters struct {

	// +kubebuilder:validation:Optional
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type AuthorizeSecurityPolicyRulesObservation struct {
}

type AuthorizeSecurityPolicyRulesParameters struct {

	// +kubebuilder:validation:Optional
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	PortRange *string `json:"portRange,omitempty" tf:"port_range,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PolicyGroupParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizeAccessPolicyRules []AuthorizeAccessPolicyRulesParameters `json:"authorizeAccessPolicyRules,omitempty" tf:"authorize_access_policy_rules,omitempty"`

	// +kubebuilder:validation:Optional
	AuthorizeSecurityPolicyRules []AuthorizeSecurityPolicyRulesParameters `json:"authorizeSecurityPolicyRules,omitempty" tf:"authorize_security_policy_rules,omitempty"`

	// +kubebuilder:validation:Optional
	Clipboard *string `json:"clipboard,omitempty" tf:"clipboard,omitempty"`

	// +kubebuilder:validation:Optional
	DomainList *string `json:"domainList,omitempty" tf:"domain_list,omitempty"`

	// +kubebuilder:validation:Optional
	HTMLAccess *string `json:"htmlAccess,omitempty" tf:"html_access,omitempty"`

	// +kubebuilder:validation:Optional
	HTMLFileTransfer *string `json:"htmlFileTransfer,omitempty" tf:"html_file_transfer,omitempty"`

	// +kubebuilder:validation:Optional
	LocalDrive *string `json:"localDrive,omitempty" tf:"local_drive,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyGroupName *string `json:"policyGroupName,omitempty" tf:"policy_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	UsbRedirect *string `json:"usbRedirect,omitempty" tf:"usb_redirect,omitempty"`

	// +kubebuilder:validation:Optional
	VisualQuality *string `json:"visualQuality,omitempty" tf:"visual_quality,omitempty"`

	// +kubebuilder:validation:Optional
	Watermark *string `json:"watermark,omitempty" tf:"watermark,omitempty"`

	// +kubebuilder:validation:Optional
	WatermarkTransparency *string `json:"watermarkTransparency,omitempty" tf:"watermark_transparency,omitempty"`

	// +kubebuilder:validation:Optional
	WatermarkType *string `json:"watermarkType,omitempty" tf:"watermark_type,omitempty"`
}

// PolicyGroupSpec defines the desired state of PolicyGroup
type PolicyGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyGroupParameters `json:"forProvider"`
}

// PolicyGroupStatus defines the observed state of PolicyGroup.
type PolicyGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGroup is the Schema for the PolicyGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type PolicyGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyGroupSpec   `json:"spec"`
	Status            PolicyGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGroupList contains a list of PolicyGroups
type PolicyGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyGroup `json:"items"`
}

// Repository type metadata.
var (
	PolicyGroup_Kind             = "PolicyGroup"
	PolicyGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyGroup_Kind}.String()
	PolicyGroup_KindAPIVersion   = PolicyGroup_Kind + "." + CRDGroupVersion.String()
	PolicyGroup_GroupVersionKind = CRDGroupVersion.WithKind(PolicyGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyGroup{}, &PolicyGroupList{})
}
