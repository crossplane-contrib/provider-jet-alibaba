/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OpenapiImageCacheImageRegistryCredentialObservation struct {
}

type OpenapiImageCacheImageRegistryCredentialParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type OpenapiImageCacheObservation struct {
	ContainerGroupID *string `json:"containerGroupId,omitempty" tf:"container_group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type OpenapiImageCacheParameters struct {

	// +kubebuilder:validation:Optional
	EIPInstanceID *string `json:"eipInstanceId,omitempty" tf:"eip_instance_id,omitempty"`

	// +kubebuilder:validation:Required
	ImageCacheName *string `json:"imageCacheName" tf:"image_cache_name,omitempty"`

	// +kubebuilder:validation:Optional
	ImageCacheSize *float64 `json:"imageCacheSize,omitempty" tf:"image_cache_size,omitempty"`

	// +kubebuilder:validation:Optional
	ImageRegistryCredential []OpenapiImageCacheImageRegistryCredentialParameters `json:"imageRegistryCredential,omitempty" tf:"image_registry_credential,omitempty"`

	// +kubebuilder:validation:Required
	Images []*string `json:"images" tf:"images,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// OpenapiImageCacheSpec defines the desired state of OpenapiImageCache
type OpenapiImageCacheSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OpenapiImageCacheParameters `json:"forProvider"`
}

// OpenapiImageCacheStatus defines the observed state of OpenapiImageCache.
type OpenapiImageCacheStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OpenapiImageCacheObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpenapiImageCache is the Schema for the OpenapiImageCaches API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type OpenapiImageCache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpenapiImageCacheSpec   `json:"spec"`
	Status            OpenapiImageCacheStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpenapiImageCacheList contains a list of OpenapiImageCaches
type OpenapiImageCacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpenapiImageCache `json:"items"`
}

// Repository type metadata.
var (
	OpenapiImageCache_Kind             = "OpenapiImageCache"
	OpenapiImageCache_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OpenapiImageCache_Kind}.String()
	OpenapiImageCache_KindAPIVersion   = OpenapiImageCache_Kind + "." + CRDGroupVersion.String()
	OpenapiImageCache_GroupVersionKind = CRDGroupVersion.WithKind(OpenapiImageCache_Kind)
)

func init() {
	SchemeBuilder.Register(&OpenapiImageCache{}, &OpenapiImageCacheList{})
}
