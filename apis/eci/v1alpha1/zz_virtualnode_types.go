/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TaintsObservation struct {
}

type TaintsParameters struct {

	// +kubebuilder:validation:Optional
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VirtualNodeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VirtualNodeParameters struct {

	// +kubebuilder:validation:Optional
	EIPInstanceID *string `json:"eipInstanceId,omitempty" tf:"eip_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePublicNetwork *bool `json:"enablePublicNetwork,omitempty" tf:"enable_public_network,omitempty"`

	// +kubebuilder:validation:Required
	KubeConfig *string `json:"kubeConfig" tf:"kube_config,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNodeName *string `json:"virtualNodeName,omitempty" tf:"virtual_node_name,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// VirtualNodeSpec defines the desired state of VirtualNode
type VirtualNodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualNodeParameters `json:"forProvider"`
}

// VirtualNodeStatus defines the observed state of VirtualNode.
type VirtualNodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualNodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualNode is the Schema for the VirtualNodes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type VirtualNode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNodeSpec   `json:"spec"`
	Status            VirtualNodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualNodeList contains a list of VirtualNodes
type VirtualNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNode `json:"items"`
}

// Repository type metadata.
var (
	VirtualNode_Kind             = "VirtualNode"
	VirtualNode_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualNode_Kind}.String()
	VirtualNode_KindAPIVersion   = VirtualNode_Kind + "." + CRDGroupVersion.String()
	VirtualNode_GroupVersionKind = CRDGroupVersion.WithKind(VirtualNode_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualNode{}, &VirtualNodeList{})
}
