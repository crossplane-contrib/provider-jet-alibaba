/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoSnapshotPolicyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AutoSnapshotPolicyAttachmentParameters struct {

	// +kubebuilder:validation:Required
	AutoSnapshotPolicyID *string `json:"autoSnapshotPolicyId" tf:"auto_snapshot_policy_id,omitempty"`

	// +kubebuilder:validation:Required
	DiskID *string `json:"diskId" tf:"disk_id,omitempty"`
}

// AutoSnapshotPolicyAttachmentSpec defines the desired state of AutoSnapshotPolicyAttachment
type AutoSnapshotPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutoSnapshotPolicyAttachmentParameters `json:"forProvider"`
}

// AutoSnapshotPolicyAttachmentStatus defines the observed state of AutoSnapshotPolicyAttachment.
type AutoSnapshotPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutoSnapshotPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicyAttachment is the Schema for the AutoSnapshotPolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AutoSnapshotPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoSnapshotPolicyAttachmentSpec   `json:"spec"`
	Status            AutoSnapshotPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicyAttachmentList contains a list of AutoSnapshotPolicyAttachments
type AutoSnapshotPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoSnapshotPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	AutoSnapshotPolicyAttachment_Kind             = "AutoSnapshotPolicyAttachment"
	AutoSnapshotPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoSnapshotPolicyAttachment_Kind}.String()
	AutoSnapshotPolicyAttachment_KindAPIVersion   = AutoSnapshotPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	AutoSnapshotPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(AutoSnapshotPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&AutoSnapshotPolicyAttachment{}, &AutoSnapshotPolicyAttachmentList{})
}
