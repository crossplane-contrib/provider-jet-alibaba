/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CommandObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CommandParameters struct {

	// +kubebuilder:validation:Required
	CommandContent *string `json:"commandContent" tf:"command_content,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnableParameter *bool `json:"enableParameter,omitempty" tf:"enable_parameter,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

// CommandSpec defines the desired state of Command
type CommandSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CommandParameters `json:"forProvider"`
}

// CommandStatus defines the observed state of Command.
type CommandStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CommandObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Command is the Schema for the Commands API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Command struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CommandSpec   `json:"spec"`
	Status            CommandStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CommandList contains a list of Commands
type CommandList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Command `json:"items"`
}

// Repository type metadata.
var (
	Command_Kind             = "Command"
	Command_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Command_Kind}.String()
	Command_KindAPIVersion   = Command_Kind + "." + CRDGroupVersion.String()
	Command_GroupVersionKind = CRDGroupVersion.WithKind(Command_Kind)
)

func init() {
	SchemeBuilder.Register(&Command{}, &CommandList{})
}
