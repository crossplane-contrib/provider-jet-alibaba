/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedHostObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DedicatedHostParameters struct {

	// +kubebuilder:validation:Optional
	ActionOnMaintenance *string `json:"actionOnMaintenance,omitempty" tf:"action_on_maintenance,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPlacement *string `json:"autoPlacement,omitempty" tf:"auto_placement,omitempty"`

	// +kubebuilder:validation:Optional
	AutoReleaseTime *string `json:"autoReleaseTime,omitempty" tf:"auto_release_time,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenewPeriod *float64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period,omitempty"`

	// +kubebuilder:validation:Optional
	CPUOverCommitRatio *float64 `json:"cpuOverCommitRatio,omitempty" tf:"cpu_over_commit_ratio,omitempty"`

	// +kubebuilder:validation:Optional
	DedicatedHostClusterID *string `json:"dedicatedHostClusterId,omitempty" tf:"dedicated_host_cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	DedicatedHostName *string `json:"dedicatedHostName,omitempty" tf:"dedicated_host_name,omitempty"`

	// +kubebuilder:validation:Required
	DedicatedHostType *string `json:"dedicatedHostType" tf:"dedicated_host_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DetailFee *bool `json:"detailFee,omitempty" tf:"detail_fee,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiredTime *string `json:"expiredTime,omitempty" tf:"expired_time,omitempty"`

	// +kubebuilder:validation:Optional
	MinQuantity *float64 `json:"minQuantity,omitempty" tf:"min_quantity,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkAttributes []NetworkAttributesParameters `json:"networkAttributes,omitempty" tf:"network_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SaleCycle *string `json:"saleCycle,omitempty" tf:"sale_cycle,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type NetworkAttributesObservation struct {
}

type NetworkAttributesParameters struct {

	// +kubebuilder:validation:Optional
	SlbUDPTimeout *float64 `json:"slbUdpTimeout,omitempty" tf:"slb_udp_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	UDPTimeout *float64 `json:"udpTimeout,omitempty" tf:"udp_timeout,omitempty"`
}

// DedicatedHostSpec defines the desired state of DedicatedHost
type DedicatedHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedHostParameters `json:"forProvider"`
}

// DedicatedHostStatus defines the observed state of DedicatedHost.
type DedicatedHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHost is the Schema for the DedicatedHosts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DedicatedHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedHostSpec   `json:"spec"`
	Status            DedicatedHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostList contains a list of DedicatedHosts
type DedicatedHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedHost `json:"items"`
}

// Repository type metadata.
var (
	DedicatedHost_Kind             = "DedicatedHost"
	DedicatedHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedHost_Kind}.String()
	DedicatedHost_KindAPIVersion   = DedicatedHost_Kind + "." + CRDGroupVersion.String()
	DedicatedHost_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedHost_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedHost{}, &DedicatedHostList{})
}
