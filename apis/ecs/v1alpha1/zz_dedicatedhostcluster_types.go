/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedHostClusterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DedicatedHostClusterParameters struct {

	// +kubebuilder:validation:Optional
	DedicatedHostClusterName *string `json:"dedicatedHostClusterName,omitempty" tf:"dedicated_host_cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// DedicatedHostClusterSpec defines the desired state of DedicatedHostCluster
type DedicatedHostClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedHostClusterParameters `json:"forProvider"`
}

// DedicatedHostClusterStatus defines the observed state of DedicatedHostCluster.
type DedicatedHostClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedHostClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostCluster is the Schema for the DedicatedHostClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DedicatedHostCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedHostClusterSpec   `json:"spec"`
	Status            DedicatedHostClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostClusterList contains a list of DedicatedHostClusters
type DedicatedHostClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedHostCluster `json:"items"`
}

// Repository type metadata.
var (
	DedicatedHostCluster_Kind             = "DedicatedHostCluster"
	DedicatedHostCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedHostCluster_Kind}.String()
	DedicatedHostCluster_KindAPIVersion   = DedicatedHostCluster_Kind + "." + CRDGroupVersion.String()
	DedicatedHostCluster_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedHostCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedHostCluster{}, &DedicatedHostClusterList{})
}
