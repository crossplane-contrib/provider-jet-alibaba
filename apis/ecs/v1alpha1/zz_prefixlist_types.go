/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntryObservation struct {
}

type EntryParameters struct {

	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type PrefixListObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PrefixListParameters struct {

	// +kubebuilder:validation:Required
	AddressFamily *string `json:"addressFamily" tf:"address_family,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Entry []EntryParameters `json:"entry" tf:"entry,omitempty"`

	// +kubebuilder:validation:Required
	MaxEntries *float64 `json:"maxEntries" tf:"max_entries,omitempty"`

	// +kubebuilder:validation:Required
	PrefixListName *string `json:"prefixListName" tf:"prefix_list_name,omitempty"`
}

// PrefixListSpec defines the desired state of PrefixList
type PrefixListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrefixListParameters `json:"forProvider"`
}

// PrefixListStatus defines the observed state of PrefixList.
type PrefixListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrefixListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrefixList is the Schema for the PrefixLists API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type PrefixList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrefixListSpec   `json:"spec"`
	Status            PrefixListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrefixListList contains a list of PrefixLists
type PrefixListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrefixList `json:"items"`
}

// Repository type metadata.
var (
	PrefixList_Kind             = "PrefixList"
	PrefixList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrefixList_Kind}.String()
	PrefixList_KindAPIVersion   = PrefixList_Kind + "." + CRDGroupVersion.String()
	PrefixList_GroupVersionKind = CRDGroupVersion.WithKind(PrefixList_Kind)
)

func init() {
	SchemeBuilder.Register(&PrefixList{}, &PrefixListList{})
}
