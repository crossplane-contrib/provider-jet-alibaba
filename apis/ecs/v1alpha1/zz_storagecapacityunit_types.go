/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageCapacityUnitObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StorageCapacityUnitParameters struct {

	// +kubebuilder:validation:Required
	Capacity *float64 `json:"capacity" tf:"capacity,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	StorageCapacityUnitName *string `json:"storageCapacityUnitName,omitempty" tf:"storage_capacity_unit_name,omitempty"`
}

// StorageCapacityUnitSpec defines the desired state of StorageCapacityUnit
type StorageCapacityUnitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageCapacityUnitParameters `json:"forProvider"`
}

// StorageCapacityUnitStatus defines the observed state of StorageCapacityUnit.
type StorageCapacityUnitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageCapacityUnitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageCapacityUnit is the Schema for the StorageCapacityUnits API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StorageCapacityUnit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageCapacityUnitSpec   `json:"spec"`
	Status            StorageCapacityUnitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageCapacityUnitList contains a list of StorageCapacityUnits
type StorageCapacityUnitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageCapacityUnit `json:"items"`
}

// Repository type metadata.
var (
	StorageCapacityUnit_Kind             = "StorageCapacityUnit"
	StorageCapacityUnit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageCapacityUnit_Kind}.String()
	StorageCapacityUnit_KindAPIVersion   = StorageCapacityUnit_Kind + "." + CRDGroupVersion.String()
	StorageCapacityUnit_GroupVersionKind = CRDGroupVersion.WithKind(StorageCapacityUnit_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageCapacityUnit{}, &StorageCapacityUnitList{})
}
