/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationDeploymentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastPackageVersion *string `json:"lastPackageVersion,omitempty" tf:"last_package_version,omitempty"`
}

type ApplicationDeploymentParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	PackageVersion *string `json:"packageVersion,omitempty" tf:"package_version,omitempty"`

	// +kubebuilder:validation:Required
	WarURL *string `json:"warUrl" tf:"war_url,omitempty"`
}

// ApplicationDeploymentSpec defines the desired state of ApplicationDeployment
type ApplicationDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationDeploymentParameters `json:"forProvider"`
}

// ApplicationDeploymentStatus defines the observed state of ApplicationDeployment.
type ApplicationDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationDeployment is the Schema for the ApplicationDeployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ApplicationDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationDeploymentSpec   `json:"spec"`
	Status            ApplicationDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationDeploymentList contains a list of ApplicationDeployments
type ApplicationDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationDeployment `json:"items"`
}

// Repository type metadata.
var (
	ApplicationDeployment_Kind             = "ApplicationDeployment"
	ApplicationDeployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationDeployment_Kind}.String()
	ApplicationDeployment_KindAPIVersion   = ApplicationDeployment_Kind + "." + CRDGroupVersion.String()
	ApplicationDeployment_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationDeployment_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationDeployment{}, &ApplicationDeploymentList{})
}
