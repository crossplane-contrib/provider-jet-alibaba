/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeployGroupObservation struct {
	GroupType *float64 `json:"groupType,omitempty" tf:"group_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DeployGroupParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Required
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`
}

// DeployGroupSpec defines the desired state of DeployGroup
type DeployGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeployGroupParameters `json:"forProvider"`
}

// DeployGroupStatus defines the observed state of DeployGroup.
type DeployGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeployGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeployGroup is the Schema for the DeployGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DeployGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeployGroupSpec   `json:"spec"`
	Status            DeployGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeployGroupList contains a list of DeployGroups
type DeployGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeployGroup `json:"items"`
}

// Repository type metadata.
var (
	DeployGroup_Kind             = "DeployGroup"
	DeployGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeployGroup_Kind}.String()
	DeployGroup_KindAPIVersion   = DeployGroup_Kind + "." + CRDGroupVersion.String()
	DeployGroup_GroupVersionKind = CRDGroupVersion.WithKind(DeployGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&DeployGroup{}, &DeployGroupList{})
}
