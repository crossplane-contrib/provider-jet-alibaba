/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceClusterAttachmentObservation struct {
	ClusterMemberIds map[string]*string `json:"clusterMemberIds,omitempty" tf:"cluster_member_ids,omitempty"`

	EcuMap map[string]*string `json:"ecuMap,omitempty" tf:"ecu_map,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StatusMap map[string]*float64 `json:"statusMap,omitempty" tf:"status_map,omitempty"`
}

type InstanceClusterAttachmentParameters struct {

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	InstanceIds []*string `json:"instanceIds" tf:"instance_ids,omitempty"`
}

// InstanceClusterAttachmentSpec defines the desired state of InstanceClusterAttachment
type InstanceClusterAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceClusterAttachmentParameters `json:"forProvider"`
}

// InstanceClusterAttachmentStatus defines the observed state of InstanceClusterAttachment.
type InstanceClusterAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceClusterAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceClusterAttachment is the Schema for the InstanceClusterAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type InstanceClusterAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceClusterAttachmentSpec   `json:"spec"`
	Status            InstanceClusterAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceClusterAttachmentList contains a list of InstanceClusterAttachments
type InstanceClusterAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceClusterAttachment `json:"items"`
}

// Repository type metadata.
var (
	InstanceClusterAttachment_Kind             = "InstanceClusterAttachment"
	InstanceClusterAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceClusterAttachment_Kind}.String()
	InstanceClusterAttachment_KindAPIVersion   = InstanceClusterAttachment_Kind + "." + CRDGroupVersion.String()
	InstanceClusterAttachment_GroupVersionKind = CRDGroupVersion.WithKind(InstanceClusterAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceClusterAttachment{}, &InstanceClusterAttachmentList{})
}
