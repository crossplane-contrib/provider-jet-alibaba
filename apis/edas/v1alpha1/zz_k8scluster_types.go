/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type K8SClusterObservation struct {
	ClusterImportStatus *float64 `json:"clusterImportStatus,omitempty" tf:"cluster_import_status,omitempty"`

	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	ClusterType *float64 `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NetworkMode *float64 `json:"networkMode,omitempty" tf:"network_mode,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type K8SClusterParameters struct {

	// +kubebuilder:validation:Required
	CsClusterID *string `json:"csClusterId" tf:"cs_cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

// K8SClusterSpec defines the desired state of K8SCluster
type K8SClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     K8SClusterParameters `json:"forProvider"`
}

// K8SClusterStatus defines the observed state of K8SCluster.
type K8SClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        K8SClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// K8SCluster is the Schema for the K8SClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type K8SCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              K8SClusterSpec   `json:"spec"`
	Status            K8SClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// K8SClusterList contains a list of K8SClusters
type K8SClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []K8SCluster `json:"items"`
}

// Repository type metadata.
var (
	K8SCluster_Kind             = "K8SCluster"
	K8SCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: K8SCluster_Kind}.String()
	K8SCluster_KindAPIVersion   = K8SCluster_Kind + "." + CRDGroupVersion.String()
	K8SCluster_GroupVersionKind = CRDGroupVersion.WithKind(K8SCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&K8SCluster{}, &K8SClusterList{})
}
