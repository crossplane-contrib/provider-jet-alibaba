/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SlbAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SlbStatus *string `json:"slbStatus,omitempty" tf:"slb_status,omitempty"`

	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`
}

type SlbAttachmentParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerPort *float64 `json:"listenerPort,omitempty" tf:"listener_port,omitempty"`

	// +kubebuilder:validation:Required
	SlbID *string `json:"slbId" tf:"slb_id,omitempty"`

	// +kubebuilder:validation:Required
	SlbIP *string `json:"slbIp" tf:"slb_ip,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VserverGroupID *string `json:"vserverGroupId,omitempty" tf:"vserver_group_id,omitempty"`
}

// SlbAttachmentSpec defines the desired state of SlbAttachment
type SlbAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SlbAttachmentParameters `json:"forProvider"`
}

// SlbAttachmentStatus defines the observed state of SlbAttachment.
type SlbAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SlbAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SlbAttachment is the Schema for the SlbAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SlbAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SlbAttachmentSpec   `json:"spec"`
	Status            SlbAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SlbAttachmentList contains a list of SlbAttachments
type SlbAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SlbAttachment `json:"items"`
}

// Repository type metadata.
var (
	SlbAttachment_Kind             = "SlbAttachment"
	SlbAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SlbAttachment_Kind}.String()
	SlbAttachment_KindAPIVersion   = SlbAttachment_Kind + "." + CRDGroupVersion.String()
	SlbAttachment_GroupVersionKind = CRDGroupVersion.WithKind(SlbAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&SlbAttachment{}, &SlbAttachmentList{})
}
