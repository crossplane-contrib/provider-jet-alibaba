/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnycastEIPAddressObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AnycastEIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	AnycastEIPAddressName *string `json:"anycastEipAddressName,omitempty" tf:"anycast_eip_address_name,omitempty"`

	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	InternetChargeType *string `json:"internetChargeType,omitempty" tf:"internet_charge_type,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Required
	ServiceLocation *string `json:"serviceLocation" tf:"service_location,omitempty"`
}

// AnycastEIPAddressSpec defines the desired state of AnycastEIPAddress
type AnycastEIPAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AnycastEIPAddressParameters `json:"forProvider"`
}

// AnycastEIPAddressStatus defines the observed state of AnycastEIPAddress.
type AnycastEIPAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AnycastEIPAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AnycastEIPAddress is the Schema for the AnycastEIPAddresss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AnycastEIPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnycastEIPAddressSpec   `json:"spec"`
	Status            AnycastEIPAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AnycastEIPAddressList contains a list of AnycastEIPAddresss
type AnycastEIPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AnycastEIPAddress `json:"items"`
}

// Repository type metadata.
var (
	AnycastEIPAddress_Kind             = "AnycastEIPAddress"
	AnycastEIPAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AnycastEIPAddress_Kind}.String()
	AnycastEIPAddress_KindAPIVersion   = AnycastEIPAddress_Kind + "." + CRDGroupVersion.String()
	AnycastEIPAddress_GroupVersionKind = CRDGroupVersion.WithKind(AnycastEIPAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&AnycastEIPAddress{}, &AnycastEIPAddressList{})
}
