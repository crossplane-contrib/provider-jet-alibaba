/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type AlarmParameters struct {

	// +kubebuilder:validation:Required
	AlarmActions []*string `json:"alarmActions" tf:"alarm_actions,omitempty"`

	// +kubebuilder:validation:Optional
	CloudMonitorGroupID *float64 `json:"cloudMonitorGroupId,omitempty" tf:"cloud_monitor_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// +kubebuilder:validation:Optional
	EvaluationCount *float64 `json:"evaluationCount,omitempty" tf:"evaluation_count,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Optional
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	ScalingGroupID *string `json:"scalingGroupId" tf:"scaling_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Statistics *string `json:"statistics,omitempty" tf:"statistics,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *string `json:"threshold" tf:"threshold,omitempty"`
}

// AlarmSpec defines the desired state of Alarm
type AlarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmParameters `json:"forProvider"`
}

// AlarmStatus defines the observed state of Alarm.
type AlarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Alarm is the Schema for the Alarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Alarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmSpec   `json:"spec"`
	Status            AlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmList contains a list of Alarms
type AlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alarm `json:"items"`
}

// Repository type metadata.
var (
	Alarm_Kind             = "Alarm"
	Alarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Alarm_Kind}.String()
	Alarm_KindAPIVersion   = Alarm_Kind + "." + CRDGroupVersion.String()
	Alarm_GroupVersionKind = CRDGroupVersion.WithKind(Alarm_Kind)
)

func init() {
	SchemeBuilder.Register(&Alarm{}, &AlarmList{})
}
