/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScalingGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ScalingGroupParameters struct {

	// +kubebuilder:validation:Optional
	DBInstanceIds []*string `json:"dbInstanceIds,omitempty" tf:"db_instance_ids,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultCooldown *float64 `json:"defaultCooldown,omitempty" tf:"default_cooldown,omitempty"`

	// +kubebuilder:validation:Optional
	DesiredCapacity *float64 `json:"desiredCapacity,omitempty" tf:"desired_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	GroupDeletionProtection *bool `json:"groupDeletionProtection,omitempty" tf:"group_deletion_protection,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchTemplateID *string `json:"launchTemplateId,omitempty" tf:"launch_template_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadbalancerIds []*string `json:"loadbalancerIds,omitempty" tf:"loadbalancer_ids,omitempty"`

	// +kubebuilder:validation:Required
	MaxSize *float64 `json:"maxSize" tf:"max_size,omitempty"`

	// +kubebuilder:validation:Required
	MinSize *float64 `json:"minSize" tf:"min_size,omitempty"`

	// +kubebuilder:validation:Optional
	MultiAzPolicy *string `json:"multiAzPolicy,omitempty" tf:"multi_az_policy,omitempty"`

	// +kubebuilder:validation:Optional
	OnDemandBaseCapacity *float64 `json:"onDemandBaseCapacity,omitempty" tf:"on_demand_base_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	OnDemandPercentageAboveBaseCapacity *float64 `json:"onDemandPercentageAboveBaseCapacity,omitempty" tf:"on_demand_percentage_above_base_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	RemovalPolicies []*string `json:"removalPolicies,omitempty" tf:"removal_policies,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingGroupName *string `json:"scalingGroupName,omitempty" tf:"scaling_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SpotInstancePools *float64 `json:"spotInstancePools,omitempty" tf:"spot_instance_pools,omitempty"`

	// +kubebuilder:validation:Optional
	SpotInstanceRemedy *bool `json:"spotInstanceRemedy,omitempty" tf:"spot_instance_remedy,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchIds []*string `json:"vswitchIds,omitempty" tf:"vswitch_ids,omitempty"`
}

// ScalingGroupSpec defines the desired state of ScalingGroup
type ScalingGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScalingGroupParameters `json:"forProvider"`
}

// ScalingGroupStatus defines the observed state of ScalingGroup.
type ScalingGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScalingGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingGroup is the Schema for the ScalingGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ScalingGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScalingGroupSpec   `json:"spec"`
	Status            ScalingGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingGroupList contains a list of ScalingGroups
type ScalingGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScalingGroup `json:"items"`
}

// Repository type metadata.
var (
	ScalingGroup_Kind             = "ScalingGroup"
	ScalingGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScalingGroup_Kind}.String()
	ScalingGroup_KindAPIVersion   = ScalingGroup_Kind + "." + CRDGroupVersion.String()
	ScalingGroup_GroupVersionKind = CRDGroupVersion.WithKind(ScalingGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ScalingGroup{}, &ScalingGroupList{})
}
