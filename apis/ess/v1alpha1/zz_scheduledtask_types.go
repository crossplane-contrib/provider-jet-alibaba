/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScheduledTaskObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ScheduledTaskParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DesiredCapacity *float64 `json:"desiredCapacity,omitempty" tf:"desired_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchExpirationTime *float64 `json:"launchExpirationTime,omitempty" tf:"launch_expiration_time,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchTime *string `json:"launchTime,omitempty" tf:"launch_time,omitempty"`

	// +kubebuilder:validation:Optional
	MaxValue *float64 `json:"maxValue,omitempty" tf:"max_value,omitempty"`

	// +kubebuilder:validation:Optional
	MinValue *float64 `json:"minValue,omitempty" tf:"min_value,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceEndTime *string `json:"recurrenceEndTime,omitempty" tf:"recurrence_end_time,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceValue *string `json:"recurrenceValue,omitempty" tf:"recurrence_value,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingGroupID *string `json:"scalingGroupId,omitempty" tf:"scaling_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledAction *string `json:"scheduledAction,omitempty" tf:"scheduled_action,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledTaskName *string `json:"scheduledTaskName,omitempty" tf:"scheduled_task_name,omitempty"`

	// +kubebuilder:validation:Optional
	TaskEnabled *bool `json:"taskEnabled,omitempty" tf:"task_enabled,omitempty"`
}

// ScheduledTaskSpec defines the desired state of ScheduledTask
type ScheduledTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScheduledTaskParameters `json:"forProvider"`
}

// ScheduledTaskStatus defines the observed state of ScheduledTask.
type ScheduledTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScheduledTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ScheduledTask is the Schema for the ScheduledTasks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ScheduledTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScheduledTaskSpec   `json:"spec"`
	Status            ScheduledTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScheduledTaskList contains a list of ScheduledTasks
type ScheduledTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScheduledTask `json:"items"`
}

// Repository type metadata.
var (
	ScheduledTask_Kind             = "ScheduledTask"
	ScheduledTask_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScheduledTask_Kind}.String()
	ScheduledTask_KindAPIVersion   = ScheduledTask_Kind + "." + CRDGroupVersion.String()
	ScheduledTask_GroupVersionKind = CRDGroupVersion.WithKind(ScheduledTask_Kind)
)

func init() {
	SchemeBuilder.Register(&ScheduledTask{}, &ScheduledTaskList{})
}
