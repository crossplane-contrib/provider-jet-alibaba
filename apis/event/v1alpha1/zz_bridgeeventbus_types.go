/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BridgeEventBusObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BridgeEventBusParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EventBusName *string `json:"eventBusName" tf:"event_bus_name,omitempty"`
}

// BridgeEventBusSpec defines the desired state of BridgeEventBus
type BridgeEventBusSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BridgeEventBusParameters `json:"forProvider"`
}

// BridgeEventBusStatus defines the observed state of BridgeEventBus.
type BridgeEventBusStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BridgeEventBusObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BridgeEventBus is the Schema for the BridgeEventBuss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BridgeEventBus struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BridgeEventBusSpec   `json:"spec"`
	Status            BridgeEventBusStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BridgeEventBusList contains a list of BridgeEventBuss
type BridgeEventBusList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BridgeEventBus `json:"items"`
}

// Repository type metadata.
var (
	BridgeEventBus_Kind             = "BridgeEventBus"
	BridgeEventBus_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BridgeEventBus_Kind}.String()
	BridgeEventBus_KindAPIVersion   = BridgeEventBus_Kind + "." + CRDGroupVersion.String()
	BridgeEventBus_GroupVersionKind = CRDGroupVersion.WithKind(BridgeEventBus_Kind)
)

func init() {
	SchemeBuilder.Register(&BridgeEventBus{}, &BridgeEventBusList{})
}
