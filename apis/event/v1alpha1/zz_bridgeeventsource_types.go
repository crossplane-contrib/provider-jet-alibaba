/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BridgeEventSourceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BridgeEventSourceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EventBusName *string `json:"eventBusName" tf:"event_bus_name,omitempty"`

	// +kubebuilder:validation:Required
	EventSourceName *string `json:"eventSourceName" tf:"event_source_name,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalSourceConfig map[string]*string `json:"externalSourceConfig,omitempty" tf:"external_source_config,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalSourceType *string `json:"externalSourceType,omitempty" tf:"external_source_type,omitempty"`

	// +kubebuilder:validation:Optional
	LinkedExternalSource *bool `json:"linkedExternalSource,omitempty" tf:"linked_external_source,omitempty"`
}

// BridgeEventSourceSpec defines the desired state of BridgeEventSource
type BridgeEventSourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BridgeEventSourceParameters `json:"forProvider"`
}

// BridgeEventSourceStatus defines the observed state of BridgeEventSource.
type BridgeEventSourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BridgeEventSourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BridgeEventSource is the Schema for the BridgeEventSources API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BridgeEventSource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BridgeEventSourceSpec   `json:"spec"`
	Status            BridgeEventSourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BridgeEventSourceList contains a list of BridgeEventSources
type BridgeEventSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BridgeEventSource `json:"items"`
}

// Repository type metadata.
var (
	BridgeEventSource_Kind             = "BridgeEventSource"
	BridgeEventSource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BridgeEventSource_Kind}.String()
	BridgeEventSource_KindAPIVersion   = BridgeEventSource_Kind + "." + CRDGroupVersion.String()
	BridgeEventSource_GroupVersionKind = CRDGroupVersion.WithKind(BridgeEventSource_Kind)
)

func init() {
	SchemeBuilder.Register(&BridgeEventSource{}, &BridgeEventSourceList{})
}
