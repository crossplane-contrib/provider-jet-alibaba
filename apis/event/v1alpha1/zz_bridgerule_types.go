/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BridgeRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BridgeRuleParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EventBusName *string `json:"eventBusName" tf:"event_bus_name,omitempty"`

	// +kubebuilder:validation:Required
	FilterPattern *string `json:"filterPattern" tf:"filter_pattern,omitempty"`

	// +kubebuilder:validation:Required
	RuleName *string `json:"ruleName" tf:"rule_name,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	Targets []TargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type ParamListObservation struct {
}

type ParamListParameters struct {

	// +kubebuilder:validation:Required
	Form *string `json:"form" tf:"form,omitempty"`

	// +kubebuilder:validation:Required
	ResourceKey *string `json:"resourceKey" tf:"resource_key,omitempty"`

	// +kubebuilder:validation:Optional
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetsObservation struct {
}

type TargetsParameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	ParamList []ParamListParameters `json:"paramList" tf:"param_list,omitempty"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// BridgeRuleSpec defines the desired state of BridgeRule
type BridgeRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BridgeRuleParameters `json:"forProvider"`
}

// BridgeRuleStatus defines the observed state of BridgeRule.
type BridgeRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BridgeRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BridgeRule is the Schema for the BridgeRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BridgeRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BridgeRuleSpec   `json:"spec"`
	Status            BridgeRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BridgeRuleList contains a list of BridgeRules
type BridgeRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BridgeRule `json:"items"`
}

// Repository type metadata.
var (
	BridgeRule_Kind             = "BridgeRule"
	BridgeRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BridgeRule_Kind}.String()
	BridgeRule_KindAPIVersion   = BridgeRule_Kind + "." + CRDGroupVersion.String()
	BridgeRule_GroupVersionKind = CRDGroupVersion.WithKind(BridgeRule_Kind)
)

func init() {
	SchemeBuilder.Register(&BridgeRule{}, &BridgeRuleList{})
}
