/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectVirtualBorderRouterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConnectVirtualBorderRouterParameters struct {

	// +kubebuilder:validation:Optional
	AssociatedPhysicalConnections *string `json:"associatedPhysicalConnections,omitempty" tf:"associated_physical_connections,omitempty"`

	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Optional
	CircuitCode *string `json:"circuitCode,omitempty" tf:"circuit_code,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DetectMultiplier *float64 `json:"detectMultiplier,omitempty" tf:"detect_multiplier,omitempty"`

	// +kubebuilder:validation:Optional
	EnableIPv6 *bool `json:"enableIpv6,omitempty" tf:"enable_ipv6,omitempty"`

	// +kubebuilder:validation:Required
	LocalGatewayIP *string `json:"localGatewayIp" tf:"local_gateway_ip,omitempty"`

	// +kubebuilder:validation:Optional
	LocalIPv6GatewayIP *string `json:"localIpv6GatewayIp,omitempty" tf:"local_ipv6_gateway_ip,omitempty"`

	// +kubebuilder:validation:Optional
	MinRxInterval *float64 `json:"minRxInterval,omitempty" tf:"min_rx_interval,omitempty"`

	// +kubebuilder:validation:Optional
	MinTxInterval *float64 `json:"minTxInterval,omitempty" tf:"min_tx_interval,omitempty"`

	// +kubebuilder:validation:Required
	PeerGatewayIP *string `json:"peerGatewayIp" tf:"peer_gateway_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PeerIPv6GatewayIP *string `json:"peerIpv6GatewayIp,omitempty" tf:"peer_ipv6_gateway_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PeeringIPv6SubnetMask *string `json:"peeringIpv6SubnetMask,omitempty" tf:"peering_ipv6_subnet_mask,omitempty"`

	// +kubebuilder:validation:Required
	PeeringSubnetMask *string `json:"peeringSubnetMask" tf:"peering_subnet_mask,omitempty"`

	// +kubebuilder:validation:Required
	PhysicalConnectionID *string `json:"physicalConnectionId" tf:"physical_connection_id,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	VbrOwnerID *string `json:"vbrOwnerId,omitempty" tf:"vbr_owner_id,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualBorderRouterName *string `json:"virtualBorderRouterName,omitempty" tf:"virtual_border_router_name,omitempty"`

	// +kubebuilder:validation:Required
	VlanID *float64 `json:"vlanId" tf:"vlan_id,omitempty"`
}

// ConnectVirtualBorderRouterSpec defines the desired state of ConnectVirtualBorderRouter
type ConnectVirtualBorderRouterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectVirtualBorderRouterParameters `json:"forProvider"`
}

// ConnectVirtualBorderRouterStatus defines the observed state of ConnectVirtualBorderRouter.
type ConnectVirtualBorderRouterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectVirtualBorderRouterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectVirtualBorderRouter is the Schema for the ConnectVirtualBorderRouters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ConnectVirtualBorderRouter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectVirtualBorderRouterSpec   `json:"spec"`
	Status            ConnectVirtualBorderRouterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectVirtualBorderRouterList contains a list of ConnectVirtualBorderRouters
type ConnectVirtualBorderRouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectVirtualBorderRouter `json:"items"`
}

// Repository type metadata.
var (
	ConnectVirtualBorderRouter_Kind             = "ConnectVirtualBorderRouter"
	ConnectVirtualBorderRouter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectVirtualBorderRouter_Kind}.String()
	ConnectVirtualBorderRouter_KindAPIVersion   = ConnectVirtualBorderRouter_Kind + "." + CRDGroupVersion.String()
	ConnectVirtualBorderRouter_GroupVersionKind = CRDGroupVersion.WithKind(ConnectVirtualBorderRouter_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectVirtualBorderRouter{}, &ConnectVirtualBorderRouterList{})
}
