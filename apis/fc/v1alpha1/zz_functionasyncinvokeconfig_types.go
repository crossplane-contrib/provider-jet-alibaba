/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DestinationConfigObservation struct {
}

type DestinationConfigParameters struct {

	// +kubebuilder:validation:Optional
	OnFailure []OnFailureParameters `json:"onFailure,omitempty" tf:"on_failure,omitempty"`

	// +kubebuilder:validation:Optional
	OnSuccess []OnSuccessParameters `json:"onSuccess,omitempty" tf:"on_success,omitempty"`
}

type FunctionAsyncInvokeConfigObservation struct {
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastModifiedTime *string `json:"lastModifiedTime,omitempty" tf:"last_modified_time,omitempty"`
}

type FunctionAsyncInvokeConfigParameters struct {

	// +kubebuilder:validation:Optional
	DestinationConfig []DestinationConfigParameters `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// +kubebuilder:validation:Required
	FunctionName *string `json:"functionName" tf:"function_name,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumEventAgeInSeconds *float64 `json:"maximumEventAgeInSeconds,omitempty" tf:"maximum_event_age_in_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumRetryAttempts *float64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts,omitempty"`

	// +kubebuilder:validation:Optional
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

type OnFailureObservation struct {
}

type OnFailureParameters struct {

	// +kubebuilder:validation:Required
	Destination *string `json:"destination" tf:"destination,omitempty"`
}

type OnSuccessObservation struct {
}

type OnSuccessParameters struct {

	// +kubebuilder:validation:Required
	Destination *string `json:"destination" tf:"destination,omitempty"`
}

// FunctionAsyncInvokeConfigSpec defines the desired state of FunctionAsyncInvokeConfig
type FunctionAsyncInvokeConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionAsyncInvokeConfigParameters `json:"forProvider"`
}

// FunctionAsyncInvokeConfigStatus defines the observed state of FunctionAsyncInvokeConfig.
type FunctionAsyncInvokeConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionAsyncInvokeConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionAsyncInvokeConfig is the Schema for the FunctionAsyncInvokeConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type FunctionAsyncInvokeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionAsyncInvokeConfigSpec   `json:"spec"`
	Status            FunctionAsyncInvokeConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionAsyncInvokeConfigList contains a list of FunctionAsyncInvokeConfigs
type FunctionAsyncInvokeConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FunctionAsyncInvokeConfig `json:"items"`
}

// Repository type metadata.
var (
	FunctionAsyncInvokeConfig_Kind             = "FunctionAsyncInvokeConfig"
	FunctionAsyncInvokeConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FunctionAsyncInvokeConfig_Kind}.String()
	FunctionAsyncInvokeConfig_KindAPIVersion   = FunctionAsyncInvokeConfig_Kind + "." + CRDGroupVersion.String()
	FunctionAsyncInvokeConfig_GroupVersionKind = CRDGroupVersion.WithKind(FunctionAsyncInvokeConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&FunctionAsyncInvokeConfig{}, &FunctionAsyncInvokeConfigList{})
}
