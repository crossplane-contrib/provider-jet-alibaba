/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthPackageObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BandwidthPackageParameters struct {

	// +kubebuilder:validation:Optional
	AutoPay *bool `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// +kubebuilder:validation:Optional
	AutoUseCoupon *bool `json:"autoUseCoupon,omitempty" tf:"auto_use_coupon,omitempty"`

	// +kubebuilder:validation:Required
	Bandwidth *float64 `json:"bandwidth" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Optional
	BandwidthPackageName *string `json:"bandwidthPackageName,omitempty" tf:"bandwidth_package_name,omitempty"`

	// +kubebuilder:validation:Optional
	BandwidthType *string `json:"bandwidthType,omitempty" tf:"bandwidth_type,omitempty"`

	// +kubebuilder:validation:Optional
	BillingType *string `json:"billingType,omitempty" tf:"billing_type,omitempty"`

	// +kubebuilder:validation:Optional
	CbnGeographicRegionIda *string `json:"cbnGeographicRegionIda,omitempty" tf:"cbn_geographic_region_ida,omitempty"`

	// +kubebuilder:validation:Optional
	CbnGeographicRegionIdb *string `json:"cbnGeographicRegionIdb,omitempty" tf:"cbn_geographic_region_idb,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	Ratio *float64 `json:"ratio,omitempty" tf:"ratio,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// BandwidthPackageSpec defines the desired state of BandwidthPackage
type BandwidthPackageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthPackageParameters `json:"forProvider"`
}

// BandwidthPackageStatus defines the observed state of BandwidthPackage.
type BandwidthPackageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthPackageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthPackage is the Schema for the BandwidthPackages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BandwidthPackage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BandwidthPackageSpec   `json:"spec"`
	Status            BandwidthPackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthPackageList contains a list of BandwidthPackages
type BandwidthPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthPackage `json:"items"`
}

// Repository type metadata.
var (
	BandwidthPackage_Kind             = "BandwidthPackage"
	BandwidthPackage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthPackage_Kind}.String()
	BandwidthPackage_KindAPIVersion   = BandwidthPackage_Kind + "." + CRDGroupVersion.String()
	BandwidthPackage_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthPackage_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthPackage{}, &BandwidthPackageList{})
}
