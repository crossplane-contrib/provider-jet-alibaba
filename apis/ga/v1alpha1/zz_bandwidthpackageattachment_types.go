/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthPackageAttachmentObservation struct {
	Accelerators []*string `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BandwidthPackageAttachmentParameters struct {

	// +kubebuilder:validation:Required
	AcceleratorID *string `json:"acceleratorId" tf:"accelerator_id,omitempty"`

	// +kubebuilder:validation:Required
	BandwidthPackageID *string `json:"bandwidthPackageId" tf:"bandwidth_package_id,omitempty"`
}

// BandwidthPackageAttachmentSpec defines the desired state of BandwidthPackageAttachment
type BandwidthPackageAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthPackageAttachmentParameters `json:"forProvider"`
}

// BandwidthPackageAttachmentStatus defines the observed state of BandwidthPackageAttachment.
type BandwidthPackageAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthPackageAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthPackageAttachment is the Schema for the BandwidthPackageAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BandwidthPackageAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BandwidthPackageAttachmentSpec   `json:"spec"`
	Status            BandwidthPackageAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthPackageAttachmentList contains a list of BandwidthPackageAttachments
type BandwidthPackageAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthPackageAttachment `json:"items"`
}

// Repository type metadata.
var (
	BandwidthPackageAttachment_Kind             = "BandwidthPackageAttachment"
	BandwidthPackageAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthPackageAttachment_Kind}.String()
	BandwidthPackageAttachment_KindAPIVersion   = BandwidthPackageAttachment_Kind + "." + CRDGroupVersion.String()
	BandwidthPackageAttachment_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthPackageAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthPackageAttachment{}, &BandwidthPackageAttachmentList{})
}
