/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointConfigurationsObservation struct {
}

type EndpointConfigurationsParameters struct {

	// +kubebuilder:validation:Optional
	EnableClientipPreservation *bool `json:"enableClientipPreservation,omitempty" tf:"enable_clientip_preservation,omitempty"`

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

type EndpointGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type EndpointGroupParameters struct {

	// +kubebuilder:validation:Required
	AcceleratorID *string `json:"acceleratorId" tf:"accelerator_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EndpointConfigurations []EndpointConfigurationsParameters `json:"endpointConfigurations" tf:"endpoint_configurations,omitempty"`

	// +kubebuilder:validation:Required
	EndpointGroupRegion *string `json:"endpointGroupRegion" tf:"endpoint_group_region,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointGroupType *string `json:"endpointGroupType,omitempty" tf:"endpoint_group_type,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointRequestProtocol *string `json:"endpointRequestProtocol,omitempty" tf:"endpoint_request_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckIntervalSeconds *float64 `json:"healthCheckIntervalSeconds,omitempty" tf:"health_check_interval_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckPort *float64 `json:"healthCheckPort,omitempty" tf:"health_check_port,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty" tf:"health_check_protocol,omitempty"`

	// +kubebuilder:validation:Required
	ListenerID *string `json:"listenerId" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	PortOverrides []PortOverridesParameters `json:"portOverrides,omitempty" tf:"port_overrides,omitempty"`

	// +kubebuilder:validation:Optional
	ThresholdCount *float64 `json:"thresholdCount,omitempty" tf:"threshold_count,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficPercentage *float64 `json:"trafficPercentage,omitempty" tf:"traffic_percentage,omitempty"`
}

type PortOverridesObservation struct {
}

type PortOverridesParameters struct {

	// +kubebuilder:validation:Optional
	EndpointPort *float64 `json:"endpointPort,omitempty" tf:"endpoint_port,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerPort *float64 `json:"listenerPort,omitempty" tf:"listener_port,omitempty"`
}

// EndpointGroupSpec defines the desired state of EndpointGroup
type EndpointGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointGroupParameters `json:"forProvider"`
}

// EndpointGroupStatus defines the observed state of EndpointGroup.
type EndpointGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointGroup is the Schema for the EndpointGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EndpointGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointGroupSpec   `json:"spec"`
	Status            EndpointGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointGroupList contains a list of EndpointGroups
type EndpointGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointGroup `json:"items"`
}

// Repository type metadata.
var (
	EndpointGroup_Kind             = "EndpointGroup"
	EndpointGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointGroup_Kind}.String()
	EndpointGroup_KindAPIVersion   = EndpointGroup_Kind + "." + CRDGroupVersion.String()
	EndpointGroup_GroupVersionKind = CRDGroupVersion.WithKind(EndpointGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointGroup{}, &EndpointGroupList{})
}
