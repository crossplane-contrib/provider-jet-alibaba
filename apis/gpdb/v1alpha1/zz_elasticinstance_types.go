/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ElasticInstanceObservation struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ElasticInstanceParameters struct {

	// +kubebuilder:validation:Optional
	DBInstanceDescription *string `json:"dbInstanceDescription,omitempty" tf:"db_instance_description,omitempty"`

	// +kubebuilder:validation:Required
	Engine *string `json:"engine" tf:"engine,omitempty"`

	// +kubebuilder:validation:Required
	EngineVersion *string `json:"engineVersion" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceNetworkType *string `json:"instanceNetworkType,omitempty" tf:"instance_network_type,omitempty"`

	// +kubebuilder:validation:Required
	InstanceSpec *string `json:"instanceSpec" tf:"instance_spec,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentDuration *float64 `json:"paymentDuration,omitempty" tf:"payment_duration,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentDurationUnit *string `json:"paymentDurationUnit,omitempty" tf:"payment_duration_unit,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPList []*string `json:"securityIpList,omitempty" tf:"security_ip_list,omitempty"`

	// +kubebuilder:validation:Required
	SegNodeNum *float64 `json:"segNodeNum" tf:"seg_node_num,omitempty"`

	// +kubebuilder:validation:Required
	SegStorageType *string `json:"segStorageType" tf:"seg_storage_type,omitempty"`

	// +kubebuilder:validation:Required
	StorageSize *float64 `json:"storageSize" tf:"storage_size,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ElasticInstanceSpec defines the desired state of ElasticInstance
type ElasticInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ElasticInstanceParameters `json:"forProvider"`
}

// ElasticInstanceStatus defines the observed state of ElasticInstance.
type ElasticInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ElasticInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticInstance is the Schema for the ElasticInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ElasticInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticInstanceSpec   `json:"spec"`
	Status            ElasticInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticInstanceList contains a list of ElasticInstances
type ElasticInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticInstance `json:"items"`
}

// Repository type metadata.
var (
	ElasticInstance_Kind             = "ElasticInstance"
	ElasticInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ElasticInstance_Kind}.String()
	ElasticInstance_KindAPIVersion   = ElasticInstance_Kind + "." + CRDGroupVersion.String()
	ElasticInstance_GroupVersionKind = CRDGroupVersion.WithKind(ElasticInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ElasticInstance{}, &ElasticInstanceList{})
}
