/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DBInstanceIPArrayObservation struct {
}

type DBInstanceIPArrayParameters struct {

	// +kubebuilder:validation:Optional
	DBInstanceIPArrayAttribute *string `json:"dbInstanceIpArrayAttribute,omitempty" tf:"db_instance_ip_array_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceIPArrayName *string `json:"dbInstanceIpArrayName,omitempty" tf:"db_instance_ip_array_name,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIps *string `json:"securityIps,omitempty" tf:"security_ips,omitempty"`
}

type DatabaseDBInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DatabaseDBInstanceParameters struct {

	// +kubebuilder:validation:Required
	DBInstanceCategory *string `json:"dbInstanceCategory" tf:"db_instance_category,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceDescription *string `json:"dbInstanceDescription,omitempty" tf:"db_instance_description,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceIPArray []DBInstanceIPArrayParameters `json:"dbInstanceIpArray,omitempty" tf:"db_instance_ip_array,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceNetworkType *string `json:"dbInstanceNetworkType" tf:"db_instance_network_type,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceStorageType *string `json:"dbInstanceStorageType" tf:"db_instance_storage_type,omitempty"`

	// +kubebuilder:validation:Required
	DBNodeClass *string `json:"dbNodeClass" tf:"db_node_class,omitempty"`

	// +kubebuilder:validation:Required
	DBNodeStorage *float64 `json:"dbNodeStorage" tf:"db_node_storage,omitempty"`

	// +kubebuilder:validation:Required
	DBVersion *string `json:"dbVersion" tf:"db_version,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`
}

// DatabaseDBInstanceSpec defines the desired state of DatabaseDBInstance
type DatabaseDBInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseDBInstanceParameters `json:"forProvider"`
}

// DatabaseDBInstanceStatus defines the observed state of DatabaseDBInstance.
type DatabaseDBInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseDBInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseDBInstance is the Schema for the DatabaseDBInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DatabaseDBInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseDBInstanceSpec   `json:"spec"`
	Status            DatabaseDBInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseDBInstanceList contains a list of DatabaseDBInstances
type DatabaseDBInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseDBInstance `json:"items"`
}

// Repository type metadata.
var (
	DatabaseDBInstance_Kind             = "DatabaseDBInstance"
	DatabaseDBInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseDBInstance_Kind}.String()
	DatabaseDBInstance_KindAPIVersion   = DatabaseDBInstance_Kind + "." + CRDGroupVersion.String()
	DatabaseDBInstance_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseDBInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseDBInstance{}, &DatabaseDBInstanceList{})
}
