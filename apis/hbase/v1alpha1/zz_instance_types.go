/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterInstanceQuantity *float64 `json:"masterInstanceQuantity,omitempty" tf:"master_instance_quantity,omitempty"`

	SlbConnAddrs []SlbConnAddrsObservation `json:"slbConnAddrs,omitempty" tf:"slb_conn_addrs,omitempty"`

	UIProxyConnAddrs []UIProxyConnAddrsObservation `json:"uiProxyConnAddrs,omitempty" tf:"ui_proxy_conn_addrs,omitempty"`

	ZkConnAddrs []ZkConnAddrsObservation `json:"zkConnAddrs,omitempty" tf:"zk_conn_addrs,omitempty"`
}

type InstanceParameters struct {

	// +kubebuilder:validation:Optional
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	ColdStorageSize *float64 `json:"coldStorageSize,omitempty" tf:"cold_storage_size,omitempty"`

	// +kubebuilder:validation:Optional
	CoreDiskSize *float64 `json:"coreDiskSize,omitempty" tf:"core_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	CoreDiskType *string `json:"coreDiskType,omitempty" tf:"core_disk_type,omitempty"`

	// +kubebuilder:validation:Optional
	CoreInstanceQuantity *float64 `json:"coreInstanceQuantity,omitempty" tf:"core_instance_quantity,omitempty"`

	// +kubebuilder:validation:Required
	CoreInstanceType *string `json:"coreInstanceType" tf:"core_instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// +kubebuilder:validation:Required
	EngineVersion *string `json:"engineVersion" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	IPWhite *string `json:"ipWhite,omitempty" tf:"ip_white,omitempty"`

	// +kubebuilder:validation:Optional
	ImmediateDeleteFlag *bool `json:"immediateDeleteFlag,omitempty" tf:"immediate_delete_flag,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainEndTime *string `json:"maintainEndTime,omitempty" tf:"maintain_end_time,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainStartTime *string `json:"maintainStartTime,omitempty" tf:"maintain_start_time,omitempty"`

	// +kubebuilder:validation:Required
	MasterInstanceType *string `json:"masterInstanceType" tf:"master_instance_type,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PayType *string `json:"payType,omitempty" tf:"pay_type,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type SlbConnAddrsObservation struct {
}

type SlbConnAddrsParameters struct {

	// +kubebuilder:validation:Required
	ConnAddr *string `json:"connAddr" tf:"conn_addr,omitempty"`

	// +kubebuilder:validation:Required
	ConnAddrPort *string `json:"connAddrPort" tf:"conn_addr_port,omitempty"`

	// +kubebuilder:validation:Required
	NetType *string `json:"netType" tf:"net_type,omitempty"`
}

type UIProxyConnAddrsObservation struct {
}

type UIProxyConnAddrsParameters struct {

	// +kubebuilder:validation:Required
	ConnAddr *string `json:"connAddr" tf:"conn_addr,omitempty"`

	// +kubebuilder:validation:Required
	ConnAddrPort *string `json:"connAddrPort" tf:"conn_addr_port,omitempty"`

	// +kubebuilder:validation:Required
	NetType *string `json:"netType" tf:"net_type,omitempty"`
}

type ZkConnAddrsObservation struct {
}

type ZkConnAddrsParameters struct {

	// +kubebuilder:validation:Required
	ConnAddr *string `json:"connAddr" tf:"conn_addr,omitempty"`

	// +kubebuilder:validation:Required
	ConnAddrPort *string `json:"connAddrPort" tf:"conn_addr_port,omitempty"`

	// +kubebuilder:validation:Required
	NetType *string `json:"netType" tf:"net_type,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
