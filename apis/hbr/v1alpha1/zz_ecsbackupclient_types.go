/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EcsBackupClientObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EcsBackupClientParameters struct {

	// +kubebuilder:validation:Optional
	DataNetworkType *string `json:"dataNetworkType,omitempty" tf:"data_network_type,omitempty"`

	// +kubebuilder:validation:Optional
	DataProxySetting *string `json:"dataProxySetting,omitempty" tf:"data_proxy_setting,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	MaxCPUCore *string `json:"maxCpuCore,omitempty" tf:"max_cpu_core,omitempty"`

	// +kubebuilder:validation:Optional
	MaxWorker *string `json:"maxWorker,omitempty" tf:"max_worker,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyHost *string `json:"proxyHost,omitempty" tf:"proxy_host,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyPassword *string `json:"proxyPassword,omitempty" tf:"proxy_password,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyPort *string `json:"proxyPort,omitempty" tf:"proxy_port,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyUser *string `json:"proxyUser,omitempty" tf:"proxy_user,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	UseHTTPS *bool `json:"useHttps,omitempty" tf:"use_https,omitempty"`
}

// EcsBackupClientSpec defines the desired state of EcsBackupClient
type EcsBackupClientSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EcsBackupClientParameters `json:"forProvider"`
}

// EcsBackupClientStatus defines the observed state of EcsBackupClient.
type EcsBackupClientStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EcsBackupClientObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsBackupClient is the Schema for the EcsBackupClients API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EcsBackupClient struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsBackupClientSpec   `json:"spec"`
	Status            EcsBackupClientStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsBackupClientList contains a list of EcsBackupClients
type EcsBackupClientList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsBackupClient `json:"items"`
}

// Repository type metadata.
var (
	EcsBackupClient_Kind             = "EcsBackupClient"
	EcsBackupClient_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EcsBackupClient_Kind}.String()
	EcsBackupClient_KindAPIVersion   = EcsBackupClient_Kind + "." + CRDGroupVersion.String()
	EcsBackupClient_GroupVersionKind = CRDGroupVersion.WithKind(EcsBackupClient_Kind)
)

func init() {
	SchemeBuilder.Register(&EcsBackupClient{}, &EcsBackupClientList{})
}
