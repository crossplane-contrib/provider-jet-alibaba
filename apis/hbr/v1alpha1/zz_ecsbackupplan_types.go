/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EcsBackupPlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EcsBackupPlanParameters struct {

	// +kubebuilder:validation:Required
	BackupType *string `json:"backupType" tf:"backup_type,omitempty"`

	// +kubebuilder:validation:Optional
	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Required
	EcsBackupPlanName *string `json:"ecsBackupPlanName" tf:"ecs_backup_plan_name,omitempty"`

	// +kubebuilder:validation:Optional
	Exclude *string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// +kubebuilder:validation:Optional
	Include *string `json:"include,omitempty" tf:"include,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	Options *string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	Path []*string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	Retention *string `json:"retention" tf:"retention,omitempty"`

	// +kubebuilder:validation:Required
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Optional
	SpeedLimit *string `json:"speedLimit,omitempty" tf:"speed_limit,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatePaths *bool `json:"updatePaths,omitempty" tf:"update_paths,omitempty"`

	// +kubebuilder:validation:Required
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

// EcsBackupPlanSpec defines the desired state of EcsBackupPlan
type EcsBackupPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EcsBackupPlanParameters `json:"forProvider"`
}

// EcsBackupPlanStatus defines the observed state of EcsBackupPlan.
type EcsBackupPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EcsBackupPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsBackupPlan is the Schema for the EcsBackupPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EcsBackupPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsBackupPlanSpec   `json:"spec"`
	Status            EcsBackupPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsBackupPlanList contains a list of EcsBackupPlans
type EcsBackupPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsBackupPlan `json:"items"`
}

// Repository type metadata.
var (
	EcsBackupPlan_Kind             = "EcsBackupPlan"
	EcsBackupPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EcsBackupPlan_Kind}.String()
	EcsBackupPlan_KindAPIVersion   = EcsBackupPlan_Kind + "." + CRDGroupVersion.String()
	EcsBackupPlan_GroupVersionKind = CRDGroupVersion.WithKind(EcsBackupPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&EcsBackupPlan{}, &EcsBackupPlanList{})
}
