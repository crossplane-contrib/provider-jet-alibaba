/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NasBackupPlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NasBackupPlanParameters struct {

	// +kubebuilder:validation:Required
	BackupType *string `json:"backupType" tf:"backup_type,omitempty"`

	// +kubebuilder:validation:Optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemID *string `json:"fileSystemId" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Required
	NasBackupPlanName *string `json:"nasBackupPlanName" tf:"nas_backup_plan_name,omitempty"`

	// +kubebuilder:validation:Optional
	Options *string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Required
	Path []*string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	Retention *string `json:"retention" tf:"retention,omitempty"`

	// +kubebuilder:validation:Required
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Required
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

// NasBackupPlanSpec defines the desired state of NasBackupPlan
type NasBackupPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NasBackupPlanParameters `json:"forProvider"`
}

// NasBackupPlanStatus defines the observed state of NasBackupPlan.
type NasBackupPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NasBackupPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NasBackupPlan is the Schema for the NasBackupPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type NasBackupPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NasBackupPlanSpec   `json:"spec"`
	Status            NasBackupPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NasBackupPlanList contains a list of NasBackupPlans
type NasBackupPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NasBackupPlan `json:"items"`
}

// Repository type metadata.
var (
	NasBackupPlan_Kind             = "NasBackupPlan"
	NasBackupPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NasBackupPlan_Kind}.String()
	NasBackupPlan_KindAPIVersion   = NasBackupPlan_Kind + "." + CRDGroupVersion.String()
	NasBackupPlan_GroupVersionKind = CRDGroupVersion.WithKind(NasBackupPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&NasBackupPlan{}, &NasBackupPlanList{})
}
