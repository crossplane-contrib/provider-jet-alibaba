/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OssBackupPlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OssBackupPlanParameters struct {

	// +kubebuilder:validation:Required
	BackupType *string `json:"backupType" tf:"backup_type,omitempty"`

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Required
	OssBackupPlanName *string `json:"ossBackupPlanName" tf:"oss_backup_plan_name,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Required
	Retention *string `json:"retention" tf:"retention,omitempty"`

	// +kubebuilder:validation:Required
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Required
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

// OssBackupPlanSpec defines the desired state of OssBackupPlan
type OssBackupPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OssBackupPlanParameters `json:"forProvider"`
}

// OssBackupPlanStatus defines the observed state of OssBackupPlan.
type OssBackupPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OssBackupPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OssBackupPlan is the Schema for the OssBackupPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type OssBackupPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OssBackupPlanSpec   `json:"spec"`
	Status            OssBackupPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OssBackupPlanList contains a list of OssBackupPlans
type OssBackupPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OssBackupPlan `json:"items"`
}

// Repository type metadata.
var (
	OssBackupPlan_Kind             = "OssBackupPlan"
	OssBackupPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OssBackupPlan_Kind}.String()
	OssBackupPlan_KindAPIVersion   = OssBackupPlan_Kind + "." + CRDGroupVersion.String()
	OssBackupPlan_GroupVersionKind = CRDGroupVersion.WithKind(OssBackupPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&OssBackupPlan{}, &OssBackupPlanList{})
}
