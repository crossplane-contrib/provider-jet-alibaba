/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicationVaultObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ReplicationVaultParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	ReplicationSourceRegionID *string `json:"replicationSourceRegionId" tf:"replication_source_region_id,omitempty"`

	// +kubebuilder:validation:Required
	ReplicationSourceVaultID *string `json:"replicationSourceVaultId" tf:"replication_source_vault_id,omitempty"`

	// +kubebuilder:validation:Required
	VaultName *string `json:"vaultName" tf:"vault_name,omitempty"`

	// +kubebuilder:validation:Optional
	VaultStorageClass *string `json:"vaultStorageClass,omitempty" tf:"vault_storage_class,omitempty"`
}

// ReplicationVaultSpec defines the desired state of ReplicationVault
type ReplicationVaultSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicationVaultParameters `json:"forProvider"`
}

// ReplicationVaultStatus defines the observed state of ReplicationVault.
type ReplicationVaultStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicationVaultObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationVault is the Schema for the ReplicationVaults API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ReplicationVault struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationVaultSpec   `json:"spec"`
	Status            ReplicationVaultStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationVaultList contains a list of ReplicationVaults
type ReplicationVaultList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationVault `json:"items"`
}

// Repository type metadata.
var (
	ReplicationVault_Kind             = "ReplicationVault"
	ReplicationVault_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReplicationVault_Kind}.String()
	ReplicationVault_KindAPIVersion   = ReplicationVault_Kind + "." + CRDGroupVersion.String()
	ReplicationVault_GroupVersionKind = CRDGroupVersion.WithKind(ReplicationVault_Kind)
)

func init() {
	SchemeBuilder.Register(&ReplicationVault{}, &ReplicationVaultList{})
}
