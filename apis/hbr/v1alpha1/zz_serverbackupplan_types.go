/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DetailObservation struct {
}

type DetailParameters struct {

	// +kubebuilder:validation:Required
	AppConsistent *bool `json:"appConsistent" tf:"app_consistent,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationRegionID *string `json:"destinationRegionId,omitempty" tf:"destination_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationRetention *float64 `json:"destinationRetention,omitempty" tf:"destination_retention,omitempty"`

	// +kubebuilder:validation:Optional
	DiskIDList []*string `json:"diskIdList,omitempty" tf:"disk_id_list,omitempty"`

	// +kubebuilder:validation:Optional
	DoCopy *bool `json:"doCopy,omitempty" tf:"do_copy,omitempty"`

	// +kubebuilder:validation:Optional
	EnableFsFreeze *bool `json:"enableFsFreeze,omitempty" tf:"enable_fs_freeze,omitempty"`

	// +kubebuilder:validation:Optional
	PostScriptPath *string `json:"postScriptPath,omitempty" tf:"post_script_path,omitempty"`

	// +kubebuilder:validation:Optional
	PreScriptPath *string `json:"preScriptPath,omitempty" tf:"pre_script_path,omitempty"`

	// +kubebuilder:validation:Required
	SnapshotGroup *bool `json:"snapshotGroup" tf:"snapshot_group,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInSeconds *float64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds,omitempty"`
}

type ServerBackupPlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServerBackupPlanParameters struct {

	// +kubebuilder:validation:Required
	Detail []DetailParameters `json:"detail" tf:"detail,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Required
	EcsServerBackupPlanName *string `json:"ecsServerBackupPlanName" tf:"ecs_server_backup_plan_name,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	Retention *float64 `json:"retention" tf:"retention,omitempty"`

	// +kubebuilder:validation:Required
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`
}

// ServerBackupPlanSpec defines the desired state of ServerBackupPlan
type ServerBackupPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerBackupPlanParameters `json:"forProvider"`
}

// ServerBackupPlanStatus defines the observed state of ServerBackupPlan.
type ServerBackupPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerBackupPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerBackupPlan is the Schema for the ServerBackupPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ServerBackupPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerBackupPlanSpec   `json:"spec"`
	Status            ServerBackupPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerBackupPlanList contains a list of ServerBackupPlans
type ServerBackupPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerBackupPlan `json:"items"`
}

// Repository type metadata.
var (
	ServerBackupPlan_Kind             = "ServerBackupPlan"
	ServerBackupPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerBackupPlan_Kind}.String()
	ServerBackupPlan_KindAPIVersion   = ServerBackupPlan_Kind + "." + CRDGroupVersion.String()
	ServerBackupPlan_GroupVersionKind = CRDGroupVersion.WithKind(ServerBackupPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerBackupPlan{}, &ServerBackupPlanList{})
}
