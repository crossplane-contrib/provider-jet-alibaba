/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CopyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CopyParameters struct {

	// +kubebuilder:validation:Optional
	DeleteAutoSnapshot *bool `json:"deleteAutoSnapshot,omitempty" tf:"delete_auto_snapshot,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Required
	SourceImageID *string `json:"sourceImageId" tf:"source_image_id,omitempty"`

	// +kubebuilder:validation:Required
	SourceRegionID *string `json:"sourceRegionId" tf:"source_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// CopySpec defines the desired state of Copy
type CopySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CopyParameters `json:"forProvider"`
}

// CopyStatus defines the observed state of Copy.
type CopyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CopyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Copy is the Schema for the Copys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Copy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CopySpec   `json:"spec"`
	Status            CopyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CopyList contains a list of Copys
type CopyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Copy `json:"items"`
}

// Repository type metadata.
var (
	Copy_Kind             = "Copy"
	Copy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Copy_Kind}.String()
	Copy_KindAPIVersion   = Copy_Kind + "." + CRDGroupVersion.String()
	Copy_GroupVersionKind = CRDGroupVersion.WithKind(Copy_Kind)
)

func init() {
	SchemeBuilder.Register(&Copy{}, &CopyList{})
}
