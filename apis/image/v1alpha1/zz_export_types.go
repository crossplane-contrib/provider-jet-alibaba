/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExportObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ExportParameters struct {

	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Required
	OssBucket *string `json:"ossBucket" tf:"oss_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	OssPrefix *string `json:"ossPrefix,omitempty" tf:"oss_prefix,omitempty"`
}

// ExportSpec defines the desired state of Export
type ExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExportParameters `json:"forProvider"`
}

// ExportStatus defines the observed state of Export.
type ExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Export is the Schema for the Exports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Export struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExportSpec   `json:"spec"`
	Status            ExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExportList contains a list of Exports
type ExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Export `json:"items"`
}

// Repository type metadata.
var (
	Export_Kind             = "Export"
	Export_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Export_Kind}.String()
	Export_KindAPIVersion   = Export_Kind + "." + CRDGroupVersion.String()
	Export_GroupVersionKind = CRDGroupVersion.WithKind(Export_Kind)
)

func init() {
	SchemeBuilder.Register(&Export{}, &ExportList{})
}
