/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskDeviceMappingObservation struct {
}

type DiskDeviceMappingParameters struct {

	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// +kubebuilder:validation:Optional
	DiskImageSize *float64 `json:"diskImageSize,omitempty" tf:"disk_image_size,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	OssBucket *string `json:"ossBucket,omitempty" tf:"oss_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	OssObject *string `json:"ossObject,omitempty" tf:"oss_object,omitempty"`
}

type ImportObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ImportParameters struct {

	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DiskDeviceMapping []DiskDeviceMappingParameters `json:"diskDeviceMapping" tf:"disk_device_mapping,omitempty"`

	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// +kubebuilder:validation:Optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type,omitempty"`

	// +kubebuilder:validation:Optional
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// +kubebuilder:validation:Optional
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`
}

// ImportSpec defines the desired state of Import
type ImportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImportParameters `json:"forProvider"`
}

// ImportStatus defines the observed state of Import.
type ImportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Import is the Schema for the Imports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Import struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImportSpec   `json:"spec"`
	Status            ImportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImportList contains a list of Imports
type ImportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Import `json:"items"`
}

// Repository type metadata.
var (
	Import_Kind             = "Import"
	Import_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Import_Kind}.String()
	Import_KindAPIVersion   = Import_Kind + "." + CRDGroupVersion.String()
	Import_GroupVersionKind = CRDGroupVersion.WithKind(Import_Kind)
)

func init() {
	SchemeBuilder.Register(&Import{}, &ImportList{})
}
