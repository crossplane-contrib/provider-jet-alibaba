/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppTemplateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AppTemplateParameters struct {

	// +kubebuilder:validation:Required
	AppTemplateName *string `json:"appTemplateName" tf:"app_template_name,omitempty"`

	// +kubebuilder:validation:Required
	ComponentList []*string `json:"componentList" tf:"component_list,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigList []ConfigListParameters `json:"configList,omitempty" tf:"config_list,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationMode *string `json:"integrationMode,omitempty" tf:"integration_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Scene *string `json:"scene,omitempty" tf:"scene,omitempty"`
}

type ConfigListObservation struct {
}

type ConfigListParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// AppTemplateSpec defines the desired state of AppTemplate
type AppTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppTemplateParameters `json:"forProvider"`
}

// AppTemplateStatus defines the observed state of AppTemplate.
type AppTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppTemplate is the Schema for the AppTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AppTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppTemplateSpec   `json:"spec"`
	Status            AppTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppTemplateList contains a list of AppTemplates
type AppTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppTemplate `json:"items"`
}

// Repository type metadata.
var (
	AppTemplate_Kind             = "AppTemplate"
	AppTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppTemplate_Kind}.String()
	AppTemplate_KindAPIVersion   = AppTemplate_Kind + "." + CRDGroupVersion.String()
	AppTemplate_GroupVersionKind = CRDGroupVersion.WithKind(AppTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&AppTemplate{}, &AppTemplateList{})
}
