/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DeviceGroupParameters struct {

	// +kubebuilder:validation:Optional
	GroupDesc *string `json:"groupDesc,omitempty" tf:"group_desc,omitempty"`

	// +kubebuilder:validation:Required
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`

	// +kubebuilder:validation:Optional
	IotInstanceID *string `json:"iotInstanceId,omitempty" tf:"iot_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	SuperGroupID *string `json:"superGroupId,omitempty" tf:"super_group_id,omitempty"`
}

// DeviceGroupSpec defines the desired state of DeviceGroup
type DeviceGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceGroupParameters `json:"forProvider"`
}

// DeviceGroupStatus defines the observed state of DeviceGroup.
type DeviceGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceGroup is the Schema for the DeviceGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DeviceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceGroupSpec   `json:"spec"`
	Status            DeviceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceGroupList contains a list of DeviceGroups
type DeviceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceGroup `json:"items"`
}

// Repository type metadata.
var (
	DeviceGroup_Kind             = "DeviceGroup"
	DeviceGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceGroup_Kind}.String()
	DeviceGroup_KindAPIVersion   = DeviceGroup_Kind + "." + CRDGroupVersion.String()
	DeviceGroup_GroupVersionKind = CRDGroupVersion.WithKind(DeviceGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceGroup{}, &DeviceGroupList{})
}
