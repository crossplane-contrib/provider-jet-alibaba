/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PairObservation struct {
	FingerPrint *string `json:"fingerPrint,omitempty" tf:"finger_print,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PairParameters struct {

	// +kubebuilder:validation:Optional
	KeyFile *string `json:"keyFile,omitempty" tf:"key_file,omitempty"`

	// +kubebuilder:validation:Optional
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyNamePrefix *string `json:"keyNamePrefix,omitempty" tf:"key_name_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	KeyPairName *string `json:"keyPairName,omitempty" tf:"key_pair_name,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PairSpec defines the desired state of Pair
type PairSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PairParameters `json:"forProvider"`
}

// PairStatus defines the observed state of Pair.
type PairStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PairObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Pair is the Schema for the Pairs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Pair struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PairSpec   `json:"spec"`
	Status            PairStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PairList contains a list of Pairs
type PairList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pair `json:"items"`
}

// Repository type metadata.
var (
	Pair_Kind             = "Pair"
	Pair_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pair_Kind}.String()
	Pair_KindAPIVersion   = Pair_Kind + "." + CRDGroupVersion.String()
	Pair_GroupVersionKind = CRDGroupVersion.WithKind(Pair_Kind)
)

func init() {
	SchemeBuilder.Register(&Pair{}, &PairList{})
}
