/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyVersionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KeyVersionID *string `json:"keyVersionId,omitempty" tf:"key_version_id,omitempty"`
}

type KeyVersionParameters struct {

	// +kubebuilder:validation:Required
	KeyID *string `json:"keyId" tf:"key_id,omitempty"`
}

// KeyVersionSpec defines the desired state of KeyVersion
type KeyVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyVersionParameters `json:"forProvider"`
}

// KeyVersionStatus defines the observed state of KeyVersion.
type KeyVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVersion is the Schema for the KeyVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type KeyVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVersionSpec   `json:"spec"`
	Status            KeyVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVersionList contains a list of KeyVersions
type KeyVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVersion `json:"items"`
}

// Repository type metadata.
var (
	KeyVersion_Kind             = "KeyVersion"
	KeyVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyVersion_Kind}.String()
	KeyVersion_KindAPIVersion   = KeyVersion_Kind + "." + CRDGroupVersion.String()
	KeyVersion_GroupVersionKind = CRDGroupVersion.WithKind(KeyVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyVersion{}, &KeyVersionList{})
}
