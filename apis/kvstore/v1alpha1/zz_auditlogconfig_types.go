/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditLogConfigObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AuditLogConfigParameters struct {

	// +kubebuilder:validation:Optional
	DBAudit *bool `json:"dbAudit,omitempty" tf:"db_audit,omitempty"`

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	Retention *float64 `json:"retention,omitempty" tf:"retention,omitempty"`
}

// AuditLogConfigSpec defines the desired state of AuditLogConfig
type AuditLogConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuditLogConfigParameters `json:"forProvider"`
}

// AuditLogConfigStatus defines the observed state of AuditLogConfig.
type AuditLogConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuditLogConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuditLogConfig is the Schema for the AuditLogConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AuditLogConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuditLogConfigSpec   `json:"spec"`
	Status            AuditLogConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuditLogConfigList contains a list of AuditLogConfigs
type AuditLogConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuditLogConfig `json:"items"`
}

// Repository type metadata.
var (
	AuditLogConfig_Kind             = "AuditLogConfig"
	AuditLogConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuditLogConfig_Kind}.String()
	AuditLogConfig_KindAPIVersion   = AuditLogConfig_Kind + "." + CRDGroupVersion.String()
	AuditLogConfig_GroupVersionKind = CRDGroupVersion.WithKind(AuditLogConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&AuditLogConfig{}, &AuditLogConfigList{})
}
