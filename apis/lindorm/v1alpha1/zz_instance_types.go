/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type InstanceParameters struct {

	// +kubebuilder:validation:Optional
	ColdStorage *float64 `json:"coldStorage,omitempty" tf:"cold_storage,omitempty"`

	// +kubebuilder:validation:Optional
	CoreNum *float64 `json:"coreNum,omitempty" tf:"core_num,omitempty"`

	// +kubebuilder:validation:Optional
	CoreSpec *string `json:"coreSpec,omitempty" tf:"core_spec,omitempty"`

	// +kubebuilder:validation:Optional
	DeletionProection *bool `json:"deletionProection,omitempty" tf:"deletion_proection,omitempty"`

	// +kubebuilder:validation:Required
	DiskCategory *string `json:"diskCategory" tf:"disk_category,omitempty"`

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	FileEngineNodeCount *float64 `json:"fileEngineNodeCount,omitempty" tf:"file_engine_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	FileEngineSpecification *string `json:"fileEngineSpecification,omitempty" tf:"file_engine_specification,omitempty"`

	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// +kubebuilder:validation:Optional
	IPWhiteList []*string `json:"ipWhiteList,omitempty" tf:"ip_white_list,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceStorage *string `json:"instanceStorage,omitempty" tf:"instance_storage,omitempty"`

	// +kubebuilder:validation:Optional
	LtsNodeCount *float64 `json:"ltsNodeCount,omitempty" tf:"lts_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	LtsNodeSpecification *string `json:"ltsNodeSpecification,omitempty" tf:"lts_node_specification,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	PhoenixNodeCount *float64 `json:"phoenixNodeCount,omitempty" tf:"phoenix_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	PhoenixNodeSpecification *string `json:"phoenixNodeSpecification,omitempty" tf:"phoenix_node_specification,omitempty"`

	// +kubebuilder:validation:Optional
	PricingCycle *string `json:"pricingCycle,omitempty" tf:"pricing_cycle,omitempty"`

	// +kubebuilder:validation:Optional
	SearchEngineNodeCount *float64 `json:"searchEngineNodeCount,omitempty" tf:"search_engine_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	SearchEngineSpecification *string `json:"searchEngineSpecification,omitempty" tf:"search_engine_specification,omitempty"`

	// +kubebuilder:validation:Optional
	TableEngineNodeCount *float64 `json:"tableEngineNodeCount,omitempty" tf:"table_engine_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	TableEngineSpecification *string `json:"tableEngineSpecification,omitempty" tf:"table_engine_specification,omitempty"`

	// +kubebuilder:validation:Optional
	TimeSeriesEngineNodeCount *float64 `json:"timeSeriesEngineNodeCount,omitempty" tf:"time_series_engine_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	TimeSeriresEngineSpecification *string `json:"timeSeriresEngineSpecification,omitempty" tf:"time_serires_engine_specification,omitempty"`

	// +kubebuilder:validation:Optional
	UpgradeType *string `json:"upgradeType,omitempty" tf:"upgrade_type,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec"`
	Status            InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
