/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EtlObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EtlParameters struct {

	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef *v1.SecretKeySelector `json:"accessKeyIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AccessKeySecretSecretRef *v1.SecretKeySelector `json:"accessKeySecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CreateTime *float64 `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	EtlName *string `json:"etlName" tf:"etl_name,omitempty"`

	// +kubebuilder:validation:Required
	EtlSinks []EtlSinksParameters `json:"etlSinks" tf:"etl_sinks,omitempty"`

	// +kubebuilder:validation:Optional
	EtlType *string `json:"etlType,omitempty" tf:"etl_type,omitempty"`

	// +kubebuilder:validation:Optional
	FromTime *float64 `json:"fromTime,omitempty" tf:"from_time,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptedAccessKeyID *string `json:"kmsEncryptedAccessKeyId,omitempty" tf:"kms_encrypted_access_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptedAccessKeySecret *string `json:"kmsEncryptedAccessKeySecret,omitempty" tf:"kms_encrypted_access_key_secret,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptionAccessKeyIDContext map[string]*string `json:"kmsEncryptionAccessKeyIdContext,omitempty" tf:"kms_encryption_access_key_id_context,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptionAccessKeySecretContext map[string]*string `json:"kmsEncryptionAccessKeySecretContext,omitempty" tf:"kms_encryption_access_key_secret_context,omitempty"`

	// +kubebuilder:validation:Optional
	LastModifiedTime *float64 `json:"lastModifiedTime,omitempty" tf:"last_modified_time,omitempty"`

	// +kubebuilder:validation:Required
	Logstore *string `json:"logstore" tf:"logstore,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	Project *string `json:"project" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Required
	Script *string `json:"script" tf:"script,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	ToTime *float64 `json:"toTime,omitempty" tf:"to_time,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type EtlSinksObservation struct {
}

type EtlSinksParameters struct {

	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef *v1.SecretKeySelector `json:"accessKeyIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AccessKeySecretSecretRef *v1.SecretKeySelector `json:"accessKeySecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptedAccessKeyID *string `json:"kmsEncryptedAccessKeyId,omitempty" tf:"kms_encrypted_access_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptedAccessKeySecret *string `json:"kmsEncryptedAccessKeySecret,omitempty" tf:"kms_encrypted_access_key_secret,omitempty"`

	// +kubebuilder:validation:Required
	Logstore *string `json:"logstore" tf:"logstore,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Project *string `json:"project" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// EtlSpec defines the desired state of Etl
type EtlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EtlParameters `json:"forProvider"`
}

// EtlStatus defines the observed state of Etl.
type EtlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EtlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Etl is the Schema for the Etls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Etl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EtlSpec   `json:"spec"`
	Status            EtlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EtlList contains a list of Etls
type EtlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Etl `json:"items"`
}

// Repository type metadata.
var (
	Etl_Kind             = "Etl"
	Etl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Etl_Kind}.String()
	Etl_KindAPIVersion   = Etl_Kind + "." + CRDGroupVersion.String()
	Etl_GroupVersionKind = CRDGroupVersion.WithKind(Etl_Kind)
)

func init() {
	SchemeBuilder.Register(&Etl{}, &EtlList{})
}
