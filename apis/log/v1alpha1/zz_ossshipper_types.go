/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OssShipperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OssShipperParameters struct {

	// +kubebuilder:validation:Required
	BufferInterval *float64 `json:"bufferInterval" tf:"buffer_interval,omitempty"`

	// +kubebuilder:validation:Required
	BufferSize *float64 `json:"bufferSize" tf:"buffer_size,omitempty"`

	// +kubebuilder:validation:Optional
	CompressType *string `json:"compressType,omitempty" tf:"compress_type,omitempty"`

	// +kubebuilder:validation:Optional
	CsvConfigColumns []*string `json:"csvConfigColumns,omitempty" tf:"csv_config_columns,omitempty"`

	// +kubebuilder:validation:Optional
	CsvConfigDelimiter *string `json:"csvConfigDelimiter,omitempty" tf:"csv_config_delimiter,omitempty"`

	// +kubebuilder:validation:Optional
	CsvConfigHeader *bool `json:"csvConfigHeader,omitempty" tf:"csv_config_header,omitempty"`

	// +kubebuilder:validation:Optional
	CsvConfigLinefeed *string `json:"csvConfigLinefeed,omitempty" tf:"csv_config_linefeed,omitempty"`

	// +kubebuilder:validation:Optional
	CsvConfigNullidentifier *string `json:"csvConfigNullidentifier,omitempty" tf:"csv_config_nullidentifier,omitempty"`

	// +kubebuilder:validation:Optional
	CsvConfigQuote *string `json:"csvConfigQuote,omitempty" tf:"csv_config_quote,omitempty"`

	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	JSONEnableTag *bool `json:"jsonEnableTag,omitempty" tf:"json_enable_tag,omitempty"`

	// +kubebuilder:validation:Required
	LogstoreName *string `json:"logstoreName" tf:"logstore_name,omitempty"`

	// +kubebuilder:validation:Required
	OssBucket *string `json:"ossBucket" tf:"oss_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	OssPrefix *string `json:"ossPrefix,omitempty" tf:"oss_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	ParquetConfig []ParquetConfigParameters `json:"parquetConfig,omitempty" tf:"parquet_config,omitempty"`

	// +kubebuilder:validation:Required
	PathFormat *string `json:"pathFormat" tf:"path_format,omitempty"`

	// +kubebuilder:validation:Required
	ProjectName *string `json:"projectName" tf:"project_name,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	ShipperName *string `json:"shipperName" tf:"shipper_name,omitempty"`
}

type ParquetConfigObservation struct {
}

type ParquetConfigParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// OssShipperSpec defines the desired state of OssShipper
type OssShipperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OssShipperParameters `json:"forProvider"`
}

// OssShipperStatus defines the observed state of OssShipper.
type OssShipperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OssShipperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OssShipper is the Schema for the OssShippers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type OssShipper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OssShipperSpec   `json:"spec"`
	Status            OssShipperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OssShipperList contains a list of OssShippers
type OssShipperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OssShipper `json:"items"`
}

// Repository type metadata.
var (
	OssShipper_Kind             = "OssShipper"
	OssShipper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OssShipper_Kind}.String()
	OssShipper_KindAPIVersion   = OssShipper_Kind + "." + CRDGroupVersion.String()
	OssShipper_GroupVersionKind = CRDGroupVersion.WithKind(OssShipper_Kind)
)

func init() {
	SchemeBuilder.Register(&OssShipper{}, &OssShipperList{})
}
