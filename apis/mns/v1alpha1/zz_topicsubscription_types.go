/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicSubscriptionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TopicSubscriptionParameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	FilterTag *string `json:"filterTag,omitempty" tf:"filter_tag,omitempty"`

	// +kubebuilder:validation:Optional
	NotifyContentFormat *string `json:"notifyContentFormat,omitempty" tf:"notify_content_format,omitempty"`

	// +kubebuilder:validation:Optional
	NotifyStrategy *string `json:"notifyStrategy,omitempty" tf:"notify_strategy,omitempty"`

	// +kubebuilder:validation:Required
	TopicName *string `json:"topicName" tf:"topic_name,omitempty"`
}

// TopicSubscriptionSpec defines the desired state of TopicSubscription
type TopicSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicSubscriptionParameters `json:"forProvider"`
}

// TopicSubscriptionStatus defines the observed state of TopicSubscription.
type TopicSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TopicSubscription is the Schema for the TopicSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TopicSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TopicSubscriptionSpec   `json:"spec"`
	Status            TopicSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicSubscriptionList contains a list of TopicSubscriptions
type TopicSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicSubscription `json:"items"`
}

// Repository type metadata.
var (
	TopicSubscription_Kind             = "TopicSubscription"
	TopicSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TopicSubscription_Kind}.String()
	TopicSubscription_KindAPIVersion   = TopicSubscription_Kind + "." + CRDGroupVersion.String()
	TopicSubscription_GroupVersionKind = CRDGroupVersion.WithKind(TopicSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&TopicSubscription{}, &TopicSubscriptionList{})
}
