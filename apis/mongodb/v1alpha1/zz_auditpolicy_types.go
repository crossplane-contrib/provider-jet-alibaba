/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AuditPolicyParameters struct {

	// +kubebuilder:validation:Required
	AuditStatus *string `json:"auditStatus" tf:"audit_status,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceID *string `json:"dbInstanceId" tf:"db_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	StoragePeriod *float64 `json:"storagePeriod,omitempty" tf:"storage_period,omitempty"`
}

// AuditPolicySpec defines the desired state of AuditPolicy
type AuditPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuditPolicyParameters `json:"forProvider"`
}

// AuditPolicyStatus defines the observed state of AuditPolicy.
type AuditPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuditPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuditPolicy is the Schema for the AuditPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AuditPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuditPolicySpec   `json:"spec"`
	Status            AuditPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuditPolicyList contains a list of AuditPolicys
type AuditPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuditPolicy `json:"items"`
}

// Repository type metadata.
var (
	AuditPolicy_Kind             = "AuditPolicy"
	AuditPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuditPolicy_Kind}.String()
	AuditPolicy_KindAPIVersion   = AuditPolicy_Kind + "." + CRDGroupVersion.String()
	AuditPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AuditPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AuditPolicy{}, &AuditPolicyList{})
}
