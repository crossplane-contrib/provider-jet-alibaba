/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityIPGroupsObservation struct {
}

type SecurityIPGroupsParameters struct {

	// +kubebuilder:validation:Optional
	SecurityIPGroupAttribute *string `json:"securityIpGroupAttribute,omitempty" tf:"security_ip_group_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPGroupName *string `json:"securityIpGroupName,omitempty" tf:"security_ip_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPList *string `json:"securityIpList,omitempty" tf:"security_ip_list,omitempty"`
}

type ServerlessInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ServerlessInstanceParameters struct {

	// +kubebuilder:validation:Required
	AccountPasswordSecretRef v1.SecretKeySelector `json:"accountPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Required
	CapacityUnit *float64 `json:"capacityUnit" tf:"capacity_unit,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceDescription *string `json:"dbInstanceDescription,omitempty" tf:"db_instance_description,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceStorage *float64 `json:"dbInstanceStorage" tf:"db_instance_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// +kubebuilder:validation:Required
	EngineVersion *string `json:"engineVersion" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainEndTime *string `json:"maintainEndTime,omitempty" tf:"maintain_end_time,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainStartTime *string `json:"maintainStartTime,omitempty" tf:"maintain_start_time,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	PeriodPriceType *string `json:"periodPriceType,omitempty" tf:"period_price_type,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPGroups []SecurityIPGroupsParameters `json:"securityIpGroups,omitempty" tf:"security_ip_groups,omitempty"`

	// +kubebuilder:validation:Optional
	StorageEngine *string `json:"storageEngine,omitempty" tf:"storage_engine,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// ServerlessInstanceSpec defines the desired state of ServerlessInstance
type ServerlessInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerlessInstanceParameters `json:"forProvider"`
}

// ServerlessInstanceStatus defines the observed state of ServerlessInstance.
type ServerlessInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerlessInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerlessInstance is the Schema for the ServerlessInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ServerlessInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerlessInstanceSpec   `json:"spec"`
	Status            ServerlessInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerlessInstanceList contains a list of ServerlessInstances
type ServerlessInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerlessInstance `json:"items"`
}

// Repository type metadata.
var (
	ServerlessInstance_Kind             = "ServerlessInstance"
	ServerlessInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerlessInstance_Kind}.String()
	ServerlessInstance_KindAPIVersion   = ServerlessInstance_Kind + "." + CRDGroupVersion.String()
	ServerlessInstance_GroupVersionKind = CRDGroupVersion.WithKind(ServerlessInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerlessInstance{}, &ServerlessInstanceList{})
}
