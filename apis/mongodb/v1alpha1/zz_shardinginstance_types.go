/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigServerListObservation struct {
}

type ConfigServerListParameters struct {

	// +kubebuilder:validation:Required
	ConnectString *string `json:"connectString" tf:"connect_string,omitempty"`

	// +kubebuilder:validation:Required
	MaxConnections *float64 `json:"maxConnections" tf:"max_connections,omitempty"`

	// +kubebuilder:validation:Required
	MaxIops *float64 `json:"maxIops" tf:"max_iops,omitempty"`

	// +kubebuilder:validation:Required
	NodeClass *string `json:"nodeClass" tf:"node_class,omitempty"`

	// +kubebuilder:validation:Required
	NodeDescription *string `json:"nodeDescription" tf:"node_description,omitempty"`

	// +kubebuilder:validation:Required
	NodeID *string `json:"nodeId" tf:"node_id,omitempty"`

	// +kubebuilder:validation:Required
	NodeStorage *float64 `json:"nodeStorage" tf:"node_storage,omitempty"`

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`
}

type MongoListObservation struct {
	ConnectString *string `json:"connectString,omitempty" tf:"connect_string,omitempty"`

	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type MongoListParameters struct {

	// +kubebuilder:validation:Required
	NodeClass *string `json:"nodeClass" tf:"node_class,omitempty"`
}

type ShardListObservation struct {
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`
}

type ShardListParameters struct {

	// +kubebuilder:validation:Required
	NodeClass *string `json:"nodeClass" tf:"node_class,omitempty"`

	// +kubebuilder:validation:Required
	NodeStorage *float64 `json:"nodeStorage" tf:"node_storage,omitempty"`

	// +kubebuilder:validation:Optional
	ReadonlyReplicas *float64 `json:"readonlyReplicas,omitempty" tf:"readonly_replicas,omitempty"`
}

type ShardingInstanceObservation struct {
	ConfigServerList []ConfigServerListObservation `json:"configServerList,omitempty" tf:"config_server_list,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RetentionPeriod *float64 `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`
}

type ShardingInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AccountPasswordSecretRef *v1.SecretKeySelector `json:"accountPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	BackupPeriod []*string `json:"backupPeriod,omitempty" tf:"backup_period,omitempty"`

	// +kubebuilder:validation:Optional
	BackupTime *string `json:"backupTime,omitempty" tf:"backup_time,omitempty"`

	// +kubebuilder:validation:Required
	EngineVersion *string `json:"engineVersion" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceChargeType *string `json:"instanceChargeType,omitempty" tf:"instance_charge_type,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptedPassword *string `json:"kmsEncryptedPassword,omitempty" tf:"kms_encrypted_password,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptionContext map[string]*string `json:"kmsEncryptionContext,omitempty" tf:"kms_encryption_context,omitempty"`

	// +kubebuilder:validation:Required
	MongoList []MongoListParameters `json:"mongoList" tf:"mongo_list,omitempty"`

	// +kubebuilder:validation:Optional
	OrderType *string `json:"orderType,omitempty" tf:"order_type,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIPList []*string `json:"securityIpList,omitempty" tf:"security_ip_list,omitempty"`

	// +kubebuilder:validation:Required
	ShardList []ShardListParameters `json:"shardList" tf:"shard_list,omitempty"`

	// +kubebuilder:validation:Optional
	StorageEngine *string `json:"storageEngine,omitempty" tf:"storage_engine,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TdeStatus *string `json:"tdeStatus,omitempty" tf:"tde_status,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ShardingInstanceSpec defines the desired state of ShardingInstance
type ShardingInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShardingInstanceParameters `json:"forProvider"`
}

// ShardingInstanceStatus defines the observed state of ShardingInstance.
type ShardingInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShardingInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShardingInstance is the Schema for the ShardingInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ShardingInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShardingInstanceSpec   `json:"spec"`
	Status            ShardingInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShardingInstanceList contains a list of ShardingInstances
type ShardingInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShardingInstance `json:"items"`
}

// Repository type metadata.
var (
	ShardingInstance_Kind             = "ShardingInstance"
	ShardingInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShardingInstance_Kind}.String()
	ShardingInstance_KindAPIVersion   = ShardingInstance_Kind + "." + CRDGroupVersion.String()
	ShardingInstance_GroupVersionKind = CRDGroupVersion.WithKind(ShardingInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ShardingInstance{}, &ShardingInstanceList{})
}
