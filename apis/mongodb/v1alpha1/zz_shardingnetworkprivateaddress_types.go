/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkAddressObservation struct {
}

type NetworkAddressParameters struct {

	// +kubebuilder:validation:Required
	ExpiredTime *string `json:"expiredTime" tf:"expired_time,omitempty"`

	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Required
	NetworkAddress *string `json:"networkAddress" tf:"network_address,omitempty"`

	// +kubebuilder:validation:Required
	NetworkType *string `json:"networkType" tf:"network_type,omitempty"`

	// +kubebuilder:validation:Required
	NodeID *string `json:"nodeId" tf:"node_id,omitempty"`

	// +kubebuilder:validation:Required
	NodeType *string `json:"nodeType" tf:"node_type,omitempty"`

	// +kubebuilder:validation:Required
	Port *string `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`
}

type ShardingNetworkPrivateAddressObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NetworkAddress []NetworkAddressObservation `json:"networkAddress,omitempty" tf:"network_address,omitempty"`
}

type ShardingNetworkPrivateAddressParameters struct {

	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Optional
	AccountPasswordSecretRef *v1.SecretKeySelector `json:"accountPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	DBInstanceID *string `json:"dbInstanceId" tf:"db_instance_id,omitempty"`

	// +kubebuilder:validation:Required
	NodeID *string `json:"nodeId" tf:"node_id,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// ShardingNetworkPrivateAddressSpec defines the desired state of ShardingNetworkPrivateAddress
type ShardingNetworkPrivateAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShardingNetworkPrivateAddressParameters `json:"forProvider"`
}

// ShardingNetworkPrivateAddressStatus defines the observed state of ShardingNetworkPrivateAddress.
type ShardingNetworkPrivateAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShardingNetworkPrivateAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShardingNetworkPrivateAddress is the Schema for the ShardingNetworkPrivateAddresss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ShardingNetworkPrivateAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShardingNetworkPrivateAddressSpec   `json:"spec"`
	Status            ShardingNetworkPrivateAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShardingNetworkPrivateAddressList contains a list of ShardingNetworkPrivateAddresss
type ShardingNetworkPrivateAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShardingNetworkPrivateAddress `json:"items"`
}

// Repository type metadata.
var (
	ShardingNetworkPrivateAddress_Kind             = "ShardingNetworkPrivateAddress"
	ShardingNetworkPrivateAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShardingNetworkPrivateAddress_Kind}.String()
	ShardingNetworkPrivateAddress_KindAPIVersion   = ShardingNetworkPrivateAddress_Kind + "." + CRDGroupVersion.String()
	ShardingNetworkPrivateAddress_GroupVersionKind = CRDGroupVersion.WithKind(ShardingNetworkPrivateAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&ShardingNetworkPrivateAddress{}, &ShardingNetworkPrivateAddressList{})
}
