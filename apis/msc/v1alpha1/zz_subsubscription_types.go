/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubSubscriptionObservation struct {
	Channel *string `json:"channel,omitempty" tf:"channel,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SubSubscriptionParameters struct {

	// +kubebuilder:validation:Optional
	ContactIds []*string `json:"contactIds,omitempty" tf:"contact_ids,omitempty"`

	// +kubebuilder:validation:Optional
	EmailStatus *float64 `json:"emailStatus,omitempty" tf:"email_status,omitempty"`

	// +kubebuilder:validation:Required
	ItemName *string `json:"itemName" tf:"item_name,omitempty"`

	// +kubebuilder:validation:Optional
	PmsgStatus *float64 `json:"pmsgStatus,omitempty" tf:"pmsg_status,omitempty"`

	// +kubebuilder:validation:Optional
	SMSStatus *float64 `json:"smsStatus,omitempty" tf:"sms_status,omitempty"`

	// +kubebuilder:validation:Optional
	TtsStatus *float64 `json:"ttsStatus,omitempty" tf:"tts_status,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookIds []*string `json:"webhookIds,omitempty" tf:"webhook_ids,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookStatus *float64 `json:"webhookStatus,omitempty" tf:"webhook_status,omitempty"`
}

// SubSubscriptionSpec defines the desired state of SubSubscription
type SubSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubSubscriptionParameters `json:"forProvider"`
}

// SubSubscriptionStatus defines the observed state of SubSubscription.
type SubSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubSubscription is the Schema for the SubSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SubSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubSubscriptionSpec   `json:"spec"`
	Status            SubSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubSubscriptionList contains a list of SubSubscriptions
type SubSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubSubscription `json:"items"`
}

// Repository type metadata.
var (
	SubSubscription_Kind             = "SubSubscription"
	SubSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubSubscription_Kind}.String()
	SubSubscription_KindAPIVersion   = SubSubscription_Kind + "." + CRDGroupVersion.String()
	SubSubscription_GroupVersionKind = CRDGroupVersion.WithKind(SubSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&SubSubscription{}, &SubSubscriptionList{})
}
