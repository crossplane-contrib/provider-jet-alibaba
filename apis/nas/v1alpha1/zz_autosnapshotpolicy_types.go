/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoSnapshotPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type AutoSnapshotPolicyParameters struct {

	// +kubebuilder:validation:Optional
	AutoSnapshotPolicyName *string `json:"autoSnapshotPolicyName,omitempty" tf:"auto_snapshot_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	RepeatWeekdays []*string `json:"repeatWeekdays" tf:"repeat_weekdays,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// +kubebuilder:validation:Required
	TimePoints []*string `json:"timePoints" tf:"time_points,omitempty"`
}

// AutoSnapshotPolicySpec defines the desired state of AutoSnapshotPolicy
type AutoSnapshotPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutoSnapshotPolicyParameters `json:"forProvider"`
}

// AutoSnapshotPolicyStatus defines the observed state of AutoSnapshotPolicy.
type AutoSnapshotPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutoSnapshotPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicy is the Schema for the AutoSnapshotPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type AutoSnapshotPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoSnapshotPolicySpec   `json:"spec"`
	Status            AutoSnapshotPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicyList contains a list of AutoSnapshotPolicys
type AutoSnapshotPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoSnapshotPolicy `json:"items"`
}

// Repository type metadata.
var (
	AutoSnapshotPolicy_Kind             = "AutoSnapshotPolicy"
	AutoSnapshotPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoSnapshotPolicy_Kind}.String()
	AutoSnapshotPolicy_KindAPIVersion   = AutoSnapshotPolicy_Kind + "." + CRDGroupVersion.String()
	AutoSnapshotPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AutoSnapshotPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AutoSnapshotPolicy{}, &AutoSnapshotPolicyList{})
}
