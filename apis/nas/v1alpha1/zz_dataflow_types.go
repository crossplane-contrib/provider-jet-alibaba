/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataFlowObservation struct {
	DataFlowID *string `json:"dataFlowId,omitempty" tf:"data_flow_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataFlowParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemID *string `json:"fileSystemId" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Required
	FsetID *string `json:"fsetId" tf:"fset_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceSecurityType *string `json:"sourceSecurityType,omitempty" tf:"source_security_type,omitempty"`

	// +kubebuilder:validation:Required
	SourceStorage *string `json:"sourceStorage" tf:"source_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	Throughput *float64 `json:"throughput" tf:"throughput,omitempty"`
}

// DataFlowSpec defines the desired state of DataFlow
type DataFlowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataFlowParameters `json:"forProvider"`
}

// DataFlowStatus defines the observed state of DataFlow.
type DataFlowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataFlowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFlow is the Schema for the DataFlows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DataFlow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFlowSpec   `json:"spec"`
	Status            DataFlowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFlowList contains a list of DataFlows
type DataFlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFlow `json:"items"`
}

// Repository type metadata.
var (
	DataFlow_Kind             = "DataFlow"
	DataFlow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataFlow_Kind}.String()
	DataFlow_KindAPIVersion   = DataFlow_Kind + "." + CRDGroupVersion.String()
	DataFlow_GroupVersionKind = CRDGroupVersion.WithKind(DataFlow_Kind)
)

func init() {
	SchemeBuilder.Register(&DataFlow{}, &DataFlowList{})
}
