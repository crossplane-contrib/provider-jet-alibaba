/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FilesetObservation struct {
	FilesetID *string `json:"filesetId,omitempty" tf:"fileset_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type FilesetParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemID *string `json:"fileSystemId" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemPath *string `json:"fileSystemPath" tf:"file_system_path,omitempty"`
}

// FilesetSpec defines the desired state of Fileset
type FilesetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FilesetParameters `json:"forProvider"`
}

// FilesetStatus defines the observed state of Fileset.
type FilesetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FilesetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Fileset is the Schema for the Filesets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Fileset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FilesetSpec   `json:"spec"`
	Status            FilesetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FilesetList contains a list of Filesets
type FilesetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Fileset `json:"items"`
}

// Repository type metadata.
var (
	Fileset_Kind             = "Fileset"
	Fileset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Fileset_Kind}.String()
	Fileset_KindAPIVersion   = Fileset_Kind + "." + CRDGroupVersion.String()
	Fileset_GroupVersionKind = CRDGroupVersion.WithKind(Fileset_Kind)
)

func init() {
	SchemeBuilder.Register(&Fileset{}, &FilesetList{})
}
