/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLEntriesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ACLEntriesParameters struct {

	// +kubebuilder:validation:Optional
	Egress []EgressParameters `json:"egress,omitempty" tf:"egress,omitempty"`

	// +kubebuilder:validation:Optional
	Ingress []IngressParameters `json:"ingress,omitempty" tf:"ingress,omitempty"`

	// +kubebuilder:validation:Required
	NetworkACLID *string `json:"networkAclId" tf:"network_acl_id,omitempty"`
}

type EgressObservation struct {
}

type EgressParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationCidrIP *string `json:"destinationCidrIp,omitempty" tf:"destination_cidr_ip,omitempty"`

	// +kubebuilder:validation:Optional
	EntryType *string `json:"entryType,omitempty" tf:"entry_type,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type IngressObservation struct {
}

type IngressParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EntryType *string `json:"entryType,omitempty" tf:"entry_type,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SourceCidrIP *string `json:"sourceCidrIp,omitempty" tf:"source_cidr_ip,omitempty"`
}

// ACLEntriesSpec defines the desired state of ACLEntries
type ACLEntriesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLEntriesParameters `json:"forProvider"`
}

// ACLEntriesStatus defines the observed state of ACLEntries.
type ACLEntriesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLEntriesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ACLEntries is the Schema for the ACLEntriess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ACLEntries struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ACLEntriesSpec   `json:"spec"`
	Status            ACLEntriesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLEntriesList contains a list of ACLEntriess
type ACLEntriesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACLEntries `json:"items"`
}

// Repository type metadata.
var (
	ACLEntries_Kind             = "ACLEntries"
	ACLEntries_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACLEntries_Kind}.String()
	ACLEntries_KindAPIVersion   = ACLEntries_Kind + "." + CRDGroupVersion.String()
	ACLEntries_GroupVersionKind = CRDGroupVersion.WithKind(ACLEntries_Kind)
)

func init() {
	SchemeBuilder.Register(&ACLEntries{}, &ACLEntriesList{})
}
