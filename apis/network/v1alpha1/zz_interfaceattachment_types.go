/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type InterfaceAttachmentParameters struct {

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`

	// +kubebuilder:validation:Optional
	TrunkNetworkInstanceID *string `json:"trunkNetworkInstanceId,omitempty" tf:"trunk_network_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	WaitForNetworkConfigurationReady *bool `json:"waitForNetworkConfigurationReady,omitempty" tf:"wait_for_network_configuration_ready,omitempty"`
}

// InterfaceAttachmentSpec defines the desired state of InterfaceAttachment
type InterfaceAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceAttachmentParameters `json:"forProvider"`
}

// InterfaceAttachmentStatus defines the observed state of InterfaceAttachment.
type InterfaceAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceAttachment is the Schema for the InterfaceAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type InterfaceAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceAttachmentSpec   `json:"spec"`
	Status            InterfaceAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceAttachmentList contains a list of InterfaceAttachments
type InterfaceAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InterfaceAttachment `json:"items"`
}

// Repository type metadata.
var (
	InterfaceAttachment_Kind             = "InterfaceAttachment"
	InterfaceAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InterfaceAttachment_Kind}.String()
	InterfaceAttachment_KindAPIVersion   = InterfaceAttachment_Kind + "." + CRDGroupVersion.String()
	InterfaceAttachment_GroupVersionKind = CRDGroupVersion.WithKind(InterfaceAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&InterfaceAttachment{}, &InterfaceAttachmentList{})
}
