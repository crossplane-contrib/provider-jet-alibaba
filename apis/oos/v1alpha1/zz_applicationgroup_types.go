/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationGroupParameters struct {

	// +kubebuilder:validation:Required
	ApplicationGroupName *string `json:"applicationGroupName" tf:"application_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ApplicationName *string `json:"applicationName" tf:"application_name,omitempty"`

	// +kubebuilder:validation:Required
	DeployRegionID *string `json:"deployRegionId" tf:"deploy_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ImportTagKey *string `json:"importTagKey,omitempty" tf:"import_tag_key,omitempty"`

	// +kubebuilder:validation:Optional
	ImportTagValue *string `json:"importTagValue,omitempty" tf:"import_tag_value,omitempty"`
}

// ApplicationGroupSpec defines the desired state of ApplicationGroup
type ApplicationGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationGroupParameters `json:"forProvider"`
}

// ApplicationGroupStatus defines the observed state of ApplicationGroup.
type ApplicationGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationGroup is the Schema for the ApplicationGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ApplicationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationGroupSpec   `json:"spec"`
	Status            ApplicationGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationGroupList contains a list of ApplicationGroups
type ApplicationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationGroup `json:"items"`
}

// Repository type metadata.
var (
	ApplicationGroup_Kind             = "ApplicationGroup"
	ApplicationGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationGroup_Kind}.String()
	ApplicationGroup_KindAPIVersion   = ApplicationGroup_Kind + "." + CRDGroupVersion.String()
	ApplicationGroup_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationGroup{}, &ApplicationGroupList{})
}
