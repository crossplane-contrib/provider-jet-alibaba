/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretParameterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecretParameterParameters struct {

	// +kubebuilder:validation:Optional
	Constraints *string `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SecretParameterName *string `json:"secretParameterName" tf:"secret_parameter_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`
}

// SecretParameterSpec defines the desired state of SecretParameter
type SecretParameterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretParameterParameters `json:"forProvider"`
}

// SecretParameterStatus defines the observed state of SecretParameter.
type SecretParameterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretParameterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretParameter is the Schema for the SecretParameters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SecretParameter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretParameterSpec   `json:"spec"`
	Status            SecretParameterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretParameterList contains a list of SecretParameters
type SecretParameterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretParameter `json:"items"`
}

// Repository type metadata.
var (
	SecretParameter_Kind             = "SecretParameter"
	SecretParameter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretParameter_Kind}.String()
	SecretParameter_KindAPIVersion   = SecretParameter_Kind + "." + CRDGroupVersion.String()
	SecretParameter_GroupVersionKind = CRDGroupVersion.WithKind(SecretParameter_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretParameter{}, &SecretParameterList{})
}
