/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSettingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceSettingParameters struct {

	// +kubebuilder:validation:Optional
	DeliveryOssBucketName *string `json:"deliveryOssBucketName,omitempty" tf:"delivery_oss_bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryOssEnabled *bool `json:"deliveryOssEnabled,omitempty" tf:"delivery_oss_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryOssKeyPrefix *string `json:"deliveryOssKeyPrefix,omitempty" tf:"delivery_oss_key_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	DeliverySlsEnabled *bool `json:"deliverySlsEnabled,omitempty" tf:"delivery_sls_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DeliverySlsProjectName *string `json:"deliverySlsProjectName,omitempty" tf:"delivery_sls_project_name,omitempty"`
}

// ServiceSettingSpec defines the desired state of ServiceSetting
type ServiceSettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSettingParameters `json:"forProvider"`
}

// ServiceSettingStatus defines the observed state of ServiceSetting.
type ServiceSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSetting is the Schema for the ServiceSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ServiceSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSettingSpec   `json:"spec"`
	Status            ServiceSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSettingList contains a list of ServiceSettings
type ServiceSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSetting `json:"items"`
}

// Repository type metadata.
var (
	ServiceSetting_Kind             = "ServiceSetting"
	ServiceSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSetting_Kind}.String()
	ServiceSetting_KindAPIVersion   = ServiceSetting_Kind + "." + CRDGroupVersion.String()
	ServiceSetting_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSetting{}, &ServiceSettingList{})
}
