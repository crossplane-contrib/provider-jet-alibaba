/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StateConfigurationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StateConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	ConfigureMode *string `json:"configureMode,omitempty" tf:"configure_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Required
	ScheduleExpression *string `json:"scheduleExpression" tf:"schedule_expression,omitempty"`

	// +kubebuilder:validation:Required
	ScheduleType *string `json:"scheduleType" tf:"schedule_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Targets *string `json:"targets" tf:"targets,omitempty"`

	// +kubebuilder:validation:Required
	TemplateName *string `json:"templateName" tf:"template_name,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateVersion *string `json:"templateVersion,omitempty" tf:"template_version,omitempty"`
}

// StateConfigurationSpec defines the desired state of StateConfiguration
type StateConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StateConfigurationParameters `json:"forProvider"`
}

// StateConfigurationStatus defines the observed state of StateConfiguration.
type StateConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StateConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StateConfiguration is the Schema for the StateConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StateConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StateConfigurationSpec   `json:"spec"`
	Status            StateConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StateConfigurationList contains a list of StateConfigurations
type StateConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StateConfiguration `json:"items"`
}

// Repository type metadata.
var (
	StateConfiguration_Kind             = "StateConfiguration"
	StateConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StateConfiguration_Kind}.String()
	StateConfiguration_KindAPIVersion   = StateConfiguration_Kind + "." + CRDGroupVersion.String()
	StateConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(StateConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&StateConfiguration{}, &StateConfigurationList{})
}
