/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrderObservation struct {
}

type OrderParameters struct {

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	PricingCycle *string `json:"pricingCycle,omitempty" tf:"pricing_cycle,omitempty"`
}

type QuotaObservation struct {
}

type QuotaParameters struct {

	// +kubebuilder:validation:Required
	ComputeResource *float64 `json:"computeResource" tf:"compute_resource,omitempty"`

	// +kubebuilder:validation:Required
	DocSize *float64 `json:"docSize" tf:"doc_size,omitempty"`

	// +kubebuilder:validation:Optional
	QPS *float64 `json:"qps,omitempty" tf:"qps,omitempty"`

	// +kubebuilder:validation:Required
	Spec *string `json:"spec" tf:"spec,omitempty"`
}

type SearchAppGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SearchAppGroupParameters struct {

	// +kubebuilder:validation:Required
	AppGroupName *string `json:"appGroupName" tf:"app_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ChargeWay *string `json:"chargeWay,omitempty" tf:"charge_way,omitempty"`

	// +kubebuilder:validation:Optional
	CurrentVersion *string `json:"currentVersion,omitempty" tf:"current_version,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Order []OrderParameters `json:"order,omitempty" tf:"order,omitempty"`

	// +kubebuilder:validation:Optional
	OrderType *string `json:"orderType,omitempty" tf:"order_type,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Required
	Quota []QuotaParameters `json:"quota" tf:"quota,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// SearchAppGroupSpec defines the desired state of SearchAppGroup
type SearchAppGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SearchAppGroupParameters `json:"forProvider"`
}

// SearchAppGroupStatus defines the observed state of SearchAppGroup.
type SearchAppGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SearchAppGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SearchAppGroup is the Schema for the SearchAppGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SearchAppGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SearchAppGroupSpec   `json:"spec"`
	Status            SearchAppGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SearchAppGroupList contains a list of SearchAppGroups
type SearchAppGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SearchAppGroup `json:"items"`
}

// Repository type metadata.
var (
	SearchAppGroup_Kind             = "SearchAppGroup"
	SearchAppGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SearchAppGroup_Kind}.String()
	SearchAppGroup_KindAPIVersion   = SearchAppGroup_Kind + "." + CRDGroupVersion.String()
	SearchAppGroup_GroupVersionKind = CRDGroupVersion.WithKind(SearchAppGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&SearchAppGroup{}, &SearchAppGroupList{})
}
