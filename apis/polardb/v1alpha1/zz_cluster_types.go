/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterObservation struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterParameters struct {

	// +kubebuilder:validation:Optional
	AutoRenewPeriod *float64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period,omitempty"`

	// +kubebuilder:validation:Optional
	CollectorStatus *string `json:"collectorStatus,omitempty" tf:"collector_status,omitempty"`

	// +kubebuilder:validation:Optional
	DBClusterIPArray []DBClusterIPArrayParameters `json:"dbClusterIpArray,omitempty" tf:"db_cluster_ip_array,omitempty"`

	// +kubebuilder:validation:Required
	DBNodeClass *string `json:"dbNodeClass" tf:"db_node_class,omitempty"`

	// +kubebuilder:validation:Optional
	DBNodeCount *float64 `json:"dbNodeCount,omitempty" tf:"db_node_count,omitempty"`

	// +kubebuilder:validation:Required
	DBType *string `json:"dbType" tf:"db_type,omitempty"`

	// +kubebuilder:validation:Required
	DBVersion *string `json:"dbVersion" tf:"db_version,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptNewTables *string `json:"encryptNewTables,omitempty" tf:"encrypt_new_tables,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainTime *string `json:"maintainTime,omitempty" tf:"maintain_time,omitempty"`

	// +kubebuilder:validation:Optional
	ModifyType *string `json:"modifyType,omitempty" tf:"modify_type,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	PayType *string `json:"payType,omitempty" tf:"pay_type,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	RenewalStatus *string `json:"renewalStatus,omitempty" tf:"renewal_status,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIps []*string `json:"securityIps,omitempty" tf:"security_ips,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TdeStatus *string `json:"tdeStatus,omitempty" tf:"tde_status,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DBClusterIPArrayObservation struct {
}

type DBClusterIPArrayParameters struct {

	// +kubebuilder:validation:Optional
	DBClusterIPArrayName *string `json:"dbClusterIpArrayName,omitempty" tf:"db_cluster_ip_array_name,omitempty"`

	// +kubebuilder:validation:Optional
	ModifyMode *string `json:"modifyMode,omitempty" tf:"modify_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIps []*string `json:"securityIps,omitempty" tf:"security_ips,omitempty"`
}

type ParametersObservation struct {
}

type ParametersParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
