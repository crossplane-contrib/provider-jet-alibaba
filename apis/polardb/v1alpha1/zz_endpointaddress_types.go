/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointAddressObservation struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`
}

type EndpointAddressParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionPrefix *string `json:"connectionPrefix,omitempty" tf:"connection_prefix,omitempty"`

	// +kubebuilder:validation:Required
	DBClusterID *string `json:"dbClusterId" tf:"db_cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	DBEndpointID *string `json:"dbEndpointId" tf:"db_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	NetType *string `json:"netType,omitempty" tf:"net_type,omitempty"`
}

// EndpointAddressSpec defines the desired state of EndpointAddress
type EndpointAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointAddressParameters `json:"forProvider"`
}

// EndpointAddressStatus defines the observed state of EndpointAddress.
type EndpointAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointAddress is the Schema for the EndpointAddresss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type EndpointAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointAddressSpec   `json:"spec"`
	Status            EndpointAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointAddressList contains a list of EndpointAddresss
type EndpointAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointAddress `json:"items"`
}

// Repository type metadata.
var (
	EndpointAddress_Kind             = "EndpointAddress"
	EndpointAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointAddress_Kind}.String()
	EndpointAddress_KindAPIVersion   = EndpointAddress_Kind + "." + CRDGroupVersion.String()
	EndpointAddress_GroupVersionKind = CRDGroupVersion.WithKind(EndpointAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointAddress{}, &EndpointAddressList{})
}
