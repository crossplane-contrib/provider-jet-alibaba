/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCEndpointConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VPCEndpointConnectionParameters struct {

	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	EndpointID *string `json:"endpointId" tf:"endpoint_id,omitempty"`

	// +kubebuilder:validation:Required
	ServiceID *string `json:"serviceId" tf:"service_id,omitempty"`
}

// VPCEndpointConnectionSpec defines the desired state of VPCEndpointConnection
type VPCEndpointConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCEndpointConnectionParameters `json:"forProvider"`
}

// VPCEndpointConnectionStatus defines the observed state of VPCEndpointConnection.
type VPCEndpointConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCEndpointConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointConnection is the Schema for the VPCEndpointConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type VPCEndpointConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEndpointConnectionSpec   `json:"spec"`
	Status            VPCEndpointConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointConnectionList contains a list of VPCEndpointConnections
type VPCEndpointConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEndpointConnection `json:"items"`
}

// Repository type metadata.
var (
	VPCEndpointConnection_Kind             = "VPCEndpointConnection"
	VPCEndpointConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCEndpointConnection_Kind}.String()
	VPCEndpointConnection_KindAPIVersion   = VPCEndpointConnection_Kind + "." + CRDGroupVersion.String()
	VPCEndpointConnection_GroupVersionKind = CRDGroupVersion.WithKind(VPCEndpointConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCEndpointConnection{}, &VPCEndpointConnectionList{})
}
