/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ZoneAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// +kubebuilder:validation:Optional
	UserClientIP *string `json:"userClientIp,omitempty" tf:"user_client_ip,omitempty"`

	// +kubebuilder:validation:Optional
	VPCIds []*string `json:"vpcIds,omitempty" tf:"vpc_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Vpcs []ZoneAttachmentVpcsParameters `json:"vpcs,omitempty" tf:"vpcs,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

type ZoneAttachmentVpcsObservation struct {
}

type ZoneAttachmentVpcsParameters struct {

	// +kubebuilder:validation:Optional
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// ZoneAttachmentSpec defines the desired state of ZoneAttachment
type ZoneAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneAttachmentParameters `json:"forProvider"`
}

// ZoneAttachmentStatus defines the observed state of ZoneAttachment.
type ZoneAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneAttachment is the Schema for the ZoneAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ZoneAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ZoneAttachmentSpec   `json:"spec"`
	Status            ZoneAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneAttachmentList contains a list of ZoneAttachments
type ZoneAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneAttachment `json:"items"`
}

// Repository type metadata.
var (
	ZoneAttachment_Kind             = "ZoneAttachment"
	ZoneAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneAttachment_Kind}.String()
	ZoneAttachment_KindAPIVersion   = ZoneAttachment_Kind + "." + CRDGroupVersion.String()
	ZoneAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ZoneAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneAttachment{}, &ZoneAttachmentList{})
}
