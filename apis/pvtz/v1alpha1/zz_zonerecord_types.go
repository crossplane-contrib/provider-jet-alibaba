/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneRecordObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RecordID *string `json:"recordId,omitempty" tf:"record_id,omitempty"`
}

type ZoneRecordParameters struct {

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceRecord *string `json:"resourceRecord,omitempty" tf:"resource_record,omitempty"`

	// +kubebuilder:validation:Optional
	Rr *string `json:"rr,omitempty" tf:"rr,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UserClientIP *string `json:"userClientIp,omitempty" tf:"user_client_ip,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// ZoneRecordSpec defines the desired state of ZoneRecord
type ZoneRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneRecordParameters `json:"forProvider"`
}

// ZoneRecordStatus defines the observed state of ZoneRecord.
type ZoneRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneRecord is the Schema for the ZoneRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ZoneRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ZoneRecordSpec   `json:"spec"`
	Status            ZoneRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneRecordList contains a list of ZoneRecords
type ZoneRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneRecord `json:"items"`
}

// Repository type metadata.
var (
	ZoneRecord_Kind             = "ZoneRecord"
	ZoneRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneRecord_Kind}.String()
	ZoneRecord_KindAPIVersion   = ZoneRecord_Kind + "." + CRDGroupVersion.String()
	ZoneRecord_GroupVersionKind = CRDGroupVersion.WithKind(ZoneRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneRecord{}, &ZoneRecordList{})
}
