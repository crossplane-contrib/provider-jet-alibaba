/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BiUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BiUserParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Required
	AdminUser *bool `json:"adminUser" tf:"admin_user,omitempty"`

	// +kubebuilder:validation:Required
	AuthAdminUser *bool `json:"authAdminUser" tf:"auth_admin_user,omitempty"`

	// +kubebuilder:validation:Required
	NickName *string `json:"nickName" tf:"nick_name,omitempty"`

	// +kubebuilder:validation:Required
	UserType *string `json:"userType" tf:"user_type,omitempty"`
}

// BiUserSpec defines the desired state of BiUser
type BiUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BiUserParameters `json:"forProvider"`
}

// BiUserStatus defines the observed state of BiUser.
type BiUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BiUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BiUser is the Schema for the BiUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BiUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BiUserSpec   `json:"spec"`
	Status            BiUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BiUserList contains a list of BiUsers
type BiUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BiUser `json:"items"`
}

// Repository type metadata.
var (
	BiUser_Kind             = "BiUser"
	BiUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BiUser_Kind}.String()
	BiUser_KindAPIVersion   = BiUser_Kind + "." + CRDGroupVersion.String()
	BiUser_GroupVersionKind = CRDGroupVersion.WithKind(BiUser_Kind)
)

func init() {
	SchemeBuilder.Register(&BiUser{}, &BiUserList{})
}
