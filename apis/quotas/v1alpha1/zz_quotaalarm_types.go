/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QuotaAlarmObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QuotaAlarmParameters struct {

	// +kubebuilder:validation:Required
	ProductCode *string `json:"productCode" tf:"product_code,omitempty"`

	// +kubebuilder:validation:Required
	QuotaActionCode *string `json:"quotaActionCode" tf:"quota_action_code,omitempty"`

	// +kubebuilder:validation:Required
	QuotaAlarmName *string `json:"quotaAlarmName" tf:"quota_alarm_name,omitempty"`

	// +kubebuilder:validation:Optional
	QuotaDimensions []QuotaDimensionsParameters `json:"quotaDimensions,omitempty" tf:"quota_dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// +kubebuilder:validation:Optional
	ThresholdPercent *float64 `json:"thresholdPercent,omitempty" tf:"threshold_percent,omitempty"`

	// +kubebuilder:validation:Optional
	WebHook *string `json:"webHook,omitempty" tf:"web_hook,omitempty"`
}

type QuotaDimensionsObservation struct {
}

type QuotaDimensionsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// QuotaAlarmSpec defines the desired state of QuotaAlarm
type QuotaAlarmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QuotaAlarmParameters `json:"forProvider"`
}

// QuotaAlarmStatus defines the observed state of QuotaAlarm.
type QuotaAlarmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QuotaAlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QuotaAlarm is the Schema for the QuotaAlarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type QuotaAlarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuotaAlarmSpec   `json:"spec"`
	Status            QuotaAlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QuotaAlarmList contains a list of QuotaAlarms
type QuotaAlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QuotaAlarm `json:"items"`
}

// Repository type metadata.
var (
	QuotaAlarm_Kind             = "QuotaAlarm"
	QuotaAlarm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QuotaAlarm_Kind}.String()
	QuotaAlarm_KindAPIVersion   = QuotaAlarm_Kind + "." + CRDGroupVersion.String()
	QuotaAlarm_GroupVersionKind = CRDGroupVersion.WithKind(QuotaAlarm_Kind)
)

func init() {
	SchemeBuilder.Register(&QuotaAlarm{}, &QuotaAlarmList{})
}
