/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QuotaApplicationDimensionsObservation struct {
}

type QuotaApplicationDimensionsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type QuotaApplicationObservation struct {
	ApproveValue *string `json:"approveValue,omitempty" tf:"approve_value,omitempty"`

	AuditReason *string `json:"auditReason,omitempty" tf:"audit_reason,omitempty"`

	EffectiveTime *string `json:"effectiveTime,omitempty" tf:"effective_time,omitempty"`

	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	QuotaDescription *string `json:"quotaDescription,omitempty" tf:"quota_description,omitempty"`

	QuotaName *string `json:"quotaName,omitempty" tf:"quota_name,omitempty"`

	QuotaUnit *string `json:"quotaUnit,omitempty" tf:"quota_unit,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type QuotaApplicationParameters struct {

	// +kubebuilder:validation:Optional
	AuditMode *string `json:"auditMode,omitempty" tf:"audit_mode,omitempty"`

	// +kubebuilder:validation:Required
	DesireValue *float64 `json:"desireValue" tf:"desire_value,omitempty"`

	// +kubebuilder:validation:Optional
	Dimensions []QuotaApplicationDimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Optional
	NoticeType *float64 `json:"noticeType,omitempty" tf:"notice_type,omitempty"`

	// +kubebuilder:validation:Required
	ProductCode *string `json:"productCode" tf:"product_code,omitempty"`

	// +kubebuilder:validation:Required
	QuotaActionCode *string `json:"quotaActionCode" tf:"quota_action_code,omitempty"`

	// +kubebuilder:validation:Optional
	QuotaCategory *string `json:"quotaCategory,omitempty" tf:"quota_category,omitempty"`

	// +kubebuilder:validation:Required
	Reason *string `json:"reason" tf:"reason,omitempty"`
}

// QuotaApplicationSpec defines the desired state of QuotaApplication
type QuotaApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QuotaApplicationParameters `json:"forProvider"`
}

// QuotaApplicationStatus defines the observed state of QuotaApplication.
type QuotaApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QuotaApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QuotaApplication is the Schema for the QuotaApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type QuotaApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuotaApplicationSpec   `json:"spec"`
	Status            QuotaApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QuotaApplicationList contains a list of QuotaApplications
type QuotaApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QuotaApplication `json:"items"`
}

// Repository type metadata.
var (
	QuotaApplication_Kind             = "QuotaApplication"
	QuotaApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QuotaApplication_Kind}.String()
	QuotaApplication_KindAPIVersion   = QuotaApplication_Kind + "." + CRDGroupVersion.String()
	QuotaApplication_GroupVersionKind = CRDGroupVersion.WithKind(QuotaApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&QuotaApplication{}, &QuotaApplicationList{})
}
