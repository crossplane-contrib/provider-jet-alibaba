/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityPreferenceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityPreferenceParameters struct {

	// +kubebuilder:validation:Optional
	AllowUserToChangePassword *bool `json:"allowUserToChangePassword,omitempty" tf:"allow_user_to_change_password,omitempty"`

	// +kubebuilder:validation:Optional
	AllowUserToManageAccessKeys *bool `json:"allowUserToManageAccessKeys,omitempty" tf:"allow_user_to_manage_access_keys,omitempty"`

	// +kubebuilder:validation:Optional
	AllowUserToManageMfaDevices *bool `json:"allowUserToManageMfaDevices,omitempty" tf:"allow_user_to_manage_mfa_devices,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSaveMfaTicket *bool `json:"enableSaveMfaTicket,omitempty" tf:"enable_save_mfa_ticket,omitempty"`

	// +kubebuilder:validation:Optional
	EnforceMfaForLogin *bool `json:"enforceMfaForLogin,omitempty" tf:"enforce_mfa_for_login,omitempty"`

	// +kubebuilder:validation:Optional
	LoginNetworkMasks *string `json:"loginNetworkMasks,omitempty" tf:"login_network_masks,omitempty"`

	// +kubebuilder:validation:Optional
	LoginSessionDuration *float64 `json:"loginSessionDuration,omitempty" tf:"login_session_duration,omitempty"`
}

// SecurityPreferenceSpec defines the desired state of SecurityPreference
type SecurityPreferenceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityPreferenceParameters `json:"forProvider"`
}

// SecurityPreferenceStatus defines the observed state of SecurityPreference.
type SecurityPreferenceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityPreferenceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityPreference is the Schema for the SecurityPreferences API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SecurityPreference struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityPreferenceSpec   `json:"spec"`
	Status            SecurityPreferenceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityPreferenceList contains a list of SecurityPreferences
type SecurityPreferenceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityPreference `json:"items"`
}

// Repository type metadata.
var (
	SecurityPreference_Kind             = "SecurityPreference"
	SecurityPreference_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityPreference_Kind}.String()
	SecurityPreference_KindAPIVersion   = SecurityPreference_Kind + "." + CRDGroupVersion.String()
	SecurityPreference_GroupVersionKind = CRDGroupVersion.WithKind(SecurityPreference_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityPreference{}, &SecurityPreferenceList{})
}
