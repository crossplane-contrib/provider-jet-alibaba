/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UpgradeDBInstanceObservation struct {
	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UpgradeDBInstanceParameters struct {

	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// +kubebuilder:validation:Optional
	AutoUpgradeMinorVersion *string `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version,omitempty"`

	// +kubebuilder:validation:Optional
	CAType *string `json:"caType,omitempty" tf:"ca_type,omitempty"`

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCACert *string `json:"clientCaCert,omitempty" tf:"client_ca_cert,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCAEnabled *float64 `json:"clientCaEnabled,omitempty" tf:"client_ca_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCertRevocationList *string `json:"clientCertRevocationList,omitempty" tf:"client_cert_revocation_list,omitempty"`

	// +kubebuilder:validation:Optional
	ClientCrlEnabled *float64 `json:"clientCrlEnabled,omitempty" tf:"client_crl_enabled,omitempty"`

	// +kubebuilder:validation:Required
	CollectStatMode *string `json:"collectStatMode" tf:"collect_stat_mode,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionStringPrefix *string `json:"connectionStringPrefix,omitempty" tf:"connection_string_prefix,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceClass *string `json:"dbInstanceClass" tf:"db_instance_class,omitempty"`

	// +kubebuilder:validation:Optional
	DBInstanceDescription *string `json:"dbInstanceDescription,omitempty" tf:"db_instance_description,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceStorage *float64 `json:"dbInstanceStorage" tf:"db_instance_storage,omitempty"`

	// +kubebuilder:validation:Required
	DBInstanceStorageType *string `json:"dbInstanceStorageType" tf:"db_instance_storage_type,omitempty"`

	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// +kubebuilder:validation:Optional
	DedicatedHostGroupID *string `json:"dedicatedHostGroupId,omitempty" tf:"dedicated_host_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveTime *string `json:"effectiveTime,omitempty" tf:"effective_time,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	// +kubebuilder:validation:Optional
	ForceRestart *bool `json:"forceRestart,omitempty" tf:"force_restart,omitempty"`

	// +kubebuilder:validation:Optional
	HaMode *string `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	// +kubebuilder:validation:Required
	InstanceNetworkType *string `json:"instanceNetworkType" tf:"instance_network_type,omitempty"`

	// +kubebuilder:validation:Optional
	MaintainTime *string `json:"maintainTime,omitempty" tf:"maintain_time,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []UpgradeDBInstanceParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Required
	PaymentType *string `json:"paymentType" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Optional
	PgHbaConf []UpgradeDBInstancePgHbaConfParameters `json:"pgHbaConf,omitempty" tf:"pg_hba_conf,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// +kubebuilder:validation:Optional
	ReleasedKeepPolicy *string `json:"releasedKeepPolicy,omitempty" tf:"released_keep_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationACL *string `json:"replicationAcl,omitempty" tf:"replication_acl,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	SSLEnabled *float64 `json:"sslEnabled,omitempty" tf:"ssl_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityIps []*string `json:"securityIps,omitempty" tf:"security_ips,omitempty"`

	// +kubebuilder:validation:Optional
	ServerCert *string `json:"serverCert,omitempty" tf:"server_cert,omitempty"`

	// +kubebuilder:validation:Optional
	ServerKey *string `json:"serverKey,omitempty" tf:"server_key,omitempty"`

	// +kubebuilder:validation:Optional
	SourceBiz *string `json:"sourceBiz,omitempty" tf:"source_biz,omitempty"`

	// +kubebuilder:validation:Required
	SourceDBInstanceID *string `json:"sourceDbInstanceId" tf:"source_db_instance_id,omitempty"`

	// +kubebuilder:validation:Required
	SwitchOver *string `json:"switchOver" tf:"switch_over,omitempty"`

	// +kubebuilder:validation:Optional
	SwitchTime *string `json:"switchTime,omitempty" tf:"switch_time,omitempty"`

	// +kubebuilder:validation:Optional
	SwitchTimeMode *string `json:"switchTimeMode,omitempty" tf:"switch_time_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SyncMode *string `json:"syncMode,omitempty" tf:"sync_mode,omitempty"`

	// +kubebuilder:validation:Required
	TargetMajorVersion *string `json:"targetMajorVersion" tf:"target_major_version,omitempty"`

	// +kubebuilder:validation:Optional
	TdeStatus *string `json:"tdeStatus,omitempty" tf:"tde_status,omitempty"`

	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneIDSlave1 *string `json:"zoneIdSlave1,omitempty" tf:"zone_id_slave_1,omitempty"`
}

type UpgradeDBInstanceParametersObservation struct {
}

type UpgradeDBInstanceParametersParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type UpgradeDBInstancePgHbaConfObservation struct {
}

type UpgradeDBInstancePgHbaConfParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Required
	Database *string `json:"database" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`

	// +kubebuilder:validation:Required
	Method *string `json:"method" tf:"method,omitempty"`

	// +kubebuilder:validation:Optional
	Option *string `json:"option,omitempty" tf:"option,omitempty"`

	// +kubebuilder:validation:Required
	PriorityID *float64 `json:"priorityId" tf:"priority_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`
}

// UpgradeDBInstanceSpec defines the desired state of UpgradeDBInstance
type UpgradeDBInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UpgradeDBInstanceParameters `json:"forProvider"`
}

// UpgradeDBInstanceStatus defines the observed state of UpgradeDBInstance.
type UpgradeDBInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UpgradeDBInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UpgradeDBInstance is the Schema for the UpgradeDBInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type UpgradeDBInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UpgradeDBInstanceSpec   `json:"spec"`
	Status            UpgradeDBInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UpgradeDBInstanceList contains a list of UpgradeDBInstances
type UpgradeDBInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UpgradeDBInstance `json:"items"`
}

// Repository type metadata.
var (
	UpgradeDBInstance_Kind             = "UpgradeDBInstance"
	UpgradeDBInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UpgradeDBInstance_Kind}.String()
	UpgradeDBInstance_KindAPIVersion   = UpgradeDBInstance_Kind + "." + CRDGroupVersion.String()
	UpgradeDBInstance_GroupVersionKind = CRDGroupVersion.WithKind(UpgradeDBInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&UpgradeDBInstance{}, &UpgradeDBInstanceList{})
}
