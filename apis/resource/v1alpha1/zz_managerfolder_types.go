/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerFolderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagerFolderParameters struct {

	// +kubebuilder:validation:Required
	FolderName *string `json:"folderName" tf:"folder_name,omitempty"`

	// +kubebuilder:validation:Optional
	ParentFolderID *string `json:"parentFolderId,omitempty" tf:"parent_folder_id,omitempty"`
}

// ManagerFolderSpec defines the desired state of ManagerFolder
type ManagerFolderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerFolderParameters `json:"forProvider"`
}

// ManagerFolderStatus defines the observed state of ManagerFolder.
type ManagerFolderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerFolderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerFolder is the Schema for the ManagerFolders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerFolder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerFolderSpec   `json:"spec"`
	Status            ManagerFolderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerFolderList contains a list of ManagerFolders
type ManagerFolderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerFolder `json:"items"`
}

// Repository type metadata.
var (
	ManagerFolder_Kind             = "ManagerFolder"
	ManagerFolder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerFolder_Kind}.String()
	ManagerFolder_KindAPIVersion   = ManagerFolder_Kind + "." + CRDGroupVersion.String()
	ManagerFolder_GroupVersionKind = CRDGroupVersion.WithKind(ManagerFolder_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerFolder{}, &ManagerFolderList{})
}
