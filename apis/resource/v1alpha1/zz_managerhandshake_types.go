/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerHandshakeObservation struct {
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterAccountID *string `json:"masterAccountId,omitempty" tf:"master_account_id,omitempty"`

	MasterAccountName *string `json:"masterAccountName,omitempty" tf:"master_account_name,omitempty"`

	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	ResourceDirectoryID *string `json:"resourceDirectoryId,omitempty" tf:"resource_directory_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ManagerHandshakeParameters struct {

	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// +kubebuilder:validation:Required
	TargetEntity *string `json:"targetEntity" tf:"target_entity,omitempty"`

	// +kubebuilder:validation:Required
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

// ManagerHandshakeSpec defines the desired state of ManagerHandshake
type ManagerHandshakeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerHandshakeParameters `json:"forProvider"`
}

// ManagerHandshakeStatus defines the observed state of ManagerHandshake.
type ManagerHandshakeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerHandshakeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerHandshake is the Schema for the ManagerHandshakes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerHandshake struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerHandshakeSpec   `json:"spec"`
	Status            ManagerHandshakeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerHandshakeList contains a list of ManagerHandshakes
type ManagerHandshakeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerHandshake `json:"items"`
}

// Repository type metadata.
var (
	ManagerHandshake_Kind             = "ManagerHandshake"
	ManagerHandshake_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerHandshake_Kind}.String()
	ManagerHandshake_KindAPIVersion   = ManagerHandshake_Kind + "." + CRDGroupVersion.String()
	ManagerHandshake_GroupVersionKind = CRDGroupVersion.WithKind(ManagerHandshake_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerHandshake{}, &ManagerHandshakeList{})
}
