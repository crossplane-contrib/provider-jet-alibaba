/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

type ManagerPolicyParameters struct {

	// +kubebuilder:validation:Optional
	DefaultVersion *string `json:"defaultVersion,omitempty" tf:"default_version,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	PolicyDocument *string `json:"policyDocument" tf:"policy_document,omitempty"`

	// +kubebuilder:validation:Required
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`
}

// ManagerPolicySpec defines the desired state of ManagerPolicy
type ManagerPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerPolicyParameters `json:"forProvider"`
}

// ManagerPolicyStatus defines the observed state of ManagerPolicy.
type ManagerPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerPolicy is the Schema for the ManagerPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerPolicySpec   `json:"spec"`
	Status            ManagerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerPolicyList contains a list of ManagerPolicys
type ManagerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerPolicy `json:"items"`
}

// Repository type metadata.
var (
	ManagerPolicy_Kind             = "ManagerPolicy"
	ManagerPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerPolicy_Kind}.String()
	ManagerPolicy_KindAPIVersion   = ManagerPolicy_Kind + "." + CRDGroupVersion.String()
	ManagerPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ManagerPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerPolicy{}, &ManagerPolicyList{})
}
