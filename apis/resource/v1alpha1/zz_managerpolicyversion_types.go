/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerPolicyVersionObservation struct {
	CreateDate *string `json:"createDate,omitempty" tf:"create_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`
}

type ManagerPolicyVersionParameters struct {

	// +kubebuilder:validation:Optional
	IsDefaultVersion *bool `json:"isDefaultVersion,omitempty" tf:"is_default_version,omitempty"`

	// +kubebuilder:validation:Required
	PolicyDocument *string `json:"policyDocument" tf:"policy_document,omitempty"`

	// +kubebuilder:validation:Required
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`
}

// ManagerPolicyVersionSpec defines the desired state of ManagerPolicyVersion
type ManagerPolicyVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerPolicyVersionParameters `json:"forProvider"`
}

// ManagerPolicyVersionStatus defines the observed state of ManagerPolicyVersion.
type ManagerPolicyVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerPolicyVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerPolicyVersion is the Schema for the ManagerPolicyVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerPolicyVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerPolicyVersionSpec   `json:"spec"`
	Status            ManagerPolicyVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerPolicyVersionList contains a list of ManagerPolicyVersions
type ManagerPolicyVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerPolicyVersion `json:"items"`
}

// Repository type metadata.
var (
	ManagerPolicyVersion_Kind             = "ManagerPolicyVersion"
	ManagerPolicyVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerPolicyVersion_Kind}.String()
	ManagerPolicyVersion_KindAPIVersion   = ManagerPolicyVersion_Kind + "." + CRDGroupVersion.String()
	ManagerPolicyVersion_GroupVersionKind = CRDGroupVersion.WithKind(ManagerPolicyVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerPolicyVersion{}, &ManagerPolicyVersionList{})
}
