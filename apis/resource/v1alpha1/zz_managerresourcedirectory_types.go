/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerResourceDirectoryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterAccountID *string `json:"masterAccountId,omitempty" tf:"master_account_id,omitempty"`

	MasterAccountName *string `json:"masterAccountName,omitempty" tf:"master_account_name,omitempty"`

	RootFolderID *string `json:"rootFolderId,omitempty" tf:"root_folder_id,omitempty"`
}

type ManagerResourceDirectoryParameters struct {

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// ManagerResourceDirectorySpec defines the desired state of ManagerResourceDirectory
type ManagerResourceDirectorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerResourceDirectoryParameters `json:"forProvider"`
}

// ManagerResourceDirectoryStatus defines the observed state of ManagerResourceDirectory.
type ManagerResourceDirectoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerResourceDirectoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerResourceDirectory is the Schema for the ManagerResourceDirectorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerResourceDirectory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerResourceDirectorySpec   `json:"spec"`
	Status            ManagerResourceDirectoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerResourceDirectoryList contains a list of ManagerResourceDirectorys
type ManagerResourceDirectoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerResourceDirectory `json:"items"`
}

// Repository type metadata.
var (
	ManagerResourceDirectory_Kind             = "ManagerResourceDirectory"
	ManagerResourceDirectory_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerResourceDirectory_Kind}.String()
	ManagerResourceDirectory_KindAPIVersion   = ManagerResourceDirectory_Kind + "." + CRDGroupVersion.String()
	ManagerResourceDirectory_GroupVersionKind = CRDGroupVersion.WithKind(ManagerResourceDirectory_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerResourceDirectory{}, &ManagerResourceDirectoryList{})
}
