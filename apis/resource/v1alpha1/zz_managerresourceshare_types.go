/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerResourceShareObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ResourceShareOwner *string `json:"resourceShareOwner,omitempty" tf:"resource_share_owner,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ManagerResourceShareParameters struct {

	// +kubebuilder:validation:Required
	ResourceShareName *string `json:"resourceShareName" tf:"resource_share_name,omitempty"`
}

// ManagerResourceShareSpec defines the desired state of ManagerResourceShare
type ManagerResourceShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerResourceShareParameters `json:"forProvider"`
}

// ManagerResourceShareStatus defines the observed state of ManagerResourceShare.
type ManagerResourceShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerResourceShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerResourceShare is the Schema for the ManagerResourceShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerResourceShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerResourceShareSpec   `json:"spec"`
	Status            ManagerResourceShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerResourceShareList contains a list of ManagerResourceShares
type ManagerResourceShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerResourceShare `json:"items"`
}

// Repository type metadata.
var (
	ManagerResourceShare_Kind             = "ManagerResourceShare"
	ManagerResourceShare_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerResourceShare_Kind}.String()
	ManagerResourceShare_KindAPIVersion   = ManagerResourceShare_Kind + "." + CRDGroupVersion.String()
	ManagerResourceShare_GroupVersionKind = CRDGroupVersion.WithKind(ManagerResourceShare_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerResourceShare{}, &ManagerResourceShareList{})
}
