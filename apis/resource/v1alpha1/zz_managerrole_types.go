/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerRoleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreateDate *string `json:"createDate,omitempty" tf:"create_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	UpdateDate *string `json:"updateDate,omitempty" tf:"update_date,omitempty"`
}

type ManagerRoleParameters struct {

	// +kubebuilder:validation:Required
	AssumeRolePolicyDocument *string `json:"assumeRolePolicyDocument" tf:"assume_role_policy_document,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	MaxSessionDuration *float64 `json:"maxSessionDuration,omitempty" tf:"max_session_duration,omitempty"`

	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`
}

// ManagerRoleSpec defines the desired state of ManagerRole
type ManagerRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerRoleParameters `json:"forProvider"`
}

// ManagerRoleStatus defines the observed state of ManagerRole.
type ManagerRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerRole is the Schema for the ManagerRoles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerRoleSpec   `json:"spec"`
	Status            ManagerRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerRoleList contains a list of ManagerRoles
type ManagerRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerRole `json:"items"`
}

// Repository type metadata.
var (
	ManagerRole_Kind             = "ManagerRole"
	ManagerRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerRole_Kind}.String()
	ManagerRole_KindAPIVersion   = ManagerRole_Kind + "." + CRDGroupVersion.String()
	ManagerRole_GroupVersionKind = CRDGroupVersion.WithKind(ManagerRole_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerRole{}, &ManagerRoleList{})
}
