/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagerSharedTargetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ManagerSharedTargetParameters struct {

	// +kubebuilder:validation:Required
	ResourceShareID *string `json:"resourceShareId" tf:"resource_share_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`
}

// ManagerSharedTargetSpec defines the desired state of ManagerSharedTarget
type ManagerSharedTargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerSharedTargetParameters `json:"forProvider"`
}

// ManagerSharedTargetStatus defines the observed state of ManagerSharedTarget.
type ManagerSharedTargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerSharedTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerSharedTarget is the Schema for the ManagerSharedTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ManagerSharedTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagerSharedTargetSpec   `json:"spec"`
	Status            ManagerSharedTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerSharedTargetList contains a list of ManagerSharedTargets
type ManagerSharedTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerSharedTarget `json:"items"`
}

// Repository type metadata.
var (
	ManagerSharedTarget_Kind             = "ManagerSharedTarget"
	ManagerSharedTarget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerSharedTarget_Kind}.String()
	ManagerSharedTarget_KindAPIVersion   = ManagerSharedTarget_Kind + "." + CRDGroupVersion.String()
	ManagerSharedTarget_GroupVersionKind = CRDGroupVersion.WithKind(ManagerSharedTarget_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerSharedTarget{}, &ManagerSharedTargetList{})
}
