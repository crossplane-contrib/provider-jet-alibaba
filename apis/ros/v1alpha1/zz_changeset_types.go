/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChangeSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ChangeSetParameters struct {

	// +kubebuilder:validation:Required
	ChangeSetName *string `json:"changeSetName" tf:"change_set_name,omitempty"`

	// +kubebuilder:validation:Optional
	ChangeSetType *string `json:"changeSetType,omitempty" tf:"change_set_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// +kubebuilder:validation:Optional
	NotificationUrls []*string `json:"notificationUrls,omitempty" tf:"notification_urls,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	RAMRoleName *string `json:"ramRoleName,omitempty" tf:"ram_role_name,omitempty"`

	// +kubebuilder:validation:Optional
	ReplacementOption *string `json:"replacementOption,omitempty" tf:"replacement_option,omitempty"`

	// +kubebuilder:validation:Optional
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	// +kubebuilder:validation:Optional
	StackName *string `json:"stackName,omitempty" tf:"stack_name,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyBody *string `json:"stackPolicyBody,omitempty" tf:"stack_policy_body,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyDuringUpdateBody *string `json:"stackPolicyDuringUpdateBody,omitempty" tf:"stack_policy_during_update_body,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyDuringUpdateURL *string `json:"stackPolicyDuringUpdateUrl,omitempty" tf:"stack_policy_during_update_url,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyURL *string `json:"stackPolicyUrl,omitempty" tf:"stack_policy_url,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInMinutes *float64 `json:"timeoutInMinutes,omitempty" tf:"timeout_in_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	UsePreviousParameters *bool `json:"usePreviousParameters,omitempty" tf:"use_previous_parameters,omitempty"`
}

type ParametersObservation struct {
}

type ParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterKey *string `json:"parameterKey" tf:"parameter_key,omitempty"`

	// +kubebuilder:validation:Required
	ParameterValue *string `json:"parameterValue" tf:"parameter_value,omitempty"`
}

// ChangeSetSpec defines the desired state of ChangeSet
type ChangeSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChangeSetParameters `json:"forProvider"`
}

// ChangeSetStatus defines the observed state of ChangeSet.
type ChangeSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChangeSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChangeSet is the Schema for the ChangeSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ChangeSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChangeSetSpec   `json:"spec"`
	Status            ChangeSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChangeSetList contains a list of ChangeSets
type ChangeSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChangeSet `json:"items"`
}

// Repository type metadata.
var (
	ChangeSet_Kind             = "ChangeSet"
	ChangeSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChangeSet_Kind}.String()
	ChangeSet_KindAPIVersion   = ChangeSet_Kind + "." + CRDGroupVersion.String()
	ChangeSet_GroupVersionKind = CRDGroupVersion.WithKind(ChangeSet_Kind)
)

func init() {
	SchemeBuilder.Register(&ChangeSet{}, &ChangeSetList{})
}
