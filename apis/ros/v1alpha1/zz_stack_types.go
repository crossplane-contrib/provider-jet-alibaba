/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StackObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StackParameters struct {

	// +kubebuilder:validation:Optional
	CreateOption *string `json:"createOption,omitempty" tf:"create_option,omitempty"`

	// +kubebuilder:validation:Optional
	DeletionProtection *string `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// +kubebuilder:validation:Optional
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// +kubebuilder:validation:Optional
	NotificationUrls []*string `json:"notificationUrls,omitempty" tf:"notification_urls,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []StackParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	RAMRoleName *string `json:"ramRoleName,omitempty" tf:"ram_role_name,omitempty"`

	// +kubebuilder:validation:Optional
	ReplacementOption *string `json:"replacementOption,omitempty" tf:"replacement_option,omitempty"`

	// +kubebuilder:validation:Optional
	RetainAllResources *bool `json:"retainAllResources,omitempty" tf:"retain_all_resources,omitempty"`

	// +kubebuilder:validation:Optional
	RetainResources []*string `json:"retainResources,omitempty" tf:"retain_resources,omitempty"`

	// +kubebuilder:validation:Required
	StackName *string `json:"stackName" tf:"stack_name,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyBody *string `json:"stackPolicyBody,omitempty" tf:"stack_policy_body,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyDuringUpdateBody *string `json:"stackPolicyDuringUpdateBody,omitempty" tf:"stack_policy_during_update_body,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyDuringUpdateURL *string `json:"stackPolicyDuringUpdateUrl,omitempty" tf:"stack_policy_during_update_url,omitempty"`

	// +kubebuilder:validation:Optional
	StackPolicyURL *string `json:"stackPolicyUrl,omitempty" tf:"stack_policy_url,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateVersion *string `json:"templateVersion,omitempty" tf:"template_version,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInMinutes *float64 `json:"timeoutInMinutes,omitempty" tf:"timeout_in_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	UsePreviousParameters *bool `json:"usePreviousParameters,omitempty" tf:"use_previous_parameters,omitempty"`
}

type StackParametersObservation struct {
}

type StackParametersParameters struct {

	// +kubebuilder:validation:Optional
	ParameterKey *string `json:"parameterKey,omitempty" tf:"parameter_key,omitempty"`

	// +kubebuilder:validation:Required
	ParameterValue *string `json:"parameterValue" tf:"parameter_value,omitempty"`
}

// StackSpec defines the desired state of Stack
type StackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackParameters `json:"forProvider"`
}

// StackStatus defines the observed state of Stack.
type StackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Stack is the Schema for the Stacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Stack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackSpec   `json:"spec"`
	Status            StackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackList contains a list of Stacks
type StackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stack `json:"items"`
}

// Repository type metadata.
var (
	Stack_Kind             = "Stack"
	Stack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Stack_Kind}.String()
	Stack_KindAPIVersion   = Stack_Kind + "." + CRDGroupVersion.String()
	Stack_GroupVersionKind = CRDGroupVersion.WithKind(Stack_Kind)
)

func init() {
	SchemeBuilder.Register(&Stack{}, &StackList{})
}
