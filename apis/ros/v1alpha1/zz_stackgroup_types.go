/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StackGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	StackGroupID *string `json:"stackGroupId,omitempty" tf:"stack_group_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StackGroupParameters struct {

	// +kubebuilder:validation:Optional
	AccountIds *string `json:"accountIds,omitempty" tf:"account_ids,omitempty"`

	// +kubebuilder:validation:Optional
	AdministrationRoleName *string `json:"administrationRoleName,omitempty" tf:"administration_role_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExecutionRoleName *string `json:"executionRoleName,omitempty" tf:"execution_role_name,omitempty"`

	// +kubebuilder:validation:Optional
	OperationDescription *string `json:"operationDescription,omitempty" tf:"operation_description,omitempty"`

	// +kubebuilder:validation:Optional
	OperationPreferences *string `json:"operationPreferences,omitempty" tf:"operation_preferences,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters []StackGroupParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	RegionIds *string `json:"regionIds,omitempty" tf:"region_ids,omitempty"`

	// +kubebuilder:validation:Required
	StackGroupName *string `json:"stackGroupName" tf:"stack_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateVersion *string `json:"templateVersion,omitempty" tf:"template_version,omitempty"`
}

type StackGroupParametersObservation struct {
}

type StackGroupParametersParameters struct {

	// +kubebuilder:validation:Optional
	ParameterKey *string `json:"parameterKey,omitempty" tf:"parameter_key,omitempty"`

	// +kubebuilder:validation:Optional
	ParameterValue *string `json:"parameterValue,omitempty" tf:"parameter_value,omitempty"`
}

// StackGroupSpec defines the desired state of StackGroup
type StackGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackGroupParameters `json:"forProvider"`
}

// StackGroupStatus defines the observed state of StackGroup.
type StackGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackGroup is the Schema for the StackGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StackGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackGroupSpec   `json:"spec"`
	Status            StackGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackGroupList contains a list of StackGroups
type StackGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackGroup `json:"items"`
}

// Repository type metadata.
var (
	StackGroup_Kind             = "StackGroup"
	StackGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StackGroup_Kind}.String()
	StackGroup_KindAPIVersion   = StackGroup_Kind + "." + CRDGroupVersion.String()
	StackGroup_GroupVersionKind = CRDGroupVersion.WithKind(StackGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&StackGroup{}, &StackGroupList{})
}
