/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParameterOverridesObservation struct {
}

type ParameterOverridesParameters struct {

	// +kubebuilder:validation:Optional
	ParameterKeySecretRef *v1.SecretKeySelector `json:"parameterKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ParameterValueSecretRef *v1.SecretKeySelector `json:"parameterValueSecretRef,omitempty" tf:"-"`
}

type StackInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StackInstanceParameters struct {

	// +kubebuilder:validation:Optional
	OperationDescription *string `json:"operationDescription,omitempty" tf:"operation_description,omitempty"`

	// +kubebuilder:validation:Optional
	OperationPreferences *string `json:"operationPreferences,omitempty" tf:"operation_preferences,omitempty"`

	// +kubebuilder:validation:Optional
	ParameterOverrides []ParameterOverridesParameters `json:"parameterOverrides,omitempty" tf:"parameter_overrides,omitempty"`

	// +kubebuilder:validation:Optional
	RetainStacks *bool `json:"retainStacks,omitempty" tf:"retain_stacks,omitempty"`

	// +kubebuilder:validation:Required
	StackGroupName *string `json:"stackGroupName" tf:"stack_group_name,omitempty"`

	// +kubebuilder:validation:Required
	StackInstanceAccountID *string `json:"stackInstanceAccountId" tf:"stack_instance_account_id,omitempty"`

	// +kubebuilder:validation:Required
	StackInstanceRegionID *string `json:"stackInstanceRegionId" tf:"stack_instance_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInMinutes *string `json:"timeoutInMinutes,omitempty" tf:"timeout_in_minutes,omitempty"`
}

// StackInstanceSpec defines the desired state of StackInstance
type StackInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackInstanceParameters `json:"forProvider"`
}

// StackInstanceStatus defines the observed state of StackInstance.
type StackInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackInstance is the Schema for the StackInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type StackInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackInstanceSpec   `json:"spec"`
	Status            StackInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackInstanceList contains a list of StackInstances
type StackInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackInstance `json:"items"`
}

// Repository type metadata.
var (
	StackInstance_Kind             = "StackInstance"
	StackInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StackInstance_Kind}.String()
	StackInstance_KindAPIVersion   = StackInstance_Kind + "." + CRDGroupVersion.String()
	StackInstance_GroupVersionKind = CRDGroupVersion.WithKind(StackInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&StackInstance{}, &StackInstanceList{})
}
