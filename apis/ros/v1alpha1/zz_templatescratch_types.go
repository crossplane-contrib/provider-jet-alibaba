/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PreferenceParametersObservation struct {
}

type PreferenceParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterKey *string `json:"parameterKey" tf:"parameter_key,omitempty"`

	// +kubebuilder:validation:Required
	ParameterValue *string `json:"parameterValue" tf:"parameter_value,omitempty"`
}

type SourceResourceGroupObservation struct {
}

type SourceResourceGroupParameters struct {

	// +kubebuilder:validation:Required
	ResourceGroupID *string `json:"resourceGroupId" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceTypeFilter []*string `json:"resourceTypeFilter,omitempty" tf:"resource_type_filter,omitempty"`
}

type SourceResourcesObservation struct {
}

type SourceResourcesParameters struct {

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type SourceTagObservation struct {
}

type SourceTagParameters struct {

	// +kubebuilder:validation:Required
	ResourceTags map[string]*string `json:"resourceTags" tf:"resource_tags,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceTypeFilter []*string `json:"resourceTypeFilter,omitempty" tf:"resource_type_filter,omitempty"`
}

type TemplateScratchObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TemplateScratchParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExecutionMode *string `json:"executionMode,omitempty" tf:"execution_mode,omitempty"`

	// +kubebuilder:validation:Optional
	LogicalIDStrategy *string `json:"logicalIdStrategy,omitempty" tf:"logical_id_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	PreferenceParameters []PreferenceParametersParameters `json:"preferenceParameters,omitempty" tf:"preference_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	SourceResourceGroup []SourceResourceGroupParameters `json:"sourceResourceGroup,omitempty" tf:"source_resource_group,omitempty"`

	// +kubebuilder:validation:Optional
	SourceResources []SourceResourcesParameters `json:"sourceResources,omitempty" tf:"source_resources,omitempty"`

	// +kubebuilder:validation:Optional
	SourceTag []SourceTagParameters `json:"sourceTag,omitempty" tf:"source_tag,omitempty"`

	// +kubebuilder:validation:Required
	TemplateScratchType *string `json:"templateScratchType" tf:"template_scratch_type,omitempty"`
}

// TemplateScratchSpec defines the desired state of TemplateScratch
type TemplateScratchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TemplateScratchParameters `json:"forProvider"`
}

// TemplateScratchStatus defines the observed state of TemplateScratch.
type TemplateScratchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TemplateScratchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateScratch is the Schema for the TemplateScratchs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TemplateScratch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TemplateScratchSpec   `json:"spec"`
	Status            TemplateScratchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateScratchList contains a list of TemplateScratchs
type TemplateScratchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TemplateScratch `json:"items"`
}

// Repository type metadata.
var (
	TemplateScratch_Kind             = "TemplateScratch"
	TemplateScratch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TemplateScratch_Kind}.String()
	TemplateScratch_KindAPIVersion   = TemplateScratch_Kind + "." + CRDGroupVersion.String()
	TemplateScratch_GroupVersionKind = CRDGroupVersion.WithKind(TemplateScratch_Kind)
)

func init() {
	SchemeBuilder.Register(&TemplateScratch{}, &TemplateScratchList{})
}
