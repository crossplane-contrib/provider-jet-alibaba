/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type InterfaceConnectionParameters struct {

	// +kubebuilder:validation:Required
	InterfaceID *string `json:"interfaceId" tf:"interface_id,omitempty"`

	// +kubebuilder:validation:Required
	OppositeInterfaceID *string `json:"oppositeInterfaceId" tf:"opposite_interface_id,omitempty"`

	// +kubebuilder:validation:Optional
	OppositeInterfaceOwnerID *string `json:"oppositeInterfaceOwnerId,omitempty" tf:"opposite_interface_owner_id,omitempty"`

	// +kubebuilder:validation:Optional
	OppositeRouterID *string `json:"oppositeRouterId,omitempty" tf:"opposite_router_id,omitempty"`

	// +kubebuilder:validation:Optional
	OppositeRouterType *string `json:"oppositeRouterType,omitempty" tf:"opposite_router_type,omitempty"`
}

// InterfaceConnectionSpec defines the desired state of InterfaceConnection
type InterfaceConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceConnectionParameters `json:"forProvider"`
}

// InterfaceConnectionStatus defines the observed state of InterfaceConnection.
type InterfaceConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceConnection is the Schema for the InterfaceConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type InterfaceConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceConnectionSpec   `json:"spec"`
	Status            InterfaceConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceConnectionList contains a list of InterfaceConnections
type InterfaceConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InterfaceConnection `json:"items"`
}

// Repository type metadata.
var (
	InterfaceConnection_Kind             = "InterfaceConnection"
	InterfaceConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InterfaceConnection_Kind}.String()
	InterfaceConnection_KindAPIVersion   = InterfaceConnection_Kind + "." + CRDGroupVersion.String()
	InterfaceConnection_GroupVersionKind = CRDGroupVersion.WithKind(InterfaceConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&InterfaceConnection{}, &InterfaceConnectionList{})
}
