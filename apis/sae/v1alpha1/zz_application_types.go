/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InternetIP *string `json:"internetIp,omitempty" tf:"internet_ip,omitempty"`

	IntranetIP *string `json:"intranetIp,omitempty" tf:"intranet_ip,omitempty"`
}

type ApplicationParameters struct {

	// +kubebuilder:validation:Optional
	AppDescription *string `json:"appDescription,omitempty" tf:"app_description,omitempty"`

	// +kubebuilder:validation:Required
	AppName *string `json:"appName" tf:"app_name,omitempty"`

	// +kubebuilder:validation:Optional
	AutoConfig *bool `json:"autoConfig,omitempty" tf:"auto_config,omitempty"`

	// +kubebuilder:validation:Optional
	AutoEnableApplicationScalingRule *bool `json:"autoEnableApplicationScalingRule,omitempty" tf:"auto_enable_application_scaling_rule,omitempty"`

	// +kubebuilder:validation:Optional
	BatchWaitTime *float64 `json:"batchWaitTime,omitempty" tf:"batch_wait_time,omitempty"`

	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Optional
	ChangeOrderDesc *string `json:"changeOrderDesc,omitempty" tf:"change_order_desc,omitempty"`

	// +kubebuilder:validation:Optional
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// +kubebuilder:validation:Optional
	CommandArgs *string `json:"commandArgs,omitempty" tf:"command_args,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigMapMountDesc *string `json:"configMapMountDesc,omitempty" tf:"config_map_mount_desc,omitempty"`

	// +kubebuilder:validation:Optional
	CustomHostAlias *string `json:"customHostAlias,omitempty" tf:"custom_host_alias,omitempty"`

	// +kubebuilder:validation:Optional
	Deploy *bool `json:"deploy,omitempty" tf:"deploy,omitempty"`

	// +kubebuilder:validation:Optional
	EdasContainerVersion *string `json:"edasContainerVersion,omitempty" tf:"edas_container_version,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAhas *string `json:"enableAhas,omitempty" tf:"enable_ahas,omitempty"`

	// +kubebuilder:validation:Optional
	EnableGreyTagRoute *bool `json:"enableGreyTagRoute,omitempty" tf:"enable_grey_tag_route,omitempty"`

	// +kubebuilder:validation:Optional
	Envs *string `json:"envs,omitempty" tf:"envs,omitempty"`

	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// +kubebuilder:validation:Optional
	Internet []InternetParameters `json:"internet,omitempty" tf:"internet,omitempty"`

	// +kubebuilder:validation:Optional
	InternetSlbID *string `json:"internetSlbId,omitempty" tf:"internet_slb_id,omitempty"`

	// +kubebuilder:validation:Optional
	Intranet []IntranetParameters `json:"intranet,omitempty" tf:"intranet,omitempty"`

	// +kubebuilder:validation:Optional
	IntranetSlbID *string `json:"intranetSlbId,omitempty" tf:"intranet_slb_id,omitempty"`

	// +kubebuilder:validation:Optional
	JarStartArgs *string `json:"jarStartArgs,omitempty" tf:"jar_start_args,omitempty"`

	// +kubebuilder:validation:Optional
	JarStartOptions *string `json:"jarStartOptions,omitempty" tf:"jar_start_options,omitempty"`

	// +kubebuilder:validation:Optional
	Jdk *string `json:"jdk,omitempty" tf:"jdk,omitempty"`

	// +kubebuilder:validation:Optional
	Liveness *string `json:"liveness,omitempty" tf:"liveness,omitempty"`

	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// +kubebuilder:validation:Optional
	MinReadyInstances *float64 `json:"minReadyInstances,omitempty" tf:"min_ready_instances,omitempty"`

	// +kubebuilder:validation:Optional
	MountDesc *string `json:"mountDesc,omitempty" tf:"mount_desc,omitempty"`

	// +kubebuilder:validation:Optional
	MountHost *string `json:"mountHost,omitempty" tf:"mount_host,omitempty"`

	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// +kubebuilder:validation:Optional
	NasID *string `json:"nasId,omitempty" tf:"nas_id,omitempty"`

	// +kubebuilder:validation:Optional
	OssAkIDSecretRef *v1.SecretKeySelector `json:"ossAkIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	OssAkSecretSecretRef *v1.SecretKeySelector `json:"ossAkSecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	OssMountDescs *string `json:"ossMountDescs,omitempty" tf:"oss_mount_descs,omitempty"`

	// +kubebuilder:validation:Optional
	PHPArmsConfigLocation *string `json:"phpArmsConfigLocation,omitempty" tf:"php_arms_config_location,omitempty"`

	// +kubebuilder:validation:Optional
	PHPConfig *string `json:"phpConfig,omitempty" tf:"php_config,omitempty"`

	// +kubebuilder:validation:Optional
	PHPConfigLocation *string `json:"phpConfigLocation,omitempty" tf:"php_config_location,omitempty"`

	// +kubebuilder:validation:Required
	PackageType *string `json:"packageType" tf:"package_type,omitempty"`

	// +kubebuilder:validation:Optional
	PackageURL *string `json:"packageUrl,omitempty" tf:"package_url,omitempty"`

	// +kubebuilder:validation:Optional
	PackageVersion *string `json:"packageVersion,omitempty" tf:"package_version,omitempty"`

	// +kubebuilder:validation:Optional
	PostStart *string `json:"postStart,omitempty" tf:"post_start,omitempty"`

	// +kubebuilder:validation:Optional
	PreStop *string `json:"preStop,omitempty" tf:"pre_stop,omitempty"`

	// +kubebuilder:validation:Optional
	Readiness *string `json:"readiness,omitempty" tf:"readiness,omitempty"`

	// +kubebuilder:validation:Required
	Replicas *float64 `json:"replicas" tf:"replicas,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SlsConfigs *string `json:"slsConfigs,omitempty" tf:"sls_configs,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TerminationGracePeriodSeconds *float64 `json:"terminationGracePeriodSeconds,omitempty" tf:"termination_grace_period_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// +kubebuilder:validation:Optional
	TomcatConfig *string `json:"tomcatConfig,omitempty" tf:"tomcat_config,omitempty"`

	// +kubebuilder:validation:Optional
	UpdateStrategy *string `json:"updateStrategy,omitempty" tf:"update_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`

	// +kubebuilder:validation:Optional
	VswitchID *string `json:"vswitchId,omitempty" tf:"vswitch_id,omitempty"`

	// +kubebuilder:validation:Optional
	WarStartOptions *string `json:"warStartOptions,omitempty" tf:"war_start_options,omitempty"`

	// +kubebuilder:validation:Optional
	WebContainer *string `json:"webContainer,omitempty" tf:"web_container,omitempty"`
}

type InternetObservation struct {
}

type InternetParameters struct {

	// +kubebuilder:validation:Optional
	HTTPSCertID *string `json:"httpsCertId,omitempty" tf:"https_cert_id,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	TargetPort *float64 `json:"targetPort,omitempty" tf:"target_port,omitempty"`
}

type IntranetObservation struct {
}

type IntranetParameters struct {

	// +kubebuilder:validation:Optional
	HTTPSCertID *string `json:"httpsCertId,omitempty" tf:"https_cert_id,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	TargetPort *float64 `json:"targetPort,omitempty" tf:"target_port,omitempty"`
}

// ApplicationSpec defines the desired state of Application
type ApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationParameters `json:"forProvider"`
}

// ApplicationStatus defines the observed state of Application.
type ApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Application is the Schema for the Applications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Application struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSpec   `json:"spec"`
	Status            ApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationList contains a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Application `json:"items"`
}

// Repository type metadata.
var (
	Application_Kind             = "Application"
	Application_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Application_Kind}.String()
	Application_KindAPIVersion   = Application_Kind + "." + CRDGroupVersion.String()
	Application_GroupVersionKind = CRDGroupVersion.WithKind(Application_Kind)
)

func init() {
	SchemeBuilder.Register(&Application{}, &ApplicationList{})
}
