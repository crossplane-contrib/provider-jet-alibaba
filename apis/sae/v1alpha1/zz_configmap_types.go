/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigMapObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigMapParameters struct {

	// +kubebuilder:validation:Required
	Data *string `json:"data" tf:"data,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceID *string `json:"namespaceId" tf:"namespace_id,omitempty"`
}

// ConfigMapSpec defines the desired state of ConfigMap
type ConfigMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigMapParameters `json:"forProvider"`
}

// ConfigMapStatus defines the observed state of ConfigMap.
type ConfigMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigMap is the Schema for the ConfigMaps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ConfigMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigMapSpec   `json:"spec"`
	Status            ConfigMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigMapList contains a list of ConfigMaps
type ConfigMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigMap `json:"items"`
}

// Repository type metadata.
var (
	ConfigMap_Kind             = "ConfigMap"
	ConfigMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigMap_Kind}.String()
	ConfigMap_KindAPIVersion   = ConfigMap_Kind + "." + CRDGroupVersion.String()
	ConfigMap_GroupVersionKind = CRDGroupVersion.WithKind(ConfigMap_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigMap{}, &ConfigMapList{})
}
