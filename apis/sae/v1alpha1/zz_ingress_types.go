/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefaultRuleObservation struct {
}

type DefaultRuleParameters struct {

	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	AppName *string `json:"appName,omitempty" tf:"app_name,omitempty"`

	// +kubebuilder:validation:Optional
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`
}

type IngressObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IngressParameters struct {

	// +kubebuilder:validation:Optional
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultRule []DefaultRuleParameters `json:"defaultRule,omitempty" tf:"default_rule,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	ListenerPort *float64 `json:"listenerPort" tf:"listener_port,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceID *string `json:"namespaceId" tf:"namespace_id,omitempty"`

	// +kubebuilder:validation:Required
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`

	// +kubebuilder:validation:Required
	SlbID *string `json:"slbId" tf:"slb_id,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Required
	AppName *string `json:"appName" tf:"app_name,omitempty"`

	// +kubebuilder:validation:Required
	ContainerPort *float64 `json:"containerPort" tf:"container_port,omitempty"`

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

// IngressSpec defines the desired state of Ingress
type IngressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IngressParameters `json:"forProvider"`
}

// IngressStatus defines the observed state of Ingress.
type IngressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IngressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ingress is the Schema for the Ingresss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Ingress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IngressSpec   `json:"spec"`
	Status            IngressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IngressList contains a list of Ingresss
type IngressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ingress `json:"items"`
}

// Repository type metadata.
var (
	Ingress_Kind             = "Ingress"
	Ingress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ingress_Kind}.String()
	Ingress_KindAPIVersion   = Ingress_Kind + "." + CRDGroupVersion.String()
	Ingress_GroupVersionKind = CRDGroupVersion.WithKind(Ingress_Kind)
)

func init() {
	SchemeBuilder.Register(&Ingress{}, &IngressList{})
}
