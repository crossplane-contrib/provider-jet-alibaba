/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientUserParameters struct {

	// +kubebuilder:validation:Required
	Bandwidth *float64 `json:"bandwidth" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Optional
	ClientIP *string `json:"clientIp,omitempty" tf:"client_ip,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptedPassword *string `json:"kmsEncryptedPassword,omitempty" tf:"kms_encrypted_password,omitempty"`

	// +kubebuilder:validation:Optional
	KMSEncryptionContext map[string]*string `json:"kmsEncryptionContext,omitempty" tf:"kms_encryption_context,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Required
	SagID *string `json:"sagId" tf:"sag_id,omitempty"`

	// +kubebuilder:validation:Required
	UserMail *string `json:"userMail" tf:"user_mail,omitempty"`

	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// ClientUserSpec defines the desired state of ClientUser
type ClientUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientUserParameters `json:"forProvider"`
}

// ClientUserStatus defines the observed state of ClientUser.
type ClientUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientUser is the Schema for the ClientUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ClientUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientUserSpec   `json:"spec"`
	Status            ClientUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientUserList contains a list of ClientUsers
type ClientUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientUser `json:"items"`
}

// Repository type metadata.
var (
	ClientUser_Kind             = "ClientUser"
	ClientUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientUser_Kind}.String()
	ClientUser_KindAPIVersion   = ClientUser_Kind + "." + CRDGroupVersion.String()
	ClientUser_GroupVersionKind = CRDGroupVersion.WithKind(ClientUser_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientUser{}, &ClientUserList{})
}
