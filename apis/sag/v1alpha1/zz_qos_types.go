/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QosObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QosParameters struct {
}

// QosSpec defines the desired state of Qos
type QosSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QosParameters `json:"forProvider"`
}

// QosStatus defines the observed state of Qos.
type QosStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QosObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Qos is the Schema for the Qoss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Qos struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QosSpec   `json:"spec"`
	Status            QosStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QosList contains a list of Qoss
type QosList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Qos `json:"items"`
}

// Repository type metadata.
var (
	Qos_Kind             = "Qos"
	Qos_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Qos_Kind}.String()
	Qos_KindAPIVersion   = Qos_Kind + "." + CRDGroupVersion.String()
	Qos_GroupVersionKind = CRDGroupVersion.WithKind(Qos_Kind)
)

func init() {
	SchemeBuilder.Register(&Qos{}, &QosList{})
}
