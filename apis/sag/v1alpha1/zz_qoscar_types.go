/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QosCarObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QosCarParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	LimitType *string `json:"limitType" tf:"limit_type,omitempty"`

	// +kubebuilder:validation:Optional
	MaxBandwidthAbs *float64 `json:"maxBandwidthAbs,omitempty" tf:"max_bandwidth_abs,omitempty"`

	// +kubebuilder:validation:Optional
	MaxBandwidthPercent *float64 `json:"maxBandwidthPercent,omitempty" tf:"max_bandwidth_percent,omitempty"`

	// +kubebuilder:validation:Optional
	MinBandwidthAbs *float64 `json:"minBandwidthAbs,omitempty" tf:"min_bandwidth_abs,omitempty"`

	// +kubebuilder:validation:Optional
	MinBandwidthPercent *float64 `json:"minBandwidthPercent,omitempty" tf:"min_bandwidth_percent,omitempty"`

	// +kubebuilder:validation:Optional
	PercentSourceType *string `json:"percentSourceType,omitempty" tf:"percent_source_type,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	QosID *string `json:"qosId" tf:"qos_id,omitempty"`
}

// QosCarSpec defines the desired state of QosCar
type QosCarSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QosCarParameters `json:"forProvider"`
}

// QosCarStatus defines the observed state of QosCar.
type QosCarStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QosCarObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QosCar is the Schema for the QosCars API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type QosCar struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QosCarSpec   `json:"spec"`
	Status            QosCarStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QosCarList contains a list of QosCars
type QosCarList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QosCar `json:"items"`
}

// Repository type metadata.
var (
	QosCar_Kind             = "QosCar"
	QosCar_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QosCar_Kind}.String()
	QosCar_KindAPIVersion   = QosCar_Kind + "." + CRDGroupVersion.String()
	QosCar_GroupVersionKind = CRDGroupVersion.WithKind(QosCar_Kind)
)

func init() {
	SchemeBuilder.Register(&QosCar{}, &QosCarList{})
}
