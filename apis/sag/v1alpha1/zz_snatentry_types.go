/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnatEntryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnatEntryParameters struct {

	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// +kubebuilder:validation:Required
	SagID *string `json:"sagId" tf:"sag_id,omitempty"`

	// +kubebuilder:validation:Required
	SnatIP *string `json:"snatIp" tf:"snat_ip,omitempty"`
}

// SnatEntrySpec defines the desired state of SnatEntry
type SnatEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnatEntryParameters `json:"forProvider"`
}

// SnatEntryStatus defines the observed state of SnatEntry.
type SnatEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnatEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnatEntry is the Schema for the SnatEntrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SnatEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnatEntrySpec   `json:"spec"`
	Status            SnatEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnatEntryList contains a list of SnatEntrys
type SnatEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnatEntry `json:"items"`
}

// Repository type metadata.
var (
	SnatEntry_Kind             = "SnatEntry"
	SnatEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnatEntry_Kind}.String()
	SnatEntry_KindAPIVersion   = SnatEntry_Kind + "." + CRDGroupVersion.String()
	SnatEntry_GroupVersionKind = CRDGroupVersion.WithKind(SnatEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&SnatEntry{}, &SnatEntryList{})
}
