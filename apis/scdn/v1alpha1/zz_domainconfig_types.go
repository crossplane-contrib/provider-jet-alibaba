/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainConfigObservation struct {
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DomainConfigParameters struct {

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Required
	FunctionArgs []FunctionArgsParameters `json:"functionArgs" tf:"function_args,omitempty"`

	// +kubebuilder:validation:Required
	FunctionName *string `json:"functionName" tf:"function_name,omitempty"`
}

type FunctionArgsObservation struct {
}

type FunctionArgsParameters struct {

	// +kubebuilder:validation:Required
	ArgName *string `json:"argName" tf:"arg_name,omitempty"`

	// +kubebuilder:validation:Required
	ArgValue *string `json:"argValue" tf:"arg_value,omitempty"`
}

// DomainConfigSpec defines the desired state of DomainConfig
type DomainConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainConfigParameters `json:"forProvider"`
}

// DomainConfigStatus defines the observed state of DomainConfig.
type DomainConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainConfig is the Schema for the DomainConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type DomainConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainConfigSpec   `json:"spec"`
	Status            DomainConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainConfigList contains a list of DomainConfigs
type DomainConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainConfig `json:"items"`
}

// Repository type metadata.
var (
	DomainConfig_Kind             = "DomainConfig"
	DomainConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainConfig_Kind}.String()
	DomainConfig_KindAPIVersion   = DomainConfig_Kind + "." + CRDGroupVersion.String()
	DomainConfig_GroupVersionKind = CRDGroupVersion.WithKind(DomainConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainConfig{}, &DomainConfigList{})
}
