/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationServerFirewallRuleObservation struct {
	FirewallRuleID *string `json:"firewallRuleId,omitempty" tf:"firewall_rule_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationServerFirewallRuleParameters struct {

	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	Port *string `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// +kubebuilder:validation:Required
	RuleProtocol *string `json:"ruleProtocol" tf:"rule_protocol,omitempty"`
}

// ApplicationServerFirewallRuleSpec defines the desired state of ApplicationServerFirewallRule
type ApplicationServerFirewallRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationServerFirewallRuleParameters `json:"forProvider"`
}

// ApplicationServerFirewallRuleStatus defines the observed state of ApplicationServerFirewallRule.
type ApplicationServerFirewallRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationServerFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationServerFirewallRule is the Schema for the ApplicationServerFirewallRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ApplicationServerFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationServerFirewallRuleSpec   `json:"spec"`
	Status            ApplicationServerFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationServerFirewallRuleList contains a list of ApplicationServerFirewallRules
type ApplicationServerFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationServerFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	ApplicationServerFirewallRule_Kind             = "ApplicationServerFirewallRule"
	ApplicationServerFirewallRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationServerFirewallRule_Kind}.String()
	ApplicationServerFirewallRule_KindAPIVersion   = ApplicationServerFirewallRule_Kind + "." + CRDGroupVersion.String()
	ApplicationServerFirewallRule_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationServerFirewallRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationServerFirewallRule{}, &ApplicationServerFirewallRuleList{})
}
