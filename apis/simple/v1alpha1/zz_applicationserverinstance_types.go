/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationServerInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationServerInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// +kubebuilder:validation:Optional
	AutoRenewPeriod *float64 `json:"autoRenewPeriod,omitempty" tf:"auto_renew_period,omitempty"`

	// +kubebuilder:validation:Optional
	DataDiskSize *float64 `json:"dataDiskSize,omitempty" tf:"data_disk_size,omitempty"`

	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	PaymentType *string `json:"paymentType,omitempty" tf:"payment_type,omitempty"`

	// +kubebuilder:validation:Required
	Period *float64 `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	PlanID *string `json:"planId" tf:"plan_id,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// ApplicationServerInstanceSpec defines the desired state of ApplicationServerInstance
type ApplicationServerInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationServerInstanceParameters `json:"forProvider"`
}

// ApplicationServerInstanceStatus defines the observed state of ApplicationServerInstance.
type ApplicationServerInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationServerInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationServerInstance is the Schema for the ApplicationServerInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ApplicationServerInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationServerInstanceSpec   `json:"spec"`
	Status            ApplicationServerInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationServerInstanceList contains a list of ApplicationServerInstances
type ApplicationServerInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationServerInstance `json:"items"`
}

// Repository type metadata.
var (
	ApplicationServerInstance_Kind             = "ApplicationServerInstance"
	ApplicationServerInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationServerInstance_Kind}.String()
	ApplicationServerInstance_KindAPIVersion   = ApplicationServerInstance_Kind + "." + CRDGroupVersion.String()
	ApplicationServerInstance_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationServerInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationServerInstance{}, &ApplicationServerInstanceList{})
}
