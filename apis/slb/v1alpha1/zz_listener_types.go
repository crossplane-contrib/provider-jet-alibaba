/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ListenerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ListenerParameters struct {

	// +kubebuilder:validation:Optional
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// +kubebuilder:validation:Optional
	ACLStatus *string `json:"aclStatus,omitempty" tf:"acl_status,omitempty"`

	// +kubebuilder:validation:Optional
	ACLType *string `json:"aclType,omitempty" tf:"acl_type,omitempty"`

	// +kubebuilder:validation:Optional
	BackendPort *float64 `json:"backendPort,omitempty" tf:"backend_port,omitempty"`

	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Optional
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	Cookie *string `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// +kubebuilder:validation:Optional
	CookieTimeout *float64 `json:"cookieTimeout,omitempty" tf:"cookie_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteProtectionValidation *bool `json:"deleteProtectionValidation,omitempty" tf:"delete_protection_validation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnableHttp2 *string `json:"enableHttp2,omitempty" tf:"enable_http2,omitempty"`

	// +kubebuilder:validation:Optional
	EstablishedTimeout *float64 `json:"establishedTimeout,omitempty" tf:"established_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	ForwardPort *float64 `json:"forwardPort,omitempty" tf:"forward_port,omitempty"`

	// +kubebuilder:validation:Required
	FrontendPort *float64 `json:"frontendPort" tf:"frontend_port,omitempty"`

	// +kubebuilder:validation:Optional
	Gzip *bool `json:"gzip,omitempty" tf:"gzip,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheck *string `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckConnectPort *float64 `json:"healthCheckConnectPort,omitempty" tf:"health_check_connect_port,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckDomain *string `json:"healthCheckDomain,omitempty" tf:"health_check_domain,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckHTTPCode *string `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckURI *string `json:"healthCheckUri,omitempty" tf:"health_check_uri,omitempty"`

	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePort *float64 `json:"instancePort,omitempty" tf:"instance_port,omitempty"`

	// +kubebuilder:validation:Optional
	LBPort *float64 `json:"lbPort,omitempty" tf:"lb_port,omitempty"`

	// +kubebuilder:validation:Optional
	LBProtocol *string `json:"lbProtocol,omitempty" tf:"lb_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerForward *string `json:"listenerForward,omitempty" tf:"listener_forward,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerID *string `json:"loadBalancerId" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	MasterSlaveServerGroupID *string `json:"masterSlaveServerGroupId,omitempty" tf:"master_slave_server_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	PersistenceTimeout *float64 `json:"persistenceTimeout,omitempty" tf:"persistence_timeout,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	SSLCertificateID *string `json:"sslCertificateId,omitempty" tf:"ssl_certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// +kubebuilder:validation:Optional
	ServerCertificateID *string `json:"serverCertificateId,omitempty" tf:"server_certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServerGroupID *string `json:"serverGroupId,omitempty" tf:"server_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	StickySession *string `json:"stickySession,omitempty" tf:"sticky_session,omitempty"`

	// +kubebuilder:validation:Optional
	StickySessionType *string `json:"stickySessionType,omitempty" tf:"sticky_session_type,omitempty"`

	// +kubebuilder:validation:Optional
	TLSCipherPolicy *string `json:"tlsCipherPolicy,omitempty" tf:"tls_cipher_policy,omitempty"`

	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	XForwardedFor []XForwardedForParameters `json:"xForwardedFor,omitempty" tf:"x_forwarded_for,omitempty"`
}

type XForwardedForObservation struct {
	RetriveClientIP *bool `json:"retriveClientIp,omitempty" tf:"retrive_client_ip,omitempty"`
}

type XForwardedForParameters struct {

	// +kubebuilder:validation:Optional
	RetriveSlbID *bool `json:"retriveSlbId,omitempty" tf:"retrive_slb_id,omitempty"`

	// +kubebuilder:validation:Optional
	RetriveSlbIP *bool `json:"retriveSlbIp,omitempty" tf:"retrive_slb_ip,omitempty"`

	// +kubebuilder:validation:Optional
	RetriveSlbProto *bool `json:"retriveSlbProto,omitempty" tf:"retrive_slb_proto,omitempty"`
}

// ListenerSpec defines the desired state of Listener
type ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerParameters `json:"forProvider"`
}

// ListenerStatus defines the observed state of Listener.
type ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Listener is the Schema for the Listeners API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerSpec   `json:"spec"`
	Status            ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerList contains a list of Listeners
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Listener `json:"items"`
}

// Repository type metadata.
var (
	Listener_Kind             = "Listener"
	Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Listener_Kind}.String()
	Listener_KindAPIVersion   = Listener_Kind + "." + CRDGroupVersion.String()
	Listener_GroupVersionKind = CRDGroupVersion.WithKind(Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Listener{}, &ListenerList{})
}
