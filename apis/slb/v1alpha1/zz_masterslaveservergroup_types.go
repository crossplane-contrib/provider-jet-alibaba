/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MasterSlaveServerGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MasterSlaveServerGroupParameters struct {

	// +kubebuilder:validation:Optional
	DeleteProtectionValidation *bool `json:"deleteProtectionValidation,omitempty" tf:"delete_protection_validation,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerID *string `json:"loadBalancerId" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	Servers []ServersParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ServersObservation struct {
}

type ServersParameters struct {

	// +kubebuilder:validation:Optional
	IsBackup *float64 `json:"isBackup,omitempty" tf:"is_backup,omitempty"`

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	ServerID *string `json:"serverId" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// MasterSlaveServerGroupSpec defines the desired state of MasterSlaveServerGroup
type MasterSlaveServerGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MasterSlaveServerGroupParameters `json:"forProvider"`
}

// MasterSlaveServerGroupStatus defines the observed state of MasterSlaveServerGroup.
type MasterSlaveServerGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MasterSlaveServerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MasterSlaveServerGroup is the Schema for the MasterSlaveServerGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type MasterSlaveServerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MasterSlaveServerGroupSpec   `json:"spec"`
	Status            MasterSlaveServerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MasterSlaveServerGroupList contains a list of MasterSlaveServerGroups
type MasterSlaveServerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MasterSlaveServerGroup `json:"items"`
}

// Repository type metadata.
var (
	MasterSlaveServerGroup_Kind             = "MasterSlaveServerGroup"
	MasterSlaveServerGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MasterSlaveServerGroup_Kind}.String()
	MasterSlaveServerGroup_KindAPIVersion   = MasterSlaveServerGroup_Kind + "." + CRDGroupVersion.String()
	MasterSlaveServerGroup_GroupVersionKind = CRDGroupVersion.WithKind(MasterSlaveServerGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&MasterSlaveServerGroup{}, &MasterSlaveServerGroupList{})
}
