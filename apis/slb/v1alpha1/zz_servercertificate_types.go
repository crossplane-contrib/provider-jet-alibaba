/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerCertificateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServerCertificateParameters struct {

	// +kubebuilder:validation:Optional
	AlicloudCertifacteID *string `json:"alicloudCertifacteId,omitempty" tf:"alicloud_certifacte_id,omitempty"`

	// +kubebuilder:validation:Optional
	AlicloudCertifacteName *string `json:"alicloudCertifacteName,omitempty" tf:"alicloud_certifacte_name,omitempty"`

	// +kubebuilder:validation:Optional
	AlicloudCertificateID *string `json:"alicloudCertificateId,omitempty" tf:"alicloud_certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	AlicloudCertificateName *string `json:"alicloudCertificateName,omitempty" tf:"alicloud_certificate_name,omitempty"`

	// +kubebuilder:validation:Optional
	AlicloudCertificateRegionID *string `json:"alicloudCertificateRegionId,omitempty" tf:"alicloud_certificate_region_id,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServerCertificate *string `json:"serverCertificate,omitempty" tf:"server_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ServerCertificateSpec defines the desired state of ServerCertificate
type ServerCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerCertificateParameters `json:"forProvider"`
}

// ServerCertificateStatus defines the observed state of ServerCertificate.
type ServerCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerCertificate is the Schema for the ServerCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ServerCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerCertificateSpec   `json:"spec"`
	Status            ServerCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerCertificateList contains a list of ServerCertificates
type ServerCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerCertificate `json:"items"`
}

// Repository type metadata.
var (
	ServerCertificate_Kind             = "ServerCertificate"
	ServerCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerCertificate_Kind}.String()
	ServerCertificate_KindAPIVersion   = ServerCertificate_Kind + "." + CRDGroupVersion.String()
	ServerCertificate_GroupVersionKind = CRDGroupVersion.WithKind(ServerCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerCertificate{}, &ServerCertificateList{})
}
