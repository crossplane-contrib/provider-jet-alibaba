/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServerGroupParameters struct {

	// +kubebuilder:validation:Optional
	DeleteProtectionValidation *bool `json:"deleteProtectionValidation,omitempty" tf:"delete_protection_validation,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerID *string `json:"loadBalancerId" tf:"load_balancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	Servers []ServerGroupServersParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ServerGroupServersObservation struct {
}

type ServerGroupServersParameters struct {

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	ServerIds []*string `json:"serverIds" tf:"server_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// ServerGroupSpec defines the desired state of ServerGroup
type ServerGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerGroupParameters `json:"forProvider"`
}

// ServerGroupStatus defines the observed state of ServerGroup.
type ServerGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerGroup is the Schema for the ServerGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type ServerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerGroupSpec   `json:"spec"`
	Status            ServerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerGroupList contains a list of ServerGroups
type ServerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerGroup `json:"items"`
}

// Repository type metadata.
var (
	ServerGroup_Kind             = "ServerGroup"
	ServerGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerGroup_Kind}.String()
	ServerGroup_KindAPIVersion   = ServerGroup_Kind + "." + CRDGroupVersion.String()
	ServerGroup_GroupVersionKind = CRDGroupVersion.WithKind(ServerGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerGroup{}, &ServerGroupList{})
}
