/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TLSCipherPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TLSCipherPolicyParameters struct {

	// +kubebuilder:validation:Required
	Ciphers []*string `json:"ciphers" tf:"ciphers,omitempty"`

	// +kubebuilder:validation:Required
	TLSCipherPolicyName *string `json:"tlsCipherPolicyName" tf:"tls_cipher_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	TLSVersions []*string `json:"tlsVersions" tf:"tls_versions,omitempty"`
}

// TLSCipherPolicySpec defines the desired state of TLSCipherPolicy
type TLSCipherPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TLSCipherPolicyParameters `json:"forProvider"`
}

// TLSCipherPolicyStatus defines the observed state of TLSCipherPolicy.
type TLSCipherPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TLSCipherPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TLSCipherPolicy is the Schema for the TLSCipherPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TLSCipherPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TLSCipherPolicySpec   `json:"spec"`
	Status            TLSCipherPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TLSCipherPolicyList contains a list of TLSCipherPolicys
type TLSCipherPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TLSCipherPolicy `json:"items"`
}

// Repository type metadata.
var (
	TLSCipherPolicy_Kind             = "TLSCipherPolicy"
	TLSCipherPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TLSCipherPolicy_Kind}.String()
	TLSCipherPolicy_KindAPIVersion   = TLSCipherPolicy_Kind + "." + CRDGroupVersion.String()
	TLSCipherPolicy_GroupVersionKind = CRDGroupVersion.WithKind(TLSCipherPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&TLSCipherPolicy{}, &TLSCipherPolicyList{})
}
