/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SnatEntryID *string `json:"snatEntryId,omitempty" tf:"snat_entry_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type EntryParameters struct {

	// +kubebuilder:validation:Optional
	SnatEntryName *string `json:"snatEntryName,omitempty" tf:"snat_entry_name,omitempty"`

	// +kubebuilder:validation:Required
	SnatIP *string `json:"snatIp" tf:"snat_ip,omitempty"`

	// +kubebuilder:validation:Required
	SnatTableID *string `json:"snatTableId" tf:"snat_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceCidr *string `json:"sourceCidr,omitempty" tf:"source_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	SourceVswitchID *string `json:"sourceVswitchId,omitempty" tf:"source_vswitch_id,omitempty"`
}

// EntrySpec defines the desired state of Entry
type EntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntryParameters `json:"forProvider"`
}

// EntryStatus defines the observed state of Entry.
type EntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Entry is the Schema for the Entrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Entry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntrySpec   `json:"spec"`
	Status            EntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntryList contains a list of Entrys
type EntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Entry `json:"items"`
}

// Repository type metadata.
var (
	Entry_Kind             = "Entry"
	Entry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Entry_Kind}.String()
	Entry_KindAPIVersion   = Entry_Kind + "." + CRDGroupVersion.String()
	Entry_GroupVersionKind = CRDGroupVersion.WithKind(Entry_Kind)
)

func init() {
	SchemeBuilder.Register(&Entry{}, &EntryList{})
}
