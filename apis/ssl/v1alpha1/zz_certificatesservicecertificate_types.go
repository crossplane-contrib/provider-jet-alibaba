/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificatesServiceCertificateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CertificatesServiceCertificateParameters struct {

	// +kubebuilder:validation:Required
	Cert *string `json:"cert" tf:"cert,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`
}

// CertificatesServiceCertificateSpec defines the desired state of CertificatesServiceCertificate
type CertificatesServiceCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificatesServiceCertificateParameters `json:"forProvider"`
}

// CertificatesServiceCertificateStatus defines the observed state of CertificatesServiceCertificate.
type CertificatesServiceCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificatesServiceCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificatesServiceCertificate is the Schema for the CertificatesServiceCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type CertificatesServiceCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificatesServiceCertificateSpec   `json:"spec"`
	Status            CertificatesServiceCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificatesServiceCertificateList contains a list of CertificatesServiceCertificates
type CertificatesServiceCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificatesServiceCertificate `json:"items"`
}

// Repository type metadata.
var (
	CertificatesServiceCertificate_Kind             = "CertificatesServiceCertificate"
	CertificatesServiceCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificatesServiceCertificate_Kind}.String()
	CertificatesServiceCertificate_KindAPIVersion   = CertificatesServiceCertificate_Kind + "." + CRDGroupVersion.String()
	CertificatesServiceCertificate_GroupVersionKind = CRDGroupVersion.WithKind(CertificatesServiceCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificatesServiceCertificate{}, &CertificatesServiceCertificateList{})
}
