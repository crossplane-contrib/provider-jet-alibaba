/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNClientCertObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VPNClientCertParameters struct {

	// +kubebuilder:validation:Required
	SSLVPNServerID *string `json:"sslVpnServerId" tf:"ssl_vpn_server_id,omitempty"`
}

// VPNClientCertSpec defines the desired state of VPNClientCert
type VPNClientCertSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNClientCertParameters `json:"forProvider"`
}

// VPNClientCertStatus defines the observed state of VPNClientCert.
type VPNClientCertStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNClientCertObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNClientCert is the Schema for the VPNClientCerts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type VPNClientCert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNClientCertSpec   `json:"spec"`
	Status            VPNClientCertStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNClientCertList contains a list of VPNClientCerts
type VPNClientCertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNClientCert `json:"items"`
}

// Repository type metadata.
var (
	VPNClientCert_Kind             = "VPNClientCert"
	VPNClientCert_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNClientCert_Kind}.String()
	VPNClientCert_KindAPIVersion   = VPNClientCert_Kind + "." + CRDGroupVersion.String()
	VPNClientCert_GroupVersionKind = CRDGroupVersion.WithKind(VPNClientCert_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNClientCert{}, &VPNClientCertList{})
}
