/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SurveillanceSystemGroupObservation struct {
	CaptureImage *float64 `json:"captureImage,omitempty" tf:"capture_image,omitempty"`

	CaptureInterval *float64 `json:"captureInterval,omitempty" tf:"capture_interval,omitempty"`

	CaptureOssBucket *string `json:"captureOssBucket,omitempty" tf:"capture_oss_bucket,omitempty"`

	CaptureOssPath *string `json:"captureOssPath,omitempty" tf:"capture_oss_path,omitempty"`

	CaptureVideo *float64 `json:"captureVideo,omitempty" tf:"capture_video,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LazyPull *bool `json:"lazyPull,omitempty" tf:"lazy_pull,omitempty"`

	Status *bool `json:"status,omitempty" tf:"status,omitempty"`
}

type SurveillanceSystemGroupParameters struct {

	// +kubebuilder:validation:Optional
	Callback *string `json:"callback,omitempty" tf:"callback,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	GroupName *string `json:"groupName" tf:"group_name,omitempty"`

	// +kubebuilder:validation:Required
	InProtocol *string `json:"inProtocol" tf:"in_protocol,omitempty"`

	// +kubebuilder:validation:Required
	OutProtocol *string `json:"outProtocol" tf:"out_protocol,omitempty"`

	// +kubebuilder:validation:Required
	PlayDomain *string `json:"playDomain" tf:"play_domain,omitempty"`

	// +kubebuilder:validation:Required
	PushDomain *string `json:"pushDomain" tf:"push_domain,omitempty"`
}

// SurveillanceSystemGroupSpec defines the desired state of SurveillanceSystemGroup
type SurveillanceSystemGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SurveillanceSystemGroupParameters `json:"forProvider"`
}

// SurveillanceSystemGroupStatus defines the observed state of SurveillanceSystemGroup.
type SurveillanceSystemGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SurveillanceSystemGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SurveillanceSystemGroup is the Schema for the SurveillanceSystemGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type SurveillanceSystemGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SurveillanceSystemGroupSpec   `json:"spec"`
	Status            SurveillanceSystemGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SurveillanceSystemGroupList contains a list of SurveillanceSystemGroups
type SurveillanceSystemGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SurveillanceSystemGroup `json:"items"`
}

// Repository type metadata.
var (
	SurveillanceSystemGroup_Kind             = "SurveillanceSystemGroup"
	SurveillanceSystemGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SurveillanceSystemGroup_Kind}.String()
	SurveillanceSystemGroup_KindAPIVersion   = SurveillanceSystemGroup_Kind + "." + CRDGroupVersion.String()
	SurveillanceSystemGroup_GroupVersionKind = CRDGroupVersion.WithKind(SurveillanceSystemGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&SurveillanceSystemGroup{}, &SurveillanceSystemGroupList{})
}
