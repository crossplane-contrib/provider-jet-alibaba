/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BGPGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BGPGroupParameters struct {

	// +kubebuilder:validation:Optional
	AuthKey *string `json:"authKey,omitempty" tf:"auth_key,omitempty"`

	// +kubebuilder:validation:Optional
	BGPGroupName *string `json:"bgpGroupName,omitempty" tf:"bgp_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IsFakeAsn *bool `json:"isFakeAsn,omitempty" tf:"is_fake_asn,omitempty"`

	// +kubebuilder:validation:Optional
	LocalAsn *float64 `json:"localAsn,omitempty" tf:"local_asn,omitempty"`

	// +kubebuilder:validation:Required
	PeerAsn *float64 `json:"peerAsn" tf:"peer_asn,omitempty"`

	// +kubebuilder:validation:Required
	RouterID *string `json:"routerId" tf:"router_id,omitempty"`
}

// BGPGroupSpec defines the desired state of BGPGroup
type BGPGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BGPGroupParameters `json:"forProvider"`
}

// BGPGroupStatus defines the observed state of BGPGroup.
type BGPGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BGPGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BGPGroup is the Schema for the BGPGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BGPGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BGPGroupSpec   `json:"spec"`
	Status            BGPGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BGPGroupList contains a list of BGPGroups
type BGPGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BGPGroup `json:"items"`
}

// Repository type metadata.
var (
	BGPGroup_Kind             = "BGPGroup"
	BGPGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BGPGroup_Kind}.String()
	BGPGroup_KindAPIVersion   = BGPGroup_Kind + "." + CRDGroupVersion.String()
	BGPGroup_GroupVersionKind = CRDGroupVersion.WithKind(BGPGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&BGPGroup{}, &BGPGroupList{})
}
