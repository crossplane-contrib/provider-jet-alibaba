/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BGPNetworkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BGPNetworkParameters struct {

	// +kubebuilder:validation:Required
	DstCidrBlock *string `json:"dstCidrBlock" tf:"dst_cidr_block,omitempty"`

	// +kubebuilder:validation:Required
	RouterID *string `json:"routerId" tf:"router_id,omitempty"`
}

// BGPNetworkSpec defines the desired state of BGPNetwork
type BGPNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BGPNetworkParameters `json:"forProvider"`
}

// BGPNetworkStatus defines the observed state of BGPNetwork.
type BGPNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BGPNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BGPNetwork is the Schema for the BGPNetworks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BGPNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BGPNetworkSpec   `json:"spec"`
	Status            BGPNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BGPNetworkList contains a list of BGPNetworks
type BGPNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BGPNetwork `json:"items"`
}

// Repository type metadata.
var (
	BGPNetwork_Kind             = "BGPNetwork"
	BGPNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BGPNetwork_Kind}.String()
	BGPNetwork_KindAPIVersion   = BGPNetwork_Kind + "." + CRDGroupVersion.String()
	BGPNetwork_GroupVersionKind = CRDGroupVersion.WithKind(BGPNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&BGPNetwork{}, &BGPNetworkList{})
}
