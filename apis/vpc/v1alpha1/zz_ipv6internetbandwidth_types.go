/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv6InternetBandwidthObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type IPv6InternetBandwidthParameters struct {

	// +kubebuilder:validation:Required
	Bandwidth *float64 `json:"bandwidth" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Required
	IPv6AddressID *string `json:"ipv6AddressId" tf:"ipv6_address_id,omitempty"`

	// +kubebuilder:validation:Required
	IPv6GatewayID *string `json:"ipv6GatewayId" tf:"ipv6_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	InternetChargeType *string `json:"internetChargeType,omitempty" tf:"internet_charge_type,omitempty"`
}

// IPv6InternetBandwidthSpec defines the desired state of IPv6InternetBandwidth
type IPv6InternetBandwidthSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv6InternetBandwidthParameters `json:"forProvider"`
}

// IPv6InternetBandwidthStatus defines the observed state of IPv6InternetBandwidth.
type IPv6InternetBandwidthStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv6InternetBandwidthObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPv6InternetBandwidth is the Schema for the IPv6InternetBandwidths API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type IPv6InternetBandwidth struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPv6InternetBandwidthSpec   `json:"spec"`
	Status            IPv6InternetBandwidthStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv6InternetBandwidthList contains a list of IPv6InternetBandwidths
type IPv6InternetBandwidthList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv6InternetBandwidth `json:"items"`
}

// Repository type metadata.
var (
	IPv6InternetBandwidth_Kind             = "IPv6InternetBandwidth"
	IPv6InternetBandwidth_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPv6InternetBandwidth_Kind}.String()
	IPv6InternetBandwidth_KindAPIVersion   = IPv6InternetBandwidth_Kind + "." + CRDGroupVersion.String()
	IPv6InternetBandwidth_GroupVersionKind = CRDGroupVersion.WithKind(IPv6InternetBandwidth_Kind)
)

func init() {
	SchemeBuilder.Register(&IPv6InternetBandwidth{}, &IPv6InternetBandwidthList{})
}
