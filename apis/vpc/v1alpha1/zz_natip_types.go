/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATIPObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NATIPID *string `json:"natIpId,omitempty" tf:"nat_ip_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NATIPParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	NATGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPCidrID *string `json:"natIpCidrId,omitempty" tf:"nat_ip_cidr_id,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPDescription *string `json:"natIpDescription,omitempty" tf:"nat_ip_description,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPName *string `json:"natIpName,omitempty" tf:"nat_ip_name,omitempty"`
}

// NATIPSpec defines the desired state of NATIP
type NATIPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATIPParameters `json:"forProvider"`
}

// NATIPStatus defines the observed state of NATIP.
type NATIPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATIPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NATIP is the Schema for the NATIPs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type NATIP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATIPSpec   `json:"spec"`
	Status            NATIPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATIPList contains a list of NATIPs
type NATIPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATIP `json:"items"`
}

// Repository type metadata.
var (
	NATIP_Kind             = "NATIP"
	NATIP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATIP_Kind}.String()
	NATIP_KindAPIVersion   = NATIP_Kind + "." + CRDGroupVersion.String()
	NATIP_GroupVersionKind = CRDGroupVersion.WithKind(NATIP_Kind)
)

func init() {
	SchemeBuilder.Register(&NATIP{}, &NATIPList{})
}
