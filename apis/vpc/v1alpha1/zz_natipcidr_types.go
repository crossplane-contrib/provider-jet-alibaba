/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATIPCidrObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NATIPCidrParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	NATGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPCidrDescription *string `json:"natIpCidrDescription,omitempty" tf:"nat_ip_cidr_description,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPCidrName *string `json:"natIpCidrName,omitempty" tf:"nat_ip_cidr_name,omitempty"`
}

// NATIPCidrSpec defines the desired state of NATIPCidr
type NATIPCidrSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATIPCidrParameters `json:"forProvider"`
}

// NATIPCidrStatus defines the observed state of NATIPCidr.
type NATIPCidrStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATIPCidrObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NATIPCidr is the Schema for the NATIPCidrs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type NATIPCidr struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATIPCidrSpec   `json:"spec"`
	Status            NATIPCidrStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATIPCidrList contains a list of NATIPCidrs
type NATIPCidrList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATIPCidr `json:"items"`
}

// Repository type metadata.
var (
	NATIPCidr_Kind             = "NATIPCidr"
	NATIPCidr_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATIPCidr_Kind}.String()
	NATIPCidr_KindAPIVersion   = NATIPCidr_Kind + "." + CRDGroupVersion.String()
	NATIPCidr_GroupVersionKind = CRDGroupVersion.WithKind(NATIPCidr_Kind)
)

func init() {
	SchemeBuilder.Register(&NATIPCidr{}, &NATIPCidrList{})
}
