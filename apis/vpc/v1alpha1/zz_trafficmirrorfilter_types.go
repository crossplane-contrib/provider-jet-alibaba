/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrafficMirrorFilterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TrafficMirrorFilterParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficMirrorFilterDescription *string `json:"trafficMirrorFilterDescription,omitempty" tf:"traffic_mirror_filter_description,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficMirrorFilterName *string `json:"trafficMirrorFilterName,omitempty" tf:"traffic_mirror_filter_name,omitempty"`
}

// TrafficMirrorFilterSpec defines the desired state of TrafficMirrorFilter
type TrafficMirrorFilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficMirrorFilterParameters `json:"forProvider"`
}

// TrafficMirrorFilterStatus defines the observed state of TrafficMirrorFilter.
type TrafficMirrorFilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficMirrorFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorFilter is the Schema for the TrafficMirrorFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TrafficMirrorFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficMirrorFilterSpec   `json:"spec"`
	Status            TrafficMirrorFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorFilterList contains a list of TrafficMirrorFilters
type TrafficMirrorFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficMirrorFilter `json:"items"`
}

// Repository type metadata.
var (
	TrafficMirrorFilter_Kind             = "TrafficMirrorFilter"
	TrafficMirrorFilter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrafficMirrorFilter_Kind}.String()
	TrafficMirrorFilter_KindAPIVersion   = TrafficMirrorFilter_Kind + "." + CRDGroupVersion.String()
	TrafficMirrorFilter_GroupVersionKind = CRDGroupVersion.WithKind(TrafficMirrorFilter_Kind)
)

func init() {
	SchemeBuilder.Register(&TrafficMirrorFilter{}, &TrafficMirrorFilterList{})
}
