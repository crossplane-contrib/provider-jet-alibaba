/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrafficMirrorFilterEgressRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TrafficMirrorFilterEgressRuleID *string `json:"trafficMirrorFilterEgressRuleId,omitempty" tf:"traffic_mirror_filter_egress_rule_id,omitempty"`
}

type TrafficMirrorFilterEgressRuleParameters struct {

	// +kubebuilder:validation:Required
	DestinationCidrBlock *string `json:"destinationCidrBlock" tf:"destination_cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationPortRange *string `json:"destinationPortRange,omitempty" tf:"destination_port_range,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Required
	RuleAction *string `json:"ruleAction" tf:"rule_action,omitempty"`

	// +kubebuilder:validation:Required
	SourceCidrBlock *string `json:"sourceCidrBlock" tf:"source_cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePortRange *string `json:"sourcePortRange,omitempty" tf:"source_port_range,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterId" tf:"traffic_mirror_filter_id,omitempty"`
}

// TrafficMirrorFilterEgressRuleSpec defines the desired state of TrafficMirrorFilterEgressRule
type TrafficMirrorFilterEgressRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficMirrorFilterEgressRuleParameters `json:"forProvider"`
}

// TrafficMirrorFilterEgressRuleStatus defines the observed state of TrafficMirrorFilterEgressRule.
type TrafficMirrorFilterEgressRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficMirrorFilterEgressRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorFilterEgressRule is the Schema for the TrafficMirrorFilterEgressRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TrafficMirrorFilterEgressRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficMirrorFilterEgressRuleSpec   `json:"spec"`
	Status            TrafficMirrorFilterEgressRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorFilterEgressRuleList contains a list of TrafficMirrorFilterEgressRules
type TrafficMirrorFilterEgressRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficMirrorFilterEgressRule `json:"items"`
}

// Repository type metadata.
var (
	TrafficMirrorFilterEgressRule_Kind             = "TrafficMirrorFilterEgressRule"
	TrafficMirrorFilterEgressRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrafficMirrorFilterEgressRule_Kind}.String()
	TrafficMirrorFilterEgressRule_KindAPIVersion   = TrafficMirrorFilterEgressRule_Kind + "." + CRDGroupVersion.String()
	TrafficMirrorFilterEgressRule_GroupVersionKind = CRDGroupVersion.WithKind(TrafficMirrorFilterEgressRule_Kind)
)

func init() {
	SchemeBuilder.Register(&TrafficMirrorFilterEgressRule{}, &TrafficMirrorFilterEgressRuleList{})
}
