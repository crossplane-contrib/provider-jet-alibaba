/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrafficMirrorSessionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TrafficMirrorSessionParameters struct {

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterId" tf:"traffic_mirror_filter_id,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficMirrorSessionDescription *string `json:"trafficMirrorSessionDescription,omitempty" tf:"traffic_mirror_session_description,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficMirrorSessionName *string `json:"trafficMirrorSessionName,omitempty" tf:"traffic_mirror_session_name,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorSourceIds []*string `json:"trafficMirrorSourceIds" tf:"traffic_mirror_source_ids,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorTargetID *string `json:"trafficMirrorTargetId" tf:"traffic_mirror_target_id,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorTargetType *string `json:"trafficMirrorTargetType" tf:"traffic_mirror_target_type,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *float64 `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

// TrafficMirrorSessionSpec defines the desired state of TrafficMirrorSession
type TrafficMirrorSessionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficMirrorSessionParameters `json:"forProvider"`
}

// TrafficMirrorSessionStatus defines the observed state of TrafficMirrorSession.
type TrafficMirrorSessionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficMirrorSessionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorSession is the Schema for the TrafficMirrorSessions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type TrafficMirrorSession struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficMirrorSessionSpec   `json:"spec"`
	Status            TrafficMirrorSessionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorSessionList contains a list of TrafficMirrorSessions
type TrafficMirrorSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficMirrorSession `json:"items"`
}

// Repository type metadata.
var (
	TrafficMirrorSession_Kind             = "TrafficMirrorSession"
	TrafficMirrorSession_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrafficMirrorSession_Kind}.String()
	TrafficMirrorSession_KindAPIVersion   = TrafficMirrorSession_Kind + "." + CRDGroupVersion.String()
	TrafficMirrorSession_GroupVersionKind = CRDGroupVersion.WithKind(TrafficMirrorSession_Kind)
)

func init() {
	SchemeBuilder.Register(&TrafficMirrorSession{}, &TrafficMirrorSessionList{})
}
