/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VbrHaObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VbrHaParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// +kubebuilder:validation:Required
	PeerVbrID *string `json:"peerVbrId" tf:"peer_vbr_id,omitempty"`

	// +kubebuilder:validation:Optional
	VbrHaName *string `json:"vbrHaName,omitempty" tf:"vbr_ha_name,omitempty"`

	// +kubebuilder:validation:Required
	VbrID *string `json:"vbrId" tf:"vbr_id,omitempty"`
}

// VbrHaSpec defines the desired state of VbrHa
type VbrHaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VbrHaParameters `json:"forProvider"`
}

// VbrHaStatus defines the observed state of VbrHa.
type VbrHaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VbrHaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VbrHa is the Schema for the VbrHas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type VbrHa struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VbrHaSpec   `json:"spec"`
	Status            VbrHaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VbrHaList contains a list of VbrHas
type VbrHaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VbrHa `json:"items"`
}

// Repository type metadata.
var (
	VbrHa_Kind             = "VbrHa"
	VbrHa_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VbrHa_Kind}.String()
	VbrHa_KindAPIVersion   = VbrHa_Kind + "." + CRDGroupVersion.String()
	VbrHa_GroupVersionKind = CRDGroupVersion.WithKind(VbrHa_Kind)
)

func init() {
	SchemeBuilder.Register(&VbrHa{}, &VbrHaList{})
}
