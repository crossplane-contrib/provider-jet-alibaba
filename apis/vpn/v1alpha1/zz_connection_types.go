/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ConnectionParameters struct {

	// +kubebuilder:validation:Required
	CustomerGatewayID *string `json:"customerGatewayId" tf:"customer_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	EffectImmediately *bool `json:"effectImmediately,omitempty" tf:"effect_immediately,omitempty"`

	// +kubebuilder:validation:Optional
	IkeConfig []IkeConfigParameters `json:"ikeConfig,omitempty" tf:"ike_config,omitempty"`

	// +kubebuilder:validation:Optional
	IpsecConfig []IpsecConfigParameters `json:"ipsecConfig,omitempty" tf:"ipsec_config,omitempty"`

	// +kubebuilder:validation:Required
	LocalSubnet []*string `json:"localSubnet" tf:"local_subnet,omitempty"`

	// +kubebuilder:validation:Required
	RemoteSubnet []*string `json:"remoteSubnet" tf:"remote_subnet,omitempty"`

	// +kubebuilder:validation:Required
	VPNGatewayID *string `json:"vpnGatewayId" tf:"vpn_gateway_id,omitempty"`
}

type IkeConfigObservation struct {
}

type IkeConfigParameters struct {

	// +kubebuilder:validation:Optional
	IkeAuthAlg *string `json:"ikeAuthAlg,omitempty" tf:"ike_auth_alg,omitempty"`

	// +kubebuilder:validation:Optional
	IkeEncAlg *string `json:"ikeEncAlg,omitempty" tf:"ike_enc_alg,omitempty"`

	// +kubebuilder:validation:Optional
	IkeLifetime *float64 `json:"ikeLifetime,omitempty" tf:"ike_lifetime,omitempty"`

	// +kubebuilder:validation:Optional
	IkeLocalID *string `json:"ikeLocalId,omitempty" tf:"ike_local_id,omitempty"`

	// +kubebuilder:validation:Optional
	IkeMode *string `json:"ikeMode,omitempty" tf:"ike_mode,omitempty"`

	// +kubebuilder:validation:Optional
	IkePfs *string `json:"ikePfs,omitempty" tf:"ike_pfs,omitempty"`

	// +kubebuilder:validation:Optional
	IkeRemoteID *string `json:"ikeRemoteId,omitempty" tf:"ike_remote_id,omitempty"`

	// +kubebuilder:validation:Optional
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// +kubebuilder:validation:Optional
	Psk *string `json:"psk,omitempty" tf:"psk,omitempty"`
}

type IpsecConfigObservation struct {
}

type IpsecConfigParameters struct {

	// +kubebuilder:validation:Optional
	IpsecAuthAlg *string `json:"ipsecAuthAlg,omitempty" tf:"ipsec_auth_alg,omitempty"`

	// +kubebuilder:validation:Optional
	IpsecEncAlg *string `json:"ipsecEncAlg,omitempty" tf:"ipsec_enc_alg,omitempty"`

	// +kubebuilder:validation:Optional
	IpsecLifetime *float64 `json:"ipsecLifetime,omitempty" tf:"ipsec_lifetime,omitempty"`

	// +kubebuilder:validation:Optional
	IpsecPfs *string `json:"ipsecPfs,omitempty" tf:"ipsec_pfs,omitempty"`
}

// ConnectionSpec defines the desired state of Connection
type ConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionParameters `json:"forProvider"`
}

// ConnectionStatus defines the observed state of Connection.
type ConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Connection is the Schema for the Connections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type Connection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionSpec   `json:"spec"`
	Status            ConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionList contains a list of Connections
type ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Connection `json:"items"`
}

// Repository type metadata.
var (
	Connection_Kind             = "Connection"
	Connection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Connection_Kind}.String()
	Connection_KindAPIVersion   = Connection_Kind + "." + CRDGroupVersion.String()
	Connection_GroupVersionKind = CRDGroupVersion.WithKind(Connection_Kind)
)

func init() {
	SchemeBuilder.Register(&Connection{}, &ConnectionList{})
}
