/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BastionhostInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BastionhostInstanceParameters struct {

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePublicAccess *bool `json:"enablePublicAccess,omitempty" tf:"enable_public_access,omitempty"`

	// +kubebuilder:validation:Required
	LicenseCode *string `json:"licenseCode" tf:"license_code,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupIds []*string `json:"securityGroupIds" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VswitchID *string `json:"vswitchId" tf:"vswitch_id,omitempty"`
}

// BastionhostInstanceSpec defines the desired state of BastionhostInstance
type BastionhostInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BastionhostInstanceParameters `json:"forProvider"`
}

// BastionhostInstanceStatus defines the observed state of BastionhostInstance.
type BastionhostInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BastionhostInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BastionhostInstance is the Schema for the BastionhostInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloudjet}
type BastionhostInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BastionhostInstanceSpec   `json:"spec"`
	Status            BastionhostInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BastionhostInstanceList contains a list of BastionhostInstances
type BastionhostInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BastionhostInstance `json:"items"`
}

// Repository type metadata.
var (
	BastionhostInstance_Kind             = "BastionhostInstance"
	BastionhostInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BastionhostInstance_Kind}.String()
	BastionhostInstance_KindAPIVersion   = BastionhostInstance_Kind + "." + CRDGroupVersion.String()
	BastionhostInstance_GroupVersionKind = CRDGroupVersion.WithKind(BastionhostInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&BastionhostInstance{}, &BastionhostInstanceList{})
}
